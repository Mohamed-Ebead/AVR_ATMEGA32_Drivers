
ICU_SW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  000023d8  0000246c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  0080007e  0080007e  0000248a  2**0
                  ALLOC
  3 .stab         00001c98  00000000  00000000  0000248c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000db7  00000000  00000000  00004124  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004edb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000501b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000518b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008e59  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009627  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ed       	ldi	r30, 0xD8	; 216
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 38       	cpi	r26, 0x89	; 137
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <main>
      8a:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e7       	ldi	r26, 0x76	; 118
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cf 11 	jmp	0x239e	; 0x239e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bf 11 	jmp	0x237e	; 0x237e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 db 11 	jmp	0x23b6	; 0x23b6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bf 11 	jmp	0x237e	; 0x237e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 db 11 	jmp	0x23b6	; 0x23b6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e7       	ldi	r24, 0x76	; 118
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cf 11 	jmp	0x239e	; 0x239e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bf 11 	jmp	0x237e	; 0x237e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 db 11 	jmp	0x23b6	; 0x23b6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 bf 11 	jmp	0x237e	; 0x237e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 db 11 	jmp	0x23b6	; 0x23b6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 bf 11 	jmp	0x237e	; 0x237e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 db 11 	jmp	0x23b6	; 0x23b6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 df 11 	jmp	0x23be	; 0x23be <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_Init>:
#include "DIO_int.h"
#include "ADC_int.h"
#include "ADC_private.h"


void ADC_Init (void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	DIO_SetPinDirection (PORTA_DIO, PIN0, INPUT);
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_SetPinDirection>
	DIO_SetPinValue (PORTA_DIO , PIN0 , HIGH );
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_SetPinValue>

	// ADC Enable
	// Prescalar I/P CLK   / 8
	ADCSRA= 0b10000011 ;
     b62:	e6 e2       	ldi	r30, 0x26	; 38
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	83 e8       	ldi	r24, 0x83	; 131
     b68:	80 83       	st	Z, r24

	// Referance Voltage as AVCC with external capacitor
	// ADC Data Right Adjustment
	// ADC 0 sellected

	ADMUX = 0b01000000 ;
     b6a:	e7 e2       	ldi	r30, 0x27	; 39
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 e4       	ldi	r24, 0x40	; 64
     b70:	80 83       	st	Z, r24

}
     b72:	cf 91       	pop	r28
     b74:	df 91       	pop	r29
     b76:	08 95       	ret

00000b78 <ADC_Read>:


/*********************************************************/

u8 ADC_Read (u8 channel) {
     b78:	df 93       	push	r29
     b7a:	cf 93       	push	r28
     b7c:	0f 92       	push	r0
     b7e:	cd b7       	in	r28, 0x3d	; 61
     b80:	de b7       	in	r29, 0x3e	; 62
     b82:	89 83       	std	Y+1, r24	; 0x01

	// ADC Channel Selection

		channel &= 0x07;  // channel from 0 : 7  ,& to neglect any bit more than 7
     b84:	89 81       	ldd	r24, Y+1	; 0x01
     b86:	87 70       	andi	r24, 0x07	; 7
     b88:	89 83       	std	Y+1, r24	; 0x01
		ADMUX &= 0xE0;   // to save higher 3 bits as they are and set the rest to 0
     b8a:	a7 e2       	ldi	r26, 0x27	; 39
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	e7 e2       	ldi	r30, 0x27	; 39
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	80 7e       	andi	r24, 0xE0	; 224
     b96:	8c 93       	st	X, r24
		ADMUX |= channel;
     b98:	a7 e2       	ldi	r26, 0x27	; 39
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	e7 e2       	ldi	r30, 0x27	; 39
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	90 81       	ld	r25, Z
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	89 2b       	or	r24, r25
     ba6:	8c 93       	st	X, r24


	// Start Single Convertion
		SET_BIT(ADCSRA,ADSC)  ;
     ba8:	a6 e2       	ldi	r26, 0x26	; 38
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	e6 e2       	ldi	r30, 0x26	; 38
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	80 64       	ori	r24, 0x40	; 64
     bb4:	8c 93       	st	X, r24


	//wait for the conversion (ADIF bit is set when conversion is done )
		while(!GET_BIT(ADCSRA,4));
     bb6:	e6 e2       	ldi	r30, 0x26	; 38
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	82 95       	swap	r24
     bbe:	8f 70       	andi	r24, 0x0F	; 15
     bc0:	88 2f       	mov	r24, r24
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	81 70       	andi	r24, 0x01	; 1
     bc6:	90 70       	andi	r25, 0x00	; 0
     bc8:	00 97       	sbiw	r24, 0x00	; 0
     bca:	a9 f3       	breq	.-22     	; 0xbb6 <ADC_Read+0x3e>


		return ADCL;
     bcc:	e4 e2       	ldi	r30, 0x24	; 36
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z

}
     bd2:	0f 90       	pop	r0
     bd4:	cf 91       	pop	r28
     bd6:	df 91       	pop	r29
     bd8:	08 95       	ret

00000bda <DIO_SetPinValue>:
#include "DIO_int.h"
#include "DIO_reg.h"

/* IO Pins */
void DIO_SetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy)
{
     bda:	df 93       	push	r29
     bdc:	cf 93       	push	r28
     bde:	cd b7       	in	r28, 0x3d	; 61
     be0:	de b7       	in	r29, 0x3e	; 62
     be2:	27 97       	sbiw	r28, 0x07	; 7
     be4:	0f b6       	in	r0, 0x3f	; 63
     be6:	f8 94       	cli
     be8:	de bf       	out	0x3e, r29	; 62
     bea:	0f be       	out	0x3f, r0	; 63
     bec:	cd bf       	out	0x3d, r28	; 61
     bee:	89 83       	std	Y+1, r24	; 0x01
     bf0:	6a 83       	std	Y+2, r22	; 0x02
     bf2:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD_DIO) && (u8PinIdCopy <= PIN7))
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	84 30       	cpi	r24, 0x04	; 4
     bf8:	08 f0       	brcs	.+2      	; 0xbfc <DIO_SetPinValue+0x22>
     bfa:	ee c0       	rjmp	.+476    	; 0xdd8 <DIO_SetPinValue+0x1fe>
     bfc:	8a 81       	ldd	r24, Y+2	; 0x02
     bfe:	88 30       	cpi	r24, 0x08	; 8
     c00:	08 f0       	brcs	.+2      	; 0xc04 <DIO_SetPinValue+0x2a>
     c02:	ea c0       	rjmp	.+468    	; 0xdd8 <DIO_SetPinValue+0x1fe>
	{
		if (u8PinValCopy == HIGH)
     c04:	8b 81       	ldd	r24, Y+3	; 0x03
     c06:	81 30       	cpi	r24, 0x01	; 1
     c08:	09 f0       	breq	.+2      	; 0xc0c <DIO_SetPinValue+0x32>
     c0a:	6f c0       	rjmp	.+222    	; 0xcea <DIO_SetPinValue+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
     c0c:	89 81       	ldd	r24, Y+1	; 0x01
     c0e:	28 2f       	mov	r18, r24
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	3f 83       	std	Y+7, r19	; 0x07
     c14:	2e 83       	std	Y+6, r18	; 0x06
     c16:	8e 81       	ldd	r24, Y+6	; 0x06
     c18:	9f 81       	ldd	r25, Y+7	; 0x07
     c1a:	81 30       	cpi	r24, 0x01	; 1
     c1c:	91 05       	cpc	r25, r1
     c1e:	49 f1       	breq	.+82     	; 0xc72 <DIO_SetPinValue+0x98>
     c20:	2e 81       	ldd	r18, Y+6	; 0x06
     c22:	3f 81       	ldd	r19, Y+7	; 0x07
     c24:	22 30       	cpi	r18, 0x02	; 2
     c26:	31 05       	cpc	r19, r1
     c28:	2c f4       	brge	.+10     	; 0xc34 <DIO_SetPinValue+0x5a>
     c2a:	8e 81       	ldd	r24, Y+6	; 0x06
     c2c:	9f 81       	ldd	r25, Y+7	; 0x07
     c2e:	00 97       	sbiw	r24, 0x00	; 0
     c30:	61 f0       	breq	.+24     	; 0xc4a <DIO_SetPinValue+0x70>
     c32:	d2 c0       	rjmp	.+420    	; 0xdd8 <DIO_SetPinValue+0x1fe>
     c34:	2e 81       	ldd	r18, Y+6	; 0x06
     c36:	3f 81       	ldd	r19, Y+7	; 0x07
     c38:	22 30       	cpi	r18, 0x02	; 2
     c3a:	31 05       	cpc	r19, r1
     c3c:	71 f1       	breq	.+92     	; 0xc9a <DIO_SetPinValue+0xc0>
     c3e:	8e 81       	ldd	r24, Y+6	; 0x06
     c40:	9f 81       	ldd	r25, Y+7	; 0x07
     c42:	83 30       	cpi	r24, 0x03	; 3
     c44:	91 05       	cpc	r25, r1
     c46:	e9 f1       	breq	.+122    	; 0xcc2 <DIO_SetPinValue+0xe8>
     c48:	c7 c0       	rjmp	.+398    	; 0xdd8 <DIO_SetPinValue+0x1fe>
			{
				case PORTA_DIO: SET_BIT(PORTA_Register,u8PinIdCopy); break;
     c4a:	ab e3       	ldi	r26, 0x3B	; 59
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	eb e3       	ldi	r30, 0x3B	; 59
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	48 2f       	mov	r20, r24
     c56:	8a 81       	ldd	r24, Y+2	; 0x02
     c58:	28 2f       	mov	r18, r24
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	02 2e       	mov	r0, r18
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <DIO_SetPinValue+0x8e>
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	0a 94       	dec	r0
     c6a:	e2 f7       	brpl	.-8      	; 0xc64 <DIO_SetPinValue+0x8a>
     c6c:	84 2b       	or	r24, r20
     c6e:	8c 93       	st	X, r24
     c70:	b3 c0       	rjmp	.+358    	; 0xdd8 <DIO_SetPinValue+0x1fe>
				case PORTB_DIO: SET_BIT(PORTB_Register,u8PinIdCopy); break;
     c72:	a8 e3       	ldi	r26, 0x38	; 56
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	e8 e3       	ldi	r30, 0x38	; 56
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	48 2f       	mov	r20, r24
     c7e:	8a 81       	ldd	r24, Y+2	; 0x02
     c80:	28 2f       	mov	r18, r24
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	02 2e       	mov	r0, r18
     c8a:	02 c0       	rjmp	.+4      	; 0xc90 <DIO_SetPinValue+0xb6>
     c8c:	88 0f       	add	r24, r24
     c8e:	99 1f       	adc	r25, r25
     c90:	0a 94       	dec	r0
     c92:	e2 f7       	brpl	.-8      	; 0xc8c <DIO_SetPinValue+0xb2>
     c94:	84 2b       	or	r24, r20
     c96:	8c 93       	st	X, r24
     c98:	9f c0       	rjmp	.+318    	; 0xdd8 <DIO_SetPinValue+0x1fe>
				case PORTC_DIO: SET_BIT(PORTC_Register,u8PinIdCopy); break;
     c9a:	a5 e3       	ldi	r26, 0x35	; 53
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	e5 e3       	ldi	r30, 0x35	; 53
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	48 2f       	mov	r20, r24
     ca6:	8a 81       	ldd	r24, Y+2	; 0x02
     ca8:	28 2f       	mov	r18, r24
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	02 2e       	mov	r0, r18
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <DIO_SetPinValue+0xde>
     cb4:	88 0f       	add	r24, r24
     cb6:	99 1f       	adc	r25, r25
     cb8:	0a 94       	dec	r0
     cba:	e2 f7       	brpl	.-8      	; 0xcb4 <DIO_SetPinValue+0xda>
     cbc:	84 2b       	or	r24, r20
     cbe:	8c 93       	st	X, r24
     cc0:	8b c0       	rjmp	.+278    	; 0xdd8 <DIO_SetPinValue+0x1fe>
				case PORTD_DIO: SET_BIT(PORTD_Register,u8PinIdCopy); break;
     cc2:	a2 e3       	ldi	r26, 0x32	; 50
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e2 e3       	ldi	r30, 0x32	; 50
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	48 2f       	mov	r20, r24
     cce:	8a 81       	ldd	r24, Y+2	; 0x02
     cd0:	28 2f       	mov	r18, r24
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	02 2e       	mov	r0, r18
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <DIO_SetPinValue+0x106>
     cdc:	88 0f       	add	r24, r24
     cde:	99 1f       	adc	r25, r25
     ce0:	0a 94       	dec	r0
     ce2:	e2 f7       	brpl	.-8      	; 0xcdc <DIO_SetPinValue+0x102>
     ce4:	84 2b       	or	r24, r20
     ce6:	8c 93       	st	X, r24
     ce8:	77 c0       	rjmp	.+238    	; 0xdd8 <DIO_SetPinValue+0x1fe>
			}
		
		}
		
		else if (u8PinValCopy == LOW)
     cea:	8b 81       	ldd	r24, Y+3	; 0x03
     cec:	88 23       	and	r24, r24
     cee:	09 f0       	breq	.+2      	; 0xcf2 <DIO_SetPinValue+0x118>
     cf0:	73 c0       	rjmp	.+230    	; 0xdd8 <DIO_SetPinValue+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
     cf4:	28 2f       	mov	r18, r24
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	3d 83       	std	Y+5, r19	; 0x05
     cfa:	2c 83       	std	Y+4, r18	; 0x04
     cfc:	8c 81       	ldd	r24, Y+4	; 0x04
     cfe:	9d 81       	ldd	r25, Y+5	; 0x05
     d00:	81 30       	cpi	r24, 0x01	; 1
     d02:	91 05       	cpc	r25, r1
     d04:	59 f1       	breq	.+86     	; 0xd5c <DIO_SetPinValue+0x182>
     d06:	2c 81       	ldd	r18, Y+4	; 0x04
     d08:	3d 81       	ldd	r19, Y+5	; 0x05
     d0a:	22 30       	cpi	r18, 0x02	; 2
     d0c:	31 05       	cpc	r19, r1
     d0e:	2c f4       	brge	.+10     	; 0xd1a <DIO_SetPinValue+0x140>
     d10:	8c 81       	ldd	r24, Y+4	; 0x04
     d12:	9d 81       	ldd	r25, Y+5	; 0x05
     d14:	00 97       	sbiw	r24, 0x00	; 0
     d16:	69 f0       	breq	.+26     	; 0xd32 <DIO_SetPinValue+0x158>
     d18:	5f c0       	rjmp	.+190    	; 0xdd8 <DIO_SetPinValue+0x1fe>
     d1a:	2c 81       	ldd	r18, Y+4	; 0x04
     d1c:	3d 81       	ldd	r19, Y+5	; 0x05
     d1e:	22 30       	cpi	r18, 0x02	; 2
     d20:	31 05       	cpc	r19, r1
     d22:	89 f1       	breq	.+98     	; 0xd86 <DIO_SetPinValue+0x1ac>
     d24:	8c 81       	ldd	r24, Y+4	; 0x04
     d26:	9d 81       	ldd	r25, Y+5	; 0x05
     d28:	83 30       	cpi	r24, 0x03	; 3
     d2a:	91 05       	cpc	r25, r1
     d2c:	09 f4       	brne	.+2      	; 0xd30 <DIO_SetPinValue+0x156>
     d2e:	40 c0       	rjmp	.+128    	; 0xdb0 <DIO_SetPinValue+0x1d6>
     d30:	53 c0       	rjmp	.+166    	; 0xdd8 <DIO_SetPinValue+0x1fe>
			{
				case PORTA_DIO: CLR_BIT(PORTA_Register,u8PinIdCopy); break;
     d32:	ab e3       	ldi	r26, 0x3B	; 59
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	eb e3       	ldi	r30, 0x3B	; 59
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	48 2f       	mov	r20, r24
     d3e:	8a 81       	ldd	r24, Y+2	; 0x02
     d40:	28 2f       	mov	r18, r24
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	02 2e       	mov	r0, r18
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <DIO_SetPinValue+0x176>
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	0a 94       	dec	r0
     d52:	e2 f7       	brpl	.-8      	; 0xd4c <DIO_SetPinValue+0x172>
     d54:	80 95       	com	r24
     d56:	84 23       	and	r24, r20
     d58:	8c 93       	st	X, r24
     d5a:	3e c0       	rjmp	.+124    	; 0xdd8 <DIO_SetPinValue+0x1fe>
				case PORTB_DIO: CLR_BIT(PORTB_Register,u8PinIdCopy); break;
     d5c:	a8 e3       	ldi	r26, 0x38	; 56
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e8 e3       	ldi	r30, 0x38	; 56
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	48 2f       	mov	r20, r24
     d68:	8a 81       	ldd	r24, Y+2	; 0x02
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	02 2e       	mov	r0, r18
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <DIO_SetPinValue+0x1a0>
     d76:	88 0f       	add	r24, r24
     d78:	99 1f       	adc	r25, r25
     d7a:	0a 94       	dec	r0
     d7c:	e2 f7       	brpl	.-8      	; 0xd76 <DIO_SetPinValue+0x19c>
     d7e:	80 95       	com	r24
     d80:	84 23       	and	r24, r20
     d82:	8c 93       	st	X, r24
     d84:	29 c0       	rjmp	.+82     	; 0xdd8 <DIO_SetPinValue+0x1fe>
				case PORTC_DIO: CLR_BIT(PORTC_Register,u8PinIdCopy); break;
     d86:	a5 e3       	ldi	r26, 0x35	; 53
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e5 e3       	ldi	r30, 0x35	; 53
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	48 2f       	mov	r20, r24
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	02 2e       	mov	r0, r18
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <DIO_SetPinValue+0x1ca>
     da0:	88 0f       	add	r24, r24
     da2:	99 1f       	adc	r25, r25
     da4:	0a 94       	dec	r0
     da6:	e2 f7       	brpl	.-8      	; 0xda0 <DIO_SetPinValue+0x1c6>
     da8:	80 95       	com	r24
     daa:	84 23       	and	r24, r20
     dac:	8c 93       	st	X, r24
     dae:	14 c0       	rjmp	.+40     	; 0xdd8 <DIO_SetPinValue+0x1fe>
				case PORTD_DIO: CLR_BIT(PORTD_Register,u8PinIdCopy); break;
     db0:	a2 e3       	ldi	r26, 0x32	; 50
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	e2 e3       	ldi	r30, 0x32	; 50
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	48 2f       	mov	r20, r24
     dbc:	8a 81       	ldd	r24, Y+2	; 0x02
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	02 2e       	mov	r0, r18
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <DIO_SetPinValue+0x1f4>
     dca:	88 0f       	add	r24, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	0a 94       	dec	r0
     dd0:	e2 f7       	brpl	.-8      	; 0xdca <DIO_SetPinValue+0x1f0>
     dd2:	80 95       	com	r24
     dd4:	84 23       	and	r24, r20
     dd6:	8c 93       	st	X, r24
	
	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
     dd8:	27 96       	adiw	r28, 0x07	; 7
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	f8 94       	cli
     dde:	de bf       	out	0x3e, r29	; 62
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	cd bf       	out	0x3d, r28	; 61
     de4:	cf 91       	pop	r28
     de6:	df 91       	pop	r29
     de8:	08 95       	ret

00000dea <DIO_GetPinValue>:

u8 DIO_GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy)
{
     dea:	df 93       	push	r29
     dec:	cf 93       	push	r28
     dee:	00 d0       	rcall	.+0      	; 0xdf0 <DIO_GetPinValue+0x6>
     df0:	00 d0       	rcall	.+0      	; 0xdf2 <DIO_GetPinValue+0x8>
     df2:	0f 92       	push	r0
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
     df8:	8a 83       	std	Y+2, r24	; 0x02
     dfa:	6b 83       	std	Y+3, r22	; 0x03
	/* Define Local Variable to get the BIT Value */
	u8 u8ResultLocal;
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD_DIO) && (u8PinIdCopy <= PIN7))
     dfc:	8a 81       	ldd	r24, Y+2	; 0x02
     dfe:	84 30       	cpi	r24, 0x04	; 4
     e00:	08 f0       	brcs	.+2      	; 0xe04 <DIO_GetPinValue+0x1a>
     e02:	6c c0       	rjmp	.+216    	; 0xedc <DIO_GetPinValue+0xf2>
     e04:	8b 81       	ldd	r24, Y+3	; 0x03
     e06:	88 30       	cpi	r24, 0x08	; 8
     e08:	08 f0       	brcs	.+2      	; 0xe0c <DIO_GetPinValue+0x22>
     e0a:	68 c0       	rjmp	.+208    	; 0xedc <DIO_GetPinValue+0xf2>
	{
		/* Check on the Required PORT Number */
		switch (u8PortIdCopy)
     e0c:	8a 81       	ldd	r24, Y+2	; 0x02
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	3d 83       	std	Y+5, r19	; 0x05
     e14:	2c 83       	std	Y+4, r18	; 0x04
     e16:	4c 81       	ldd	r20, Y+4	; 0x04
     e18:	5d 81       	ldd	r21, Y+5	; 0x05
     e1a:	41 30       	cpi	r20, 0x01	; 1
     e1c:	51 05       	cpc	r21, r1
     e1e:	41 f1       	breq	.+80     	; 0xe70 <DIO_GetPinValue+0x86>
     e20:	8c 81       	ldd	r24, Y+4	; 0x04
     e22:	9d 81       	ldd	r25, Y+5	; 0x05
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	91 05       	cpc	r25, r1
     e28:	34 f4       	brge	.+12     	; 0xe36 <DIO_GetPinValue+0x4c>
     e2a:	2c 81       	ldd	r18, Y+4	; 0x04
     e2c:	3d 81       	ldd	r19, Y+5	; 0x05
     e2e:	21 15       	cp	r18, r1
     e30:	31 05       	cpc	r19, r1
     e32:	61 f0       	breq	.+24     	; 0xe4c <DIO_GetPinValue+0x62>
     e34:	55 c0       	rjmp	.+170    	; 0xee0 <DIO_GetPinValue+0xf6>
     e36:	4c 81       	ldd	r20, Y+4	; 0x04
     e38:	5d 81       	ldd	r21, Y+5	; 0x05
     e3a:	42 30       	cpi	r20, 0x02	; 2
     e3c:	51 05       	cpc	r21, r1
     e3e:	51 f1       	breq	.+84     	; 0xe94 <DIO_GetPinValue+0xaa>
     e40:	8c 81       	ldd	r24, Y+4	; 0x04
     e42:	9d 81       	ldd	r25, Y+5	; 0x05
     e44:	83 30       	cpi	r24, 0x03	; 3
     e46:	91 05       	cpc	r25, r1
     e48:	b9 f1       	breq	.+110    	; 0xeb8 <DIO_GetPinValue+0xce>
     e4a:	4a c0       	rjmp	.+148    	; 0xee0 <DIO_GetPinValue+0xf6>
		{
			case PORTA_DIO: u8ResultLocal= GET_BIT(PINA_Register,u8PinIdCopy); break;
     e4c:	e9 e3       	ldi	r30, 0x39	; 57
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	8b 81       	ldd	r24, Y+3	; 0x03
     e58:	88 2f       	mov	r24, r24
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	a9 01       	movw	r20, r18
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <DIO_GetPinValue+0x7a>
     e60:	55 95       	asr	r21
     e62:	47 95       	ror	r20
     e64:	8a 95       	dec	r24
     e66:	e2 f7       	brpl	.-8      	; 0xe60 <DIO_GetPinValue+0x76>
     e68:	ca 01       	movw	r24, r20
     e6a:	81 70       	andi	r24, 0x01	; 1
     e6c:	89 83       	std	Y+1, r24	; 0x01
     e6e:	38 c0       	rjmp	.+112    	; 0xee0 <DIO_GetPinValue+0xf6>
			case PORTB_DIO: u8ResultLocal= GET_BIT(PINB_Register,u8PinIdCopy); break;
     e70:	e6 e3       	ldi	r30, 0x36	; 54
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	8b 81       	ldd	r24, Y+3	; 0x03
     e7c:	88 2f       	mov	r24, r24
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	a9 01       	movw	r20, r18
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <DIO_GetPinValue+0x9e>
     e84:	55 95       	asr	r21
     e86:	47 95       	ror	r20
     e88:	8a 95       	dec	r24
     e8a:	e2 f7       	brpl	.-8      	; 0xe84 <DIO_GetPinValue+0x9a>
     e8c:	ca 01       	movw	r24, r20
     e8e:	81 70       	andi	r24, 0x01	; 1
     e90:	89 83       	std	Y+1, r24	; 0x01
     e92:	26 c0       	rjmp	.+76     	; 0xee0 <DIO_GetPinValue+0xf6>
			case PORTC_DIO: u8ResultLocal= GET_BIT(PINC_Register,u8PinIdCopy); break;
     e94:	e3 e3       	ldi	r30, 0x33	; 51
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ea0:	88 2f       	mov	r24, r24
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	a9 01       	movw	r20, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_GetPinValue+0xc2>
     ea8:	55 95       	asr	r21
     eaa:	47 95       	ror	r20
     eac:	8a 95       	dec	r24
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_GetPinValue+0xbe>
     eb0:	ca 01       	movw	r24, r20
     eb2:	81 70       	andi	r24, 0x01	; 1
     eb4:	89 83       	std	Y+1, r24	; 0x01
     eb6:	14 c0       	rjmp	.+40     	; 0xee0 <DIO_GetPinValue+0xf6>
			case PORTD_DIO: u8ResultLocal= GET_BIT(PIND_Register,u8PinIdCopy); break;
     eb8:	e0 e3       	ldi	r30, 0x30	; 48
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	88 2f       	mov	r24, r24
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	a9 01       	movw	r20, r18
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <DIO_GetPinValue+0xe6>
     ecc:	55 95       	asr	r21
     ece:	47 95       	ror	r20
     ed0:	8a 95       	dec	r24
     ed2:	e2 f7       	brpl	.-8      	; 0xecc <DIO_GetPinValue+0xe2>
     ed4:	ca 01       	movw	r24, r20
     ed6:	81 70       	andi	r24, 0x01	; 1
     ed8:	89 83       	std	Y+1, r24	; 0x01
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <DIO_GetPinValue+0xf6>
	}
	
	else
	{
		/* return 0xff in case of error in the Pin ID or PORT ID */
		u8ResultLocal = 0xFF;
     edc:	8f ef       	ldi	r24, 0xFF	; 255
     ede:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return u8ResultLocal;
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <DIO_SetPinDirection>:

void DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
     efa:	27 97       	sbiw	r28, 0x07	; 7
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	f8 94       	cli
     f00:	de bf       	out	0x3e, r29	; 62
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	cd bf       	out	0x3d, r28	; 61
     f06:	89 83       	std	Y+1, r24	; 0x01
     f08:	6a 83       	std	Y+2, r22	; 0x02
     f0a:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD_DIO) && (u8PinIdCopy <= PIN7))
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	84 30       	cpi	r24, 0x04	; 4
     f10:	08 f0       	brcs	.+2      	; 0xf14 <DIO_SetPinDirection+0x22>
     f12:	ee c0       	rjmp	.+476    	; 0x10f0 <DIO_SetPinDirection+0x1fe>
     f14:	8a 81       	ldd	r24, Y+2	; 0x02
     f16:	88 30       	cpi	r24, 0x08	; 8
     f18:	08 f0       	brcs	.+2      	; 0xf1c <DIO_SetPinDirection+0x2a>
     f1a:	ea c0       	rjmp	.+468    	; 0x10f0 <DIO_SetPinDirection+0x1fe>
	{
		if ( u8PinDirCopy == OUTPUT )
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	81 30       	cpi	r24, 0x01	; 1
     f20:	09 f0       	breq	.+2      	; 0xf24 <DIO_SetPinDirection+0x32>
     f22:	6f c0       	rjmp	.+222    	; 0x1002 <DIO_SetPinDirection+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	3f 83       	std	Y+7, r19	; 0x07
     f2c:	2e 83       	std	Y+6, r18	; 0x06
     f2e:	8e 81       	ldd	r24, Y+6	; 0x06
     f30:	9f 81       	ldd	r25, Y+7	; 0x07
     f32:	81 30       	cpi	r24, 0x01	; 1
     f34:	91 05       	cpc	r25, r1
     f36:	49 f1       	breq	.+82     	; 0xf8a <DIO_SetPinDirection+0x98>
     f38:	2e 81       	ldd	r18, Y+6	; 0x06
     f3a:	3f 81       	ldd	r19, Y+7	; 0x07
     f3c:	22 30       	cpi	r18, 0x02	; 2
     f3e:	31 05       	cpc	r19, r1
     f40:	2c f4       	brge	.+10     	; 0xf4c <DIO_SetPinDirection+0x5a>
     f42:	8e 81       	ldd	r24, Y+6	; 0x06
     f44:	9f 81       	ldd	r25, Y+7	; 0x07
     f46:	00 97       	sbiw	r24, 0x00	; 0
     f48:	61 f0       	breq	.+24     	; 0xf62 <DIO_SetPinDirection+0x70>
     f4a:	d2 c0       	rjmp	.+420    	; 0x10f0 <DIO_SetPinDirection+0x1fe>
     f4c:	2e 81       	ldd	r18, Y+6	; 0x06
     f4e:	3f 81       	ldd	r19, Y+7	; 0x07
     f50:	22 30       	cpi	r18, 0x02	; 2
     f52:	31 05       	cpc	r19, r1
     f54:	71 f1       	breq	.+92     	; 0xfb2 <DIO_SetPinDirection+0xc0>
     f56:	8e 81       	ldd	r24, Y+6	; 0x06
     f58:	9f 81       	ldd	r25, Y+7	; 0x07
     f5a:	83 30       	cpi	r24, 0x03	; 3
     f5c:	91 05       	cpc	r25, r1
     f5e:	e9 f1       	breq	.+122    	; 0xfda <DIO_SetPinDirection+0xe8>
     f60:	c7 c0       	rjmp	.+398    	; 0x10f0 <DIO_SetPinDirection+0x1fe>
			{
				case PORTA_DIO: SET_BIT(DDRA_Register,u8PinIdCopy); break;
     f62:	aa e3       	ldi	r26, 0x3A	; 58
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	ea e3       	ldi	r30, 0x3A	; 58
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	48 2f       	mov	r20, r24
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	02 2e       	mov	r0, r18
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <DIO_SetPinDirection+0x8e>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	0a 94       	dec	r0
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <DIO_SetPinDirection+0x8a>
     f84:	84 2b       	or	r24, r20
     f86:	8c 93       	st	X, r24
     f88:	b3 c0       	rjmp	.+358    	; 0x10f0 <DIO_SetPinDirection+0x1fe>
				case PORTB_DIO: SET_BIT(DDRB_Register,u8PinIdCopy); break;
     f8a:	a7 e3       	ldi	r26, 0x37	; 55
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e7 e3       	ldi	r30, 0x37	; 55
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	48 2f       	mov	r20, r24
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	02 2e       	mov	r0, r18
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <DIO_SetPinDirection+0xb6>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	0a 94       	dec	r0
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <DIO_SetPinDirection+0xb2>
     fac:	84 2b       	or	r24, r20
     fae:	8c 93       	st	X, r24
     fb0:	9f c0       	rjmp	.+318    	; 0x10f0 <DIO_SetPinDirection+0x1fe>
				case PORTC_DIO: SET_BIT(DDRC_Register,u8PinIdCopy); break;
     fb2:	a4 e3       	ldi	r26, 0x34	; 52
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e4 e3       	ldi	r30, 0x34	; 52
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	02 2e       	mov	r0, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <DIO_SetPinDirection+0xde>
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	0a 94       	dec	r0
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <DIO_SetPinDirection+0xda>
     fd4:	84 2b       	or	r24, r20
     fd6:	8c 93       	st	X, r24
     fd8:	8b c0       	rjmp	.+278    	; 0x10f0 <DIO_SetPinDirection+0x1fe>
				case PORTD_DIO: SET_BIT(DDRD_Register,u8PinIdCopy); break;
     fda:	a1 e3       	ldi	r26, 0x31	; 49
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e1 e3       	ldi	r30, 0x31	; 49
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	48 2f       	mov	r20, r24
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 2e       	mov	r0, r18
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <DIO_SetPinDirection+0x106>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	0a 94       	dec	r0
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <DIO_SetPinDirection+0x102>
     ffc:	84 2b       	or	r24, r20
     ffe:	8c 93       	st	X, r24
    1000:	77 c0       	rjmp	.+238    	; 0x10f0 <DIO_SetPinDirection+0x1fe>
			}
		}
		
		else if ( u8PinDirCopy == INPUT )
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	88 23       	and	r24, r24
    1006:	09 f0       	breq	.+2      	; 0x100a <DIO_SetPinDirection+0x118>
    1008:	73 c0       	rjmp	.+230    	; 0x10f0 <DIO_SetPinDirection+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	3d 83       	std	Y+5, r19	; 0x05
    1012:	2c 83       	std	Y+4, r18	; 0x04
    1014:	8c 81       	ldd	r24, Y+4	; 0x04
    1016:	9d 81       	ldd	r25, Y+5	; 0x05
    1018:	81 30       	cpi	r24, 0x01	; 1
    101a:	91 05       	cpc	r25, r1
    101c:	59 f1       	breq	.+86     	; 0x1074 <DIO_SetPinDirection+0x182>
    101e:	2c 81       	ldd	r18, Y+4	; 0x04
    1020:	3d 81       	ldd	r19, Y+5	; 0x05
    1022:	22 30       	cpi	r18, 0x02	; 2
    1024:	31 05       	cpc	r19, r1
    1026:	2c f4       	brge	.+10     	; 0x1032 <DIO_SetPinDirection+0x140>
    1028:	8c 81       	ldd	r24, Y+4	; 0x04
    102a:	9d 81       	ldd	r25, Y+5	; 0x05
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	69 f0       	breq	.+26     	; 0x104a <DIO_SetPinDirection+0x158>
    1030:	5f c0       	rjmp	.+190    	; 0x10f0 <DIO_SetPinDirection+0x1fe>
    1032:	2c 81       	ldd	r18, Y+4	; 0x04
    1034:	3d 81       	ldd	r19, Y+5	; 0x05
    1036:	22 30       	cpi	r18, 0x02	; 2
    1038:	31 05       	cpc	r19, r1
    103a:	89 f1       	breq	.+98     	; 0x109e <DIO_SetPinDirection+0x1ac>
    103c:	8c 81       	ldd	r24, Y+4	; 0x04
    103e:	9d 81       	ldd	r25, Y+5	; 0x05
    1040:	83 30       	cpi	r24, 0x03	; 3
    1042:	91 05       	cpc	r25, r1
    1044:	09 f4       	brne	.+2      	; 0x1048 <DIO_SetPinDirection+0x156>
    1046:	40 c0       	rjmp	.+128    	; 0x10c8 <DIO_SetPinDirection+0x1d6>
    1048:	53 c0       	rjmp	.+166    	; 0x10f0 <DIO_SetPinDirection+0x1fe>
			{
				case PORTA_DIO: CLR_BIT(DDRA_Register,u8PinIdCopy); break;
    104a:	aa e3       	ldi	r26, 0x3A	; 58
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	ea e3       	ldi	r30, 0x3A	; 58
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	48 2f       	mov	r20, r24
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	02 2e       	mov	r0, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <DIO_SetPinDirection+0x176>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	0a 94       	dec	r0
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <DIO_SetPinDirection+0x172>
    106c:	80 95       	com	r24
    106e:	84 23       	and	r24, r20
    1070:	8c 93       	st	X, r24
    1072:	3e c0       	rjmp	.+124    	; 0x10f0 <DIO_SetPinDirection+0x1fe>
				case PORTB_DIO: CLR_BIT(DDRB_Register,u8PinIdCopy); break;
    1074:	a7 e3       	ldi	r26, 0x37	; 55
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e7 e3       	ldi	r30, 0x37	; 55
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	48 2f       	mov	r20, r24
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	02 2e       	mov	r0, r18
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <DIO_SetPinDirection+0x1a0>
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	0a 94       	dec	r0
    1094:	e2 f7       	brpl	.-8      	; 0x108e <DIO_SetPinDirection+0x19c>
    1096:	80 95       	com	r24
    1098:	84 23       	and	r24, r20
    109a:	8c 93       	st	X, r24
    109c:	29 c0       	rjmp	.+82     	; 0x10f0 <DIO_SetPinDirection+0x1fe>
				case PORTC_DIO: CLR_BIT(DDRC_Register,u8PinIdCopy); break;
    109e:	a4 e3       	ldi	r26, 0x34	; 52
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e4 e3       	ldi	r30, 0x34	; 52
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	48 2f       	mov	r20, r24
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 2e       	mov	r0, r18
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <DIO_SetPinDirection+0x1ca>
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	0a 94       	dec	r0
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <DIO_SetPinDirection+0x1c6>
    10c0:	80 95       	com	r24
    10c2:	84 23       	and	r24, r20
    10c4:	8c 93       	st	X, r24
    10c6:	14 c0       	rjmp	.+40     	; 0x10f0 <DIO_SetPinDirection+0x1fe>
				case PORTD_DIO: CLR_BIT(DDRD_Register,u8PinIdCopy); break;
    10c8:	a1 e3       	ldi	r26, 0x31	; 49
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e1 e3       	ldi	r30, 0x31	; 49
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	48 2f       	mov	r20, r24
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	02 2e       	mov	r0, r18
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <DIO_SetPinDirection+0x1f4>
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	0a 94       	dec	r0
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <DIO_SetPinDirection+0x1f0>
    10ea:	80 95       	com	r24
    10ec:	84 23       	and	r24, r20
    10ee:	8c 93       	st	X, r24
	
	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
    10f0:	27 96       	adiw	r28, 0x07	; 7
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	f8 94       	cli
    10f6:	de bf       	out	0x3e, r29	; 62
    10f8:	0f be       	out	0x3f, r0	; 63
    10fa:	cd bf       	out	0x3d, r28	; 61
    10fc:	cf 91       	pop	r28
    10fe:	df 91       	pop	r29
    1100:	08 95       	ret

00001102 <DIO_SetPortDirection>:


/* IO Ports */
void DIO_SetPortDirection (u8 u8PortId, u8 u8PortDir)
{
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	00 d0       	rcall	.+0      	; 0x1108 <DIO_SetPortDirection+0x6>
    1108:	00 d0       	rcall	.+0      	; 0x110a <DIO_SetPortDirection+0x8>
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    110e:	89 83       	std	Y+1, r24	; 0x01
    1110:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (u8PortId)
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	3c 83       	std	Y+4, r19	; 0x04
    111a:	2b 83       	std	Y+3, r18	; 0x03
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	9c 81       	ldd	r25, Y+4	; 0x04
    1120:	81 30       	cpi	r24, 0x01	; 1
    1122:	91 05       	cpc	r25, r1
    1124:	d1 f0       	breq	.+52     	; 0x115a <DIO_SetPortDirection+0x58>
    1126:	2b 81       	ldd	r18, Y+3	; 0x03
    1128:	3c 81       	ldd	r19, Y+4	; 0x04
    112a:	22 30       	cpi	r18, 0x02	; 2
    112c:	31 05       	cpc	r19, r1
    112e:	2c f4       	brge	.+10     	; 0x113a <DIO_SetPortDirection+0x38>
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	9c 81       	ldd	r25, Y+4	; 0x04
    1134:	00 97       	sbiw	r24, 0x00	; 0
    1136:	61 f0       	breq	.+24     	; 0x1150 <DIO_SetPortDirection+0x4e>
    1138:	1e c0       	rjmp	.+60     	; 0x1176 <DIO_SetPortDirection+0x74>
    113a:	2b 81       	ldd	r18, Y+3	; 0x03
    113c:	3c 81       	ldd	r19, Y+4	; 0x04
    113e:	22 30       	cpi	r18, 0x02	; 2
    1140:	31 05       	cpc	r19, r1
    1142:	81 f0       	breq	.+32     	; 0x1164 <DIO_SetPortDirection+0x62>
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	9c 81       	ldd	r25, Y+4	; 0x04
    1148:	83 30       	cpi	r24, 0x03	; 3
    114a:	91 05       	cpc	r25, r1
    114c:	81 f0       	breq	.+32     	; 0x116e <DIO_SetPortDirection+0x6c>
    114e:	13 c0       	rjmp	.+38     	; 0x1176 <DIO_SetPortDirection+0x74>
	{
			case PORTA_DIO: DDRA_Register = u8PortDir; break;
    1150:	ea e3       	ldi	r30, 0x3A	; 58
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	80 83       	st	Z, r24
    1158:	0e c0       	rjmp	.+28     	; 0x1176 <DIO_SetPortDirection+0x74>
			case PORTB_DIO: DDRB_Register = u8PortDir; break;
    115a:	e7 e3       	ldi	r30, 0x37	; 55
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	80 83       	st	Z, r24
    1162:	09 c0       	rjmp	.+18     	; 0x1176 <DIO_SetPortDirection+0x74>
			case PORTC_DIO: DDRC_Register = u8PortDir; break;
    1164:	e4 e3       	ldi	r30, 0x34	; 52
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	80 83       	st	Z, r24
    116c:	04 c0       	rjmp	.+8      	; 0x1176 <DIO_SetPortDirection+0x74>
			case PORTD_DIO: DDRD_Register = u8PortDir; break;
    116e:	e1 e3       	ldi	r30, 0x31	; 49
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	80 83       	st	Z, r24
		default: /* Wrong Port ID */       break;
	}
}
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	0f 90       	pop	r0
    117e:	cf 91       	pop	r28
    1180:	df 91       	pop	r29
    1182:	08 95       	ret

00001184 <DIO_SetPortValue>:

void DIO_SetPortValue (u8 u8PortId, u8 u8PortVal)
{
    1184:	df 93       	push	r29
    1186:	cf 93       	push	r28
    1188:	00 d0       	rcall	.+0      	; 0x118a <DIO_SetPortValue+0x6>
    118a:	00 d0       	rcall	.+0      	; 0x118c <DIO_SetPortValue+0x8>
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
    1190:	89 83       	std	Y+1, r24	; 0x01
    1192:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (u8PortId)
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	3c 83       	std	Y+4, r19	; 0x04
    119c:	2b 83       	std	Y+3, r18	; 0x03
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	9c 81       	ldd	r25, Y+4	; 0x04
    11a2:	81 30       	cpi	r24, 0x01	; 1
    11a4:	91 05       	cpc	r25, r1
    11a6:	d1 f0       	breq	.+52     	; 0x11dc <DIO_SetPortValue+0x58>
    11a8:	2b 81       	ldd	r18, Y+3	; 0x03
    11aa:	3c 81       	ldd	r19, Y+4	; 0x04
    11ac:	22 30       	cpi	r18, 0x02	; 2
    11ae:	31 05       	cpc	r19, r1
    11b0:	2c f4       	brge	.+10     	; 0x11bc <DIO_SetPortValue+0x38>
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	9c 81       	ldd	r25, Y+4	; 0x04
    11b6:	00 97       	sbiw	r24, 0x00	; 0
    11b8:	61 f0       	breq	.+24     	; 0x11d2 <DIO_SetPortValue+0x4e>
    11ba:	1e c0       	rjmp	.+60     	; 0x11f8 <DIO_SetPortValue+0x74>
    11bc:	2b 81       	ldd	r18, Y+3	; 0x03
    11be:	3c 81       	ldd	r19, Y+4	; 0x04
    11c0:	22 30       	cpi	r18, 0x02	; 2
    11c2:	31 05       	cpc	r19, r1
    11c4:	81 f0       	breq	.+32     	; 0x11e6 <DIO_SetPortValue+0x62>
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ca:	83 30       	cpi	r24, 0x03	; 3
    11cc:	91 05       	cpc	r25, r1
    11ce:	81 f0       	breq	.+32     	; 0x11f0 <DIO_SetPortValue+0x6c>
    11d0:	13 c0       	rjmp	.+38     	; 0x11f8 <DIO_SetPortValue+0x74>
	{
			case PORTA_DIO: PORTA_Register = u8PortVal; break;
    11d2:	eb e3       	ldi	r30, 0x3B	; 59
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	80 83       	st	Z, r24
    11da:	0e c0       	rjmp	.+28     	; 0x11f8 <DIO_SetPortValue+0x74>
			case PORTB_DIO: PORTB_Register = u8PortVal; break;
    11dc:	e8 e3       	ldi	r30, 0x38	; 56
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	80 83       	st	Z, r24
    11e4:	09 c0       	rjmp	.+18     	; 0x11f8 <DIO_SetPortValue+0x74>
			case PORTC_DIO: PORTC_Register = u8PortVal; break;
    11e6:	e5 e3       	ldi	r30, 0x35	; 53
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	80 83       	st	Z, r24
    11ee:	04 c0       	rjmp	.+8      	; 0x11f8 <DIO_SetPortValue+0x74>
			case PORTD_DIO: PORTD_Register = u8PortVal; break;
    11f0:	e2 e3       	ldi	r30, 0x32	; 50
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	80 83       	st	Z, r24
		default: /* Wrong Port ID */        break;
	}
}
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <EXT_INT_Initialize>:
#include "Timer1_int.h"

/**************************************************/


void EXT_INT_Initialize(void) {
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62

	// falling edge generates an interrupt request
	MCUCR_REG = 2 ;
    120e:	e5 e5       	ldi	r30, 0x55	; 85
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	82 e0       	ldi	r24, 0x02	; 2
    1214:	80 83       	st	Z, r24

	// INT0 Enable
	SET_BIT(GICR_REG,6) ;
    1216:	ab e5       	ldi	r26, 0x5B	; 91
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	eb e5       	ldi	r30, 0x5B	; 91
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	80 64       	ori	r24, 0x40	; 64
    1222:	8c 93       	st	X, r24

	// Global Interrupt Enable
	SET_BIT(SREG_REG,7) ;
    1224:	af e5       	ldi	r26, 0x5F	; 95
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	ef e5       	ldi	r30, 0x5F	; 95
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	80 68       	ori	r24, 0x80	; 128
    1230:	8c 93       	st	X, r24

}
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	08 95       	ret

00001238 <__vector_1>:
static u16 u16_TOff ;
static u8 u8_Flag = 0 ;

/**************************************************/

ISR(INT0_vect){
    1238:	1f 92       	push	r1
    123a:	0f 92       	push	r0
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	0f 92       	push	r0
    1240:	11 24       	eor	r1, r1
    1242:	2f 93       	push	r18
    1244:	3f 93       	push	r19
    1246:	4f 93       	push	r20
    1248:	5f 93       	push	r21
    124a:	6f 93       	push	r22
    124c:	7f 93       	push	r23
    124e:	8f 93       	push	r24
    1250:	9f 93       	push	r25
    1252:	af 93       	push	r26
    1254:	bf 93       	push	r27
    1256:	ef 93       	push	r30
    1258:	ff 93       	push	r31
    125a:	df 93       	push	r29
    125c:	cf 93       	push	r28
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62

	//u16_Time = TCNT1_REG ;

	u16_Time = u16Tim_GetCounterVal() ;
    1262:	0e 94 56 10 	call	0x20ac	; 0x20ac <u16Tim_GetCounterVal>
    1266:	90 93 80 00 	sts	0x0080, r25
    126a:	80 93 7f 00 	sts	0x007F, r24
	TCNT1_REG = 0 ;
    126e:	ec e4       	ldi	r30, 0x4C	; 76
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	11 82       	std	Z+1, r1	; 0x01
    1274:	10 82       	st	Z, r1

	if(u8_Flag==0){
    1276:	80 91 7e 00 	lds	r24, 0x007E
    127a:	88 23       	and	r24, r24
    127c:	81 f4       	brne	.+32     	; 0x129e <__vector_1+0x66>

		u16_TOn = u16_Time ;
    127e:	80 91 7f 00 	lds	r24, 0x007F
    1282:	90 91 80 00 	lds	r25, 0x0080
    1286:	90 93 82 00 	sts	0x0082, r25
    128a:	80 93 81 00 	sts	0x0081, r24
		MCUCR_REG = 3 ;
    128e:	e5 e5       	ldi	r30, 0x55	; 85
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	83 e0       	ldi	r24, 0x03	; 3
    1294:	80 83       	st	Z, r24
		u8_Flag = 1 ;
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	80 93 7e 00 	sts	0x007E, r24
    129c:	12 c0       	rjmp	.+36     	; 0x12c2 <__vector_1+0x8a>

	}
	else if (u8_Flag==1){
    129e:	80 91 7e 00 	lds	r24, 0x007E
    12a2:	81 30       	cpi	r24, 0x01	; 1
    12a4:	71 f4       	brne	.+28     	; 0x12c2 <__vector_1+0x8a>

		u16_TOff = u16_Time ;
    12a6:	80 91 7f 00 	lds	r24, 0x007F
    12aa:	90 91 80 00 	lds	r25, 0x0080
    12ae:	90 93 84 00 	sts	0x0084, r25
    12b2:	80 93 83 00 	sts	0x0083, r24
		MCUCR_REG = 2 ;
    12b6:	e5 e5       	ldi	r30, 0x55	; 85
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	82 e0       	ldi	r24, 0x02	; 2
    12bc:	80 83       	st	Z, r24
		u8_Flag = 0 ;
    12be:	10 92 7e 00 	sts	0x007E, r1
	}
	else{

	}

}
    12c2:	cf 91       	pop	r28
    12c4:	df 91       	pop	r29
    12c6:	ff 91       	pop	r31
    12c8:	ef 91       	pop	r30
    12ca:	bf 91       	pop	r27
    12cc:	af 91       	pop	r26
    12ce:	9f 91       	pop	r25
    12d0:	8f 91       	pop	r24
    12d2:	7f 91       	pop	r23
    12d4:	6f 91       	pop	r22
    12d6:	5f 91       	pop	r21
    12d8:	4f 91       	pop	r20
    12da:	3f 91       	pop	r19
    12dc:	2f 91       	pop	r18
    12de:	0f 90       	pop	r0
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	0f 90       	pop	r0
    12e4:	1f 90       	pop	r1
    12e6:	18 95       	reti

000012e8 <vid_EXTINT_GetIcu>:

/**************************************************/

void vid_EXTINT_GetIcu(u16 * u16_F , u16 * u16_D){
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	00 d0       	rcall	.+0      	; 0x12ee <vid_EXTINT_GetIcu+0x6>
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <vid_EXTINT_GetIcu+0x8>
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
    12f4:	9a 83       	std	Y+2, r25	; 0x02
    12f6:	89 83       	std	Y+1, r24	; 0x01
    12f8:	7c 83       	std	Y+4, r23	; 0x04
    12fa:	6b 83       	std	Y+3, r22	; 0x03

	if ( (u16_TOn+u16_TOff) > 0 )
    12fc:	80 91 81 00 	lds	r24, 0x0081
    1300:	90 91 82 00 	lds	r25, 0x0082
    1304:	20 91 83 00 	lds	r18, 0x0083
    1308:	30 91 84 00 	lds	r19, 0x0084
    130c:	82 0f       	add	r24, r18
    130e:	93 1f       	adc	r25, r19
    1310:	00 97       	sbiw	r24, 0x00	; 0
    1312:	09 f4       	brne	.+2      	; 0x1316 <vid_EXTINT_GetIcu+0x2e>
    1314:	49 c0       	rjmp	.+146    	; 0x13a8 <vid_EXTINT_GetIcu+0xc0>
	{
		* u16_D = (u16_TOn * (u16)100) / (u16_TOn+u16_TOff) ;
    1316:	20 91 81 00 	lds	r18, 0x0081
    131a:	30 91 82 00 	lds	r19, 0x0082
    131e:	84 e6       	ldi	r24, 0x64	; 100
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	28 9f       	mul	r18, r24
    1324:	a0 01       	movw	r20, r0
    1326:	29 9f       	mul	r18, r25
    1328:	50 0d       	add	r21, r0
    132a:	38 9f       	mul	r19, r24
    132c:	50 0d       	add	r21, r0
    132e:	11 24       	eor	r1, r1
    1330:	20 91 81 00 	lds	r18, 0x0081
    1334:	30 91 82 00 	lds	r19, 0x0082
    1338:	80 91 83 00 	lds	r24, 0x0083
    133c:	90 91 84 00 	lds	r25, 0x0084
    1340:	28 0f       	add	r18, r24
    1342:	39 1f       	adc	r19, r25
    1344:	ca 01       	movw	r24, r20
    1346:	b9 01       	movw	r22, r18
    1348:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__udivmodhi4>
    134c:	cb 01       	movw	r24, r22
    134e:	eb 81       	ldd	r30, Y+3	; 0x03
    1350:	fc 81       	ldd	r31, Y+4	; 0x04
    1352:	91 83       	std	Z+1, r25	; 0x01
    1354:	80 83       	st	Z, r24
		* u16_F = (u16)( (u32)1000000 /( (u32)(u16_TOn+u16_TOff)*(u8)8) ) ;
    1356:	20 91 81 00 	lds	r18, 0x0081
    135a:	30 91 82 00 	lds	r19, 0x0082
    135e:	80 91 83 00 	lds	r24, 0x0083
    1362:	90 91 84 00 	lds	r25, 0x0084
    1366:	82 0f       	add	r24, r18
    1368:	93 1f       	adc	r25, r19
    136a:	cc 01       	movw	r24, r24
    136c:	a0 e0       	ldi	r26, 0x00	; 0
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	88 0f       	add	r24, r24
    1372:	99 1f       	adc	r25, r25
    1374:	aa 1f       	adc	r26, r26
    1376:	bb 1f       	adc	r27, r27
    1378:	88 0f       	add	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	aa 1f       	adc	r26, r26
    137e:	bb 1f       	adc	r27, r27
    1380:	88 0f       	add	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	aa 1f       	adc	r26, r26
    1386:	bb 1f       	adc	r27, r27
    1388:	9c 01       	movw	r18, r24
    138a:	ad 01       	movw	r20, r26
    138c:	80 e4       	ldi	r24, 0x40	; 64
    138e:	92 e4       	ldi	r25, 0x42	; 66
    1390:	af e0       	ldi	r26, 0x0F	; 15
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	bc 01       	movw	r22, r24
    1396:	cd 01       	movw	r24, r26
    1398:	0e 94 91 11 	call	0x2322	; 0x2322 <__udivmodsi4>
    139c:	da 01       	movw	r26, r20
    139e:	c9 01       	movw	r24, r18
    13a0:	e9 81       	ldd	r30, Y+1	; 0x01
    13a2:	fa 81       	ldd	r31, Y+2	; 0x02
    13a4:	91 83       	std	Z+1, r25	; 0x01
    13a6:	80 83       	st	Z, r24
	}
	else{

	}

}
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	08 95       	ret

000013b6 <LCD_vidWriteCommand>:
#include "LCD_int.h"
#include "LCD_Config.h"


/****************************************************************/
void LCD_vidWriteCommand (u8 u8CmdCpy) {
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	2f 97       	sbiw	r28, 0x0f	; 15
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	f8 94       	cli
    13c4:	de bf       	out	0x3e, r29	; 62
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	cd bf       	out	0x3d, r28	; 61
    13ca:	8f 87       	std	Y+15, r24	; 0x0f
	  // Set RS = 0
	  DIO_SetPinValue(Ctrl_PORT , RS, LOW);
    13cc:	83 e0       	ldi	r24, 0x03	; 3
    13ce:	65 e0       	ldi	r22, 0x05	; 5
    13d0:	40 e0       	ldi	r20, 0x00	; 0
    13d2:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_SetPinValue>

	  // Set R/W = 0
	  DIO_SetPinValue(Ctrl_PORT , RW, LOW);
    13d6:	83 e0       	ldi	r24, 0x03	; 3
    13d8:	66 e0       	ldi	r22, 0x06	; 6
    13da:	40 e0       	ldi	r20, 0x00	; 0
    13dc:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_SetPinValue>

	  // Set EN = 0
	  DIO_SetPinValue(Ctrl_PORT , E, HIGH);
    13e0:	83 e0       	ldi	r24, 0x03	; 3
    13e2:	67 e0       	ldi	r22, 0x07	; 7
    13e4:	41 e0       	ldi	r20, 0x01	; 1
    13e6:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_SetPinValue>

	  DIO_SetPortValue (Buff_PORT,u8CmdCpy);
    13ea:	82 e0       	ldi	r24, 0x02	; 2
    13ec:	6f 85       	ldd	r22, Y+15	; 0x0f
    13ee:	0e 94 c2 08 	call	0x1184	; 0x1184 <DIO_SetPortValue>

	  // set EN to 1 after settting command
	  // pulse
	  DIO_SetPinValue(Ctrl_PORT , E, LOW);
    13f2:	83 e0       	ldi	r24, 0x03	; 3
    13f4:	67 e0       	ldi	r22, 0x07	; 7
    13f6:	40 e0       	ldi	r20, 0x00	; 0
    13f8:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_SetPinValue>
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	a0 e2       	ldi	r26, 0x20	; 32
    1402:	b1 e4       	ldi	r27, 0x41	; 65
    1404:	8b 87       	std	Y+11, r24	; 0x0b
    1406:	9c 87       	std	Y+12, r25	; 0x0c
    1408:	ad 87       	std	Y+13, r26	; 0x0d
    140a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    140c:	6b 85       	ldd	r22, Y+11	; 0x0b
    140e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1410:	8d 85       	ldd	r24, Y+13	; 0x0d
    1412:	9e 85       	ldd	r25, Y+14	; 0x0e
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	30 e8       	ldi	r19, 0x80	; 128
    1418:	4b e3       	ldi	r20, 0x3B	; 59
    141a:	55 e4       	ldi	r21, 0x45	; 69
    141c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1420:	dc 01       	movw	r26, r24
    1422:	cb 01       	movw	r24, r22
    1424:	8f 83       	std	Y+7, r24	; 0x07
    1426:	98 87       	std	Y+8, r25	; 0x08
    1428:	a9 87       	std	Y+9, r26	; 0x09
    142a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    142c:	6f 81       	ldd	r22, Y+7	; 0x07
    142e:	78 85       	ldd	r23, Y+8	; 0x08
    1430:	89 85       	ldd	r24, Y+9	; 0x09
    1432:	9a 85       	ldd	r25, Y+10	; 0x0a
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	40 e8       	ldi	r20, 0x80	; 128
    143a:	5f e3       	ldi	r21, 0x3F	; 63
    143c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1440:	88 23       	and	r24, r24
    1442:	2c f4       	brge	.+10     	; 0x144e <LCD_vidWriteCommand+0x98>
		__ticks = 1;
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	9e 83       	std	Y+6, r25	; 0x06
    144a:	8d 83       	std	Y+5, r24	; 0x05
    144c:	3f c0       	rjmp	.+126    	; 0x14cc <LCD_vidWriteCommand+0x116>
	else if (__tmp > 65535)
    144e:	6f 81       	ldd	r22, Y+7	; 0x07
    1450:	78 85       	ldd	r23, Y+8	; 0x08
    1452:	89 85       	ldd	r24, Y+9	; 0x09
    1454:	9a 85       	ldd	r25, Y+10	; 0x0a
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	3f ef       	ldi	r19, 0xFF	; 255
    145a:	4f e7       	ldi	r20, 0x7F	; 127
    145c:	57 e4       	ldi	r21, 0x47	; 71
    145e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1462:	18 16       	cp	r1, r24
    1464:	4c f5       	brge	.+82     	; 0x14b8 <LCD_vidWriteCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1466:	6b 85       	ldd	r22, Y+11	; 0x0b
    1468:	7c 85       	ldd	r23, Y+12	; 0x0c
    146a:	8d 85       	ldd	r24, Y+13	; 0x0d
    146c:	9e 85       	ldd	r25, Y+14	; 0x0e
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	40 e2       	ldi	r20, 0x20	; 32
    1474:	51 e4       	ldi	r21, 0x41	; 65
    1476:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    147a:	dc 01       	movw	r26, r24
    147c:	cb 01       	movw	r24, r22
    147e:	bc 01       	movw	r22, r24
    1480:	cd 01       	movw	r24, r26
    1482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	9e 83       	std	Y+6, r25	; 0x06
    148c:	8d 83       	std	Y+5, r24	; 0x05
    148e:	0f c0       	rjmp	.+30     	; 0x14ae <LCD_vidWriteCommand+0xf8>
    1490:	8c e2       	ldi	r24, 0x2C	; 44
    1492:	91 e0       	ldi	r25, 0x01	; 1
    1494:	9c 83       	std	Y+4, r25	; 0x04
    1496:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	9c 81       	ldd	r25, Y+4	; 0x04
    149c:	01 97       	sbiw	r24, 0x01	; 1
    149e:	f1 f7       	brne	.-4      	; 0x149c <LCD_vidWriteCommand+0xe6>
    14a0:	9c 83       	std	Y+4, r25	; 0x04
    14a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a4:	8d 81       	ldd	r24, Y+5	; 0x05
    14a6:	9e 81       	ldd	r25, Y+6	; 0x06
    14a8:	01 97       	sbiw	r24, 0x01	; 1
    14aa:	9e 83       	std	Y+6, r25	; 0x06
    14ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ae:	8d 81       	ldd	r24, Y+5	; 0x05
    14b0:	9e 81       	ldd	r25, Y+6	; 0x06
    14b2:	00 97       	sbiw	r24, 0x00	; 0
    14b4:	69 f7       	brne	.-38     	; 0x1490 <LCD_vidWriteCommand+0xda>
    14b6:	14 c0       	rjmp	.+40     	; 0x14e0 <LCD_vidWriteCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14b8:	6f 81       	ldd	r22, Y+7	; 0x07
    14ba:	78 85       	ldd	r23, Y+8	; 0x08
    14bc:	89 85       	ldd	r24, Y+9	; 0x09
    14be:	9a 85       	ldd	r25, Y+10	; 0x0a
    14c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c4:	dc 01       	movw	r26, r24
    14c6:	cb 01       	movw	r24, r22
    14c8:	9e 83       	std	Y+6, r25	; 0x06
    14ca:	8d 83       	std	Y+5, r24	; 0x05
    14cc:	8d 81       	ldd	r24, Y+5	; 0x05
    14ce:	9e 81       	ldd	r25, Y+6	; 0x06
    14d0:	9a 83       	std	Y+2, r25	; 0x02
    14d2:	89 83       	std	Y+1, r24	; 0x01
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	9a 81       	ldd	r25, Y+2	; 0x02
    14d8:	01 97       	sbiw	r24, 0x01	; 1
    14da:	f1 f7       	brne	.-4      	; 0x14d8 <LCD_vidWriteCommand+0x122>
    14dc:	9a 83       	std	Y+2, r25	; 0x02
    14de:	89 83       	std	Y+1, r24	; 0x01
	  _delay_ms(10);
	  DIO_SetPinValue(Ctrl_PORT , E, HIGH);
    14e0:	83 e0       	ldi	r24, 0x03	; 3
    14e2:	67 e0       	ldi	r22, 0x07	; 7
    14e4:	41 e0       	ldi	r20, 0x01	; 1
    14e6:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_SetPinValue>

  }
    14ea:	2f 96       	adiw	r28, 0x0f	; 15
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	f8 94       	cli
    14f0:	de bf       	out	0x3e, r29	; 62
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	cd bf       	out	0x3d, r28	; 61
    14f6:	cf 91       	pop	r28
    14f8:	df 91       	pop	r29
    14fa:	08 95       	ret

000014fc <LCD_vidInitialize>:


/****************************************************************/


void LCD_vidInitialize(void){
    14fc:	0f 93       	push	r16
    14fe:	1f 93       	push	r17
    1500:	df 93       	push	r29
    1502:	cf 93       	push	r28
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	c6 54       	subi	r28, 0x46	; 70
    150a:	d0 40       	sbci	r29, 0x00	; 0
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	f8 94       	cli
    1510:	de bf       	out	0x3e, r29	; 62
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	cd bf       	out	0x3d, r28	; 61


	/****************  LCD Configuration  *****************/

			  // SET VDD TO D0   5 Volt (D0 >> VDD)
			  DIO_SetPinDirection (Ctrl_PORT, VDD , HIGH);
    1516:	83 e0       	ldi	r24, 0x03	; 3
    1518:	64 e0       	ldi	r22, 0x04	; 4
    151a:	41 e0       	ldi	r20, 0x01	; 1
    151c:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_SetPinDirection>

			  //  RS >> D1
			  DIO_SetPinDirection (Ctrl_PORT, RS, HIGH);
    1520:	83 e0       	ldi	r24, 0x03	; 3
    1522:	65 e0       	ldi	r22, 0x05	; 5
    1524:	41 e0       	ldi	r20, 0x01	; 1
    1526:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_SetPinDirection>

			  //  R/W >> D2
			  DIO_SetPinDirection (Ctrl_PORT, RW, HIGH);
    152a:	83 e0       	ldi	r24, 0x03	; 3
    152c:	66 e0       	ldi	r22, 0x06	; 6
    152e:	41 e0       	ldi	r20, 0x01	; 1
    1530:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_SetPinDirection>

			  //  Enable >> D3
			   DIO_SetPinDirection (Ctrl_PORT, E, HIGH);
    1534:	83 e0       	ldi	r24, 0x03	; 3
    1536:	67 e0       	ldi	r22, 0x07	; 7
    1538:	41 e0       	ldi	r20, 0x01	; 1
    153a:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_SetPinDirection>


			  //SET PORTC AS OUTPUT (PORTC >> DB0...DB7)
			  DIO_SetPortDirection (Buff_PORT, 0XFF);
    153e:	82 e0       	ldi	r24, 0x02	; 2
    1540:	6f ef       	ldi	r22, 0xFF	; 255
    1542:	0e 94 81 08 	call	0x1102	; 0x1102 <DIO_SetPortDirection>


	  /***************************************************************/

	 // set VDD @ A0 to 5 volt
	  DIO_SetPinValue(Ctrl_PORT , VDD, HIGH);
    1546:	83 e0       	ldi	r24, 0x03	; 3
    1548:	64 e0       	ldi	r22, 0x04	; 4
    154a:	41 e0       	ldi	r20, 0x01	; 1
    154c:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_SetPinValue>
    1550:	fe 01       	movw	r30, r28
    1552:	ed 5b       	subi	r30, 0xBD	; 189
    1554:	ff 4f       	sbci	r31, 0xFF	; 255
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	a8 e4       	ldi	r26, 0x48	; 72
    155c:	b2 e4       	ldi	r27, 0x42	; 66
    155e:	80 83       	st	Z, r24
    1560:	91 83       	std	Z+1, r25	; 0x01
    1562:	a2 83       	std	Z+2, r26	; 0x02
    1564:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1566:	8e 01       	movw	r16, r28
    1568:	01 5c       	subi	r16, 0xC1	; 193
    156a:	1f 4f       	sbci	r17, 0xFF	; 255
    156c:	fe 01       	movw	r30, r28
    156e:	ed 5b       	subi	r30, 0xBD	; 189
    1570:	ff 4f       	sbci	r31, 0xFF	; 255
    1572:	60 81       	ld	r22, Z
    1574:	71 81       	ldd	r23, Z+1	; 0x01
    1576:	82 81       	ldd	r24, Z+2	; 0x02
    1578:	93 81       	ldd	r25, Z+3	; 0x03
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	30 e8       	ldi	r19, 0x80	; 128
    157e:	4b e3       	ldi	r20, 0x3B	; 59
    1580:	55 e4       	ldi	r21, 0x45	; 69
    1582:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	f8 01       	movw	r30, r16
    158c:	80 83       	st	Z, r24
    158e:	91 83       	std	Z+1, r25	; 0x01
    1590:	a2 83       	std	Z+2, r26	; 0x02
    1592:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1594:	fe 01       	movw	r30, r28
    1596:	ff 96       	adiw	r30, 0x3f	; 63
    1598:	60 81       	ld	r22, Z
    159a:	71 81       	ldd	r23, Z+1	; 0x01
    159c:	82 81       	ldd	r24, Z+2	; 0x02
    159e:	93 81       	ldd	r25, Z+3	; 0x03
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	40 e8       	ldi	r20, 0x80	; 128
    15a6:	5f e3       	ldi	r21, 0x3F	; 63
    15a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15ac:	88 23       	and	r24, r24
    15ae:	2c f4       	brge	.+10     	; 0x15ba <LCD_vidInitialize+0xbe>
		__ticks = 1;
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	9e af       	std	Y+62, r25	; 0x3e
    15b6:	8d af       	std	Y+61, r24	; 0x3d
    15b8:	46 c0       	rjmp	.+140    	; 0x1646 <LCD_vidInitialize+0x14a>
	else if (__tmp > 65535)
    15ba:	fe 01       	movw	r30, r28
    15bc:	ff 96       	adiw	r30, 0x3f	; 63
    15be:	60 81       	ld	r22, Z
    15c0:	71 81       	ldd	r23, Z+1	; 0x01
    15c2:	82 81       	ldd	r24, Z+2	; 0x02
    15c4:	93 81       	ldd	r25, Z+3	; 0x03
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	3f ef       	ldi	r19, 0xFF	; 255
    15ca:	4f e7       	ldi	r20, 0x7F	; 127
    15cc:	57 e4       	ldi	r21, 0x47	; 71
    15ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15d2:	18 16       	cp	r1, r24
    15d4:	64 f5       	brge	.+88     	; 0x162e <LCD_vidInitialize+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d6:	fe 01       	movw	r30, r28
    15d8:	ed 5b       	subi	r30, 0xBD	; 189
    15da:	ff 4f       	sbci	r31, 0xFF	; 255
    15dc:	60 81       	ld	r22, Z
    15de:	71 81       	ldd	r23, Z+1	; 0x01
    15e0:	82 81       	ldd	r24, Z+2	; 0x02
    15e2:	93 81       	ldd	r25, Z+3	; 0x03
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	40 e2       	ldi	r20, 0x20	; 32
    15ea:	51 e4       	ldi	r21, 0x41	; 65
    15ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f0:	dc 01       	movw	r26, r24
    15f2:	cb 01       	movw	r24, r22
    15f4:	bc 01       	movw	r22, r24
    15f6:	cd 01       	movw	r24, r26
    15f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15fc:	dc 01       	movw	r26, r24
    15fe:	cb 01       	movw	r24, r22
    1600:	9e af       	std	Y+62, r25	; 0x3e
    1602:	8d af       	std	Y+61, r24	; 0x3d
    1604:	0f c0       	rjmp	.+30     	; 0x1624 <LCD_vidInitialize+0x128>
    1606:	8c e2       	ldi	r24, 0x2C	; 44
    1608:	91 e0       	ldi	r25, 0x01	; 1
    160a:	9c af       	std	Y+60, r25	; 0x3c
    160c:	8b af       	std	Y+59, r24	; 0x3b
    160e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1610:	9c ad       	ldd	r25, Y+60	; 0x3c
    1612:	01 97       	sbiw	r24, 0x01	; 1
    1614:	f1 f7       	brne	.-4      	; 0x1612 <LCD_vidInitialize+0x116>
    1616:	9c af       	std	Y+60, r25	; 0x3c
    1618:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    161a:	8d ad       	ldd	r24, Y+61	; 0x3d
    161c:	9e ad       	ldd	r25, Y+62	; 0x3e
    161e:	01 97       	sbiw	r24, 0x01	; 1
    1620:	9e af       	std	Y+62, r25	; 0x3e
    1622:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1624:	8d ad       	ldd	r24, Y+61	; 0x3d
    1626:	9e ad       	ldd	r25, Y+62	; 0x3e
    1628:	00 97       	sbiw	r24, 0x00	; 0
    162a:	69 f7       	brne	.-38     	; 0x1606 <LCD_vidInitialize+0x10a>
    162c:	16 c0       	rjmp	.+44     	; 0x165a <LCD_vidInitialize+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    162e:	fe 01       	movw	r30, r28
    1630:	ff 96       	adiw	r30, 0x3f	; 63
    1632:	60 81       	ld	r22, Z
    1634:	71 81       	ldd	r23, Z+1	; 0x01
    1636:	82 81       	ldd	r24, Z+2	; 0x02
    1638:	93 81       	ldd	r25, Z+3	; 0x03
    163a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    163e:	dc 01       	movw	r26, r24
    1640:	cb 01       	movw	r24, r22
    1642:	9e af       	std	Y+62, r25	; 0x3e
    1644:	8d af       	std	Y+61, r24	; 0x3d
    1646:	8d ad       	ldd	r24, Y+61	; 0x3d
    1648:	9e ad       	ldd	r25, Y+62	; 0x3e
    164a:	9a af       	std	Y+58, r25	; 0x3a
    164c:	89 af       	std	Y+57, r24	; 0x39
    164e:	89 ad       	ldd	r24, Y+57	; 0x39
    1650:	9a ad       	ldd	r25, Y+58	; 0x3a
    1652:	01 97       	sbiw	r24, 0x01	; 1
    1654:	f1 f7       	brne	.-4      	; 0x1652 <LCD_vidInitialize+0x156>
    1656:	9a af       	std	Y+58, r25	; 0x3a
    1658:	89 af       	std	Y+57, r24	; 0x39
	  _delay_ms(50);



	 // FUNCTION SET
	  LCD_vidWriteCommand (0b00111000);//0X38  // N=0 1 line 0b00110000
    165a:	88 e3       	ldi	r24, 0x38	; 56
    165c:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vidWriteCommand>
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	a0 e2       	ldi	r26, 0x20	; 32
    1666:	b1 e4       	ldi	r27, 0x41	; 65
    1668:	8d ab       	std	Y+53, r24	; 0x35
    166a:	9e ab       	std	Y+54, r25	; 0x36
    166c:	af ab       	std	Y+55, r26	; 0x37
    166e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1670:	6d a9       	ldd	r22, Y+53	; 0x35
    1672:	7e a9       	ldd	r23, Y+54	; 0x36
    1674:	8f a9       	ldd	r24, Y+55	; 0x37
    1676:	98 ad       	ldd	r25, Y+56	; 0x38
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	30 e8       	ldi	r19, 0x80	; 128
    167c:	4b e3       	ldi	r20, 0x3B	; 59
    167e:	55 e4       	ldi	r21, 0x45	; 69
    1680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1684:	dc 01       	movw	r26, r24
    1686:	cb 01       	movw	r24, r22
    1688:	89 ab       	std	Y+49, r24	; 0x31
    168a:	9a ab       	std	Y+50, r25	; 0x32
    168c:	ab ab       	std	Y+51, r26	; 0x33
    168e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1690:	69 a9       	ldd	r22, Y+49	; 0x31
    1692:	7a a9       	ldd	r23, Y+50	; 0x32
    1694:	8b a9       	ldd	r24, Y+51	; 0x33
    1696:	9c a9       	ldd	r25, Y+52	; 0x34
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	40 e8       	ldi	r20, 0x80	; 128
    169e:	5f e3       	ldi	r21, 0x3F	; 63
    16a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16a4:	88 23       	and	r24, r24
    16a6:	2c f4       	brge	.+10     	; 0x16b2 <LCD_vidInitialize+0x1b6>
		__ticks = 1;
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	98 ab       	std	Y+48, r25	; 0x30
    16ae:	8f a7       	std	Y+47, r24	; 0x2f
    16b0:	3f c0       	rjmp	.+126    	; 0x1730 <LCD_vidInitialize+0x234>
	else if (__tmp > 65535)
    16b2:	69 a9       	ldd	r22, Y+49	; 0x31
    16b4:	7a a9       	ldd	r23, Y+50	; 0x32
    16b6:	8b a9       	ldd	r24, Y+51	; 0x33
    16b8:	9c a9       	ldd	r25, Y+52	; 0x34
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	3f ef       	ldi	r19, 0xFF	; 255
    16be:	4f e7       	ldi	r20, 0x7F	; 127
    16c0:	57 e4       	ldi	r21, 0x47	; 71
    16c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16c6:	18 16       	cp	r1, r24
    16c8:	4c f5       	brge	.+82     	; 0x171c <LCD_vidInitialize+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ca:	6d a9       	ldd	r22, Y+53	; 0x35
    16cc:	7e a9       	ldd	r23, Y+54	; 0x36
    16ce:	8f a9       	ldd	r24, Y+55	; 0x37
    16d0:	98 ad       	ldd	r25, Y+56	; 0x38
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	40 e2       	ldi	r20, 0x20	; 32
    16d8:	51 e4       	ldi	r21, 0x41	; 65
    16da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16de:	dc 01       	movw	r26, r24
    16e0:	cb 01       	movw	r24, r22
    16e2:	bc 01       	movw	r22, r24
    16e4:	cd 01       	movw	r24, r26
    16e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22
    16ee:	98 ab       	std	Y+48, r25	; 0x30
    16f0:	8f a7       	std	Y+47, r24	; 0x2f
    16f2:	0f c0       	rjmp	.+30     	; 0x1712 <LCD_vidInitialize+0x216>
    16f4:	8c e2       	ldi	r24, 0x2C	; 44
    16f6:	91 e0       	ldi	r25, 0x01	; 1
    16f8:	9e a7       	std	Y+46, r25	; 0x2e
    16fa:	8d a7       	std	Y+45, r24	; 0x2d
    16fc:	8d a5       	ldd	r24, Y+45	; 0x2d
    16fe:	9e a5       	ldd	r25, Y+46	; 0x2e
    1700:	01 97       	sbiw	r24, 0x01	; 1
    1702:	f1 f7       	brne	.-4      	; 0x1700 <LCD_vidInitialize+0x204>
    1704:	9e a7       	std	Y+46, r25	; 0x2e
    1706:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1708:	8f a5       	ldd	r24, Y+47	; 0x2f
    170a:	98 a9       	ldd	r25, Y+48	; 0x30
    170c:	01 97       	sbiw	r24, 0x01	; 1
    170e:	98 ab       	std	Y+48, r25	; 0x30
    1710:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1712:	8f a5       	ldd	r24, Y+47	; 0x2f
    1714:	98 a9       	ldd	r25, Y+48	; 0x30
    1716:	00 97       	sbiw	r24, 0x00	; 0
    1718:	69 f7       	brne	.-38     	; 0x16f4 <LCD_vidInitialize+0x1f8>
    171a:	14 c0       	rjmp	.+40     	; 0x1744 <LCD_vidInitialize+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    171c:	69 a9       	ldd	r22, Y+49	; 0x31
    171e:	7a a9       	ldd	r23, Y+50	; 0x32
    1720:	8b a9       	ldd	r24, Y+51	; 0x33
    1722:	9c a9       	ldd	r25, Y+52	; 0x34
    1724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	98 ab       	std	Y+48, r25	; 0x30
    172e:	8f a7       	std	Y+47, r24	; 0x2f
    1730:	8f a5       	ldd	r24, Y+47	; 0x2f
    1732:	98 a9       	ldd	r25, Y+48	; 0x30
    1734:	9c a7       	std	Y+44, r25	; 0x2c
    1736:	8b a7       	std	Y+43, r24	; 0x2b
    1738:	8b a5       	ldd	r24, Y+43	; 0x2b
    173a:	9c a5       	ldd	r25, Y+44	; 0x2c
    173c:	01 97       	sbiw	r24, 0x01	; 1
    173e:	f1 f7       	brne	.-4      	; 0x173c <LCD_vidInitialize+0x240>
    1740:	9c a7       	std	Y+44, r25	; 0x2c
    1742:	8b a7       	std	Y+43, r24	; 0x2b
	  _delay_ms (10);


	  // DISPLAY ON/OFF CONTROL
	  LCD_vidWriteCommand (0b00001111);
    1744:	8f e0       	ldi	r24, 0x0F	; 15
    1746:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vidWriteCommand>
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	a0 e2       	ldi	r26, 0x20	; 32
    1750:	b1 e4       	ldi	r27, 0x41	; 65
    1752:	8f a3       	std	Y+39, r24	; 0x27
    1754:	98 a7       	std	Y+40, r25	; 0x28
    1756:	a9 a7       	std	Y+41, r26	; 0x29
    1758:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    175a:	6f a1       	ldd	r22, Y+39	; 0x27
    175c:	78 a5       	ldd	r23, Y+40	; 0x28
    175e:	89 a5       	ldd	r24, Y+41	; 0x29
    1760:	9a a5       	ldd	r25, Y+42	; 0x2a
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e8       	ldi	r19, 0x80	; 128
    1766:	4b e3       	ldi	r20, 0x3B	; 59
    1768:	55 e4       	ldi	r21, 0x45	; 69
    176a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	8b a3       	std	Y+35, r24	; 0x23
    1774:	9c a3       	std	Y+36, r25	; 0x24
    1776:	ad a3       	std	Y+37, r26	; 0x25
    1778:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    177a:	6b a1       	ldd	r22, Y+35	; 0x23
    177c:	7c a1       	ldd	r23, Y+36	; 0x24
    177e:	8d a1       	ldd	r24, Y+37	; 0x25
    1780:	9e a1       	ldd	r25, Y+38	; 0x26
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	40 e8       	ldi	r20, 0x80	; 128
    1788:	5f e3       	ldi	r21, 0x3F	; 63
    178a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    178e:	88 23       	and	r24, r24
    1790:	2c f4       	brge	.+10     	; 0x179c <LCD_vidInitialize+0x2a0>
		__ticks = 1;
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	9a a3       	std	Y+34, r25	; 0x22
    1798:	89 a3       	std	Y+33, r24	; 0x21
    179a:	3f c0       	rjmp	.+126    	; 0x181a <LCD_vidInitialize+0x31e>
	else if (__tmp > 65535)
    179c:	6b a1       	ldd	r22, Y+35	; 0x23
    179e:	7c a1       	ldd	r23, Y+36	; 0x24
    17a0:	8d a1       	ldd	r24, Y+37	; 0x25
    17a2:	9e a1       	ldd	r25, Y+38	; 0x26
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	3f ef       	ldi	r19, 0xFF	; 255
    17a8:	4f e7       	ldi	r20, 0x7F	; 127
    17aa:	57 e4       	ldi	r21, 0x47	; 71
    17ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17b0:	18 16       	cp	r1, r24
    17b2:	4c f5       	brge	.+82     	; 0x1806 <LCD_vidInitialize+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17b4:	6f a1       	ldd	r22, Y+39	; 0x27
    17b6:	78 a5       	ldd	r23, Y+40	; 0x28
    17b8:	89 a5       	ldd	r24, Y+41	; 0x29
    17ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	40 e2       	ldi	r20, 0x20	; 32
    17c2:	51 e4       	ldi	r21, 0x41	; 65
    17c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	bc 01       	movw	r22, r24
    17ce:	cd 01       	movw	r24, r26
    17d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	9a a3       	std	Y+34, r25	; 0x22
    17da:	89 a3       	std	Y+33, r24	; 0x21
    17dc:	0f c0       	rjmp	.+30     	; 0x17fc <LCD_vidInitialize+0x300>
    17de:	8c e2       	ldi	r24, 0x2C	; 44
    17e0:	91 e0       	ldi	r25, 0x01	; 1
    17e2:	98 a3       	std	Y+32, r25	; 0x20
    17e4:	8f 8f       	std	Y+31, r24	; 0x1f
    17e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17e8:	98 a1       	ldd	r25, Y+32	; 0x20
    17ea:	01 97       	sbiw	r24, 0x01	; 1
    17ec:	f1 f7       	brne	.-4      	; 0x17ea <LCD_vidInitialize+0x2ee>
    17ee:	98 a3       	std	Y+32, r25	; 0x20
    17f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17f2:	89 a1       	ldd	r24, Y+33	; 0x21
    17f4:	9a a1       	ldd	r25, Y+34	; 0x22
    17f6:	01 97       	sbiw	r24, 0x01	; 1
    17f8:	9a a3       	std	Y+34, r25	; 0x22
    17fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17fc:	89 a1       	ldd	r24, Y+33	; 0x21
    17fe:	9a a1       	ldd	r25, Y+34	; 0x22
    1800:	00 97       	sbiw	r24, 0x00	; 0
    1802:	69 f7       	brne	.-38     	; 0x17de <LCD_vidInitialize+0x2e2>
    1804:	14 c0       	rjmp	.+40     	; 0x182e <LCD_vidInitialize+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1806:	6b a1       	ldd	r22, Y+35	; 0x23
    1808:	7c a1       	ldd	r23, Y+36	; 0x24
    180a:	8d a1       	ldd	r24, Y+37	; 0x25
    180c:	9e a1       	ldd	r25, Y+38	; 0x26
    180e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	9a a3       	std	Y+34, r25	; 0x22
    1818:	89 a3       	std	Y+33, r24	; 0x21
    181a:	89 a1       	ldd	r24, Y+33	; 0x21
    181c:	9a a1       	ldd	r25, Y+34	; 0x22
    181e:	9e 8f       	std	Y+30, r25	; 0x1e
    1820:	8d 8f       	std	Y+29, r24	; 0x1d
    1822:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1824:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1826:	01 97       	sbiw	r24, 0x01	; 1
    1828:	f1 f7       	brne	.-4      	; 0x1826 <LCD_vidInitialize+0x32a>
    182a:	9e 8f       	std	Y+30, r25	; 0x1e
    182c:	8d 8f       	std	Y+29, r24	; 0x1d
	 //  LCD_vidWriteCommand (0b00001100); //0X0C
	  _delay_ms (10);

	  // DISPLAY CLEAR
	 	  LCD_vidWriteCommand (0b00000001);
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vidWriteCommand>
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	a0 e2       	ldi	r26, 0x20	; 32
    183a:	b1 e4       	ldi	r27, 0x41	; 65
    183c:	89 8f       	std	Y+25, r24	; 0x19
    183e:	9a 8f       	std	Y+26, r25	; 0x1a
    1840:	ab 8f       	std	Y+27, r26	; 0x1b
    1842:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1844:	69 8d       	ldd	r22, Y+25	; 0x19
    1846:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1848:	8b 8d       	ldd	r24, Y+27	; 0x1b
    184a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e8       	ldi	r19, 0x80	; 128
    1850:	4b e3       	ldi	r20, 0x3B	; 59
    1852:	55 e4       	ldi	r21, 0x45	; 69
    1854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	8d 8b       	std	Y+21, r24	; 0x15
    185e:	9e 8b       	std	Y+22, r25	; 0x16
    1860:	af 8b       	std	Y+23, r26	; 0x17
    1862:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1864:	6d 89       	ldd	r22, Y+21	; 0x15
    1866:	7e 89       	ldd	r23, Y+22	; 0x16
    1868:	8f 89       	ldd	r24, Y+23	; 0x17
    186a:	98 8d       	ldd	r25, Y+24	; 0x18
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	40 e8       	ldi	r20, 0x80	; 128
    1872:	5f e3       	ldi	r21, 0x3F	; 63
    1874:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1878:	88 23       	and	r24, r24
    187a:	2c f4       	brge	.+10     	; 0x1886 <LCD_vidInitialize+0x38a>
		__ticks = 1;
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	9c 8b       	std	Y+20, r25	; 0x14
    1882:	8b 8b       	std	Y+19, r24	; 0x13
    1884:	3f c0       	rjmp	.+126    	; 0x1904 <LCD_vidInitialize+0x408>
	else if (__tmp > 65535)
    1886:	6d 89       	ldd	r22, Y+21	; 0x15
    1888:	7e 89       	ldd	r23, Y+22	; 0x16
    188a:	8f 89       	ldd	r24, Y+23	; 0x17
    188c:	98 8d       	ldd	r25, Y+24	; 0x18
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	3f ef       	ldi	r19, 0xFF	; 255
    1892:	4f e7       	ldi	r20, 0x7F	; 127
    1894:	57 e4       	ldi	r21, 0x47	; 71
    1896:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    189a:	18 16       	cp	r1, r24
    189c:	4c f5       	brge	.+82     	; 0x18f0 <LCD_vidInitialize+0x3f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    189e:	69 8d       	ldd	r22, Y+25	; 0x19
    18a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	40 e2       	ldi	r20, 0x20	; 32
    18ac:	51 e4       	ldi	r21, 0x41	; 65
    18ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	bc 01       	movw	r22, r24
    18b8:	cd 01       	movw	r24, r26
    18ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	9c 8b       	std	Y+20, r25	; 0x14
    18c4:	8b 8b       	std	Y+19, r24	; 0x13
    18c6:	0f c0       	rjmp	.+30     	; 0x18e6 <LCD_vidInitialize+0x3ea>
    18c8:	8c e2       	ldi	r24, 0x2C	; 44
    18ca:	91 e0       	ldi	r25, 0x01	; 1
    18cc:	9a 8b       	std	Y+18, r25	; 0x12
    18ce:	89 8b       	std	Y+17, r24	; 0x11
    18d0:	89 89       	ldd	r24, Y+17	; 0x11
    18d2:	9a 89       	ldd	r25, Y+18	; 0x12
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	f1 f7       	brne	.-4      	; 0x18d4 <LCD_vidInitialize+0x3d8>
    18d8:	9a 8b       	std	Y+18, r25	; 0x12
    18da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18dc:	8b 89       	ldd	r24, Y+19	; 0x13
    18de:	9c 89       	ldd	r25, Y+20	; 0x14
    18e0:	01 97       	sbiw	r24, 0x01	; 1
    18e2:	9c 8b       	std	Y+20, r25	; 0x14
    18e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e6:	8b 89       	ldd	r24, Y+19	; 0x13
    18e8:	9c 89       	ldd	r25, Y+20	; 0x14
    18ea:	00 97       	sbiw	r24, 0x00	; 0
    18ec:	69 f7       	brne	.-38     	; 0x18c8 <LCD_vidInitialize+0x3cc>
    18ee:	14 c0       	rjmp	.+40     	; 0x1918 <LCD_vidInitialize+0x41c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18f0:	6d 89       	ldd	r22, Y+21	; 0x15
    18f2:	7e 89       	ldd	r23, Y+22	; 0x16
    18f4:	8f 89       	ldd	r24, Y+23	; 0x17
    18f6:	98 8d       	ldd	r25, Y+24	; 0x18
    18f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	9c 8b       	std	Y+20, r25	; 0x14
    1902:	8b 8b       	std	Y+19, r24	; 0x13
    1904:	8b 89       	ldd	r24, Y+19	; 0x13
    1906:	9c 89       	ldd	r25, Y+20	; 0x14
    1908:	98 8b       	std	Y+16, r25	; 0x10
    190a:	8f 87       	std	Y+15, r24	; 0x0f
    190c:	8f 85       	ldd	r24, Y+15	; 0x0f
    190e:	98 89       	ldd	r25, Y+16	; 0x10
    1910:	01 97       	sbiw	r24, 0x01	; 1
    1912:	f1 f7       	brne	.-4      	; 0x1910 <LCD_vidInitialize+0x414>
    1914:	98 8b       	std	Y+16, r25	; 0x10
    1916:	8f 87       	std	Y+15, r24	; 0x0f
	 	  _delay_ms (10);


	  // Entry mode set
	  LCD_vidWriteCommand (0b00000110);//0X06
    1918:	86 e0       	ldi	r24, 0x06	; 6
    191a:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vidWriteCommand>
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	a0 ea       	ldi	r26, 0xA0	; 160
    1924:	b1 e4       	ldi	r27, 0x41	; 65
    1926:	8b 87       	std	Y+11, r24	; 0x0b
    1928:	9c 87       	std	Y+12, r25	; 0x0c
    192a:	ad 87       	std	Y+13, r26	; 0x0d
    192c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    192e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1930:	7c 85       	ldd	r23, Y+12	; 0x0c
    1932:	8d 85       	ldd	r24, Y+13	; 0x0d
    1934:	9e 85       	ldd	r25, Y+14	; 0x0e
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 e8       	ldi	r19, 0x80	; 128
    193a:	4b e3       	ldi	r20, 0x3B	; 59
    193c:	55 e4       	ldi	r21, 0x45	; 69
    193e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	8f 83       	std	Y+7, r24	; 0x07
    1948:	98 87       	std	Y+8, r25	; 0x08
    194a:	a9 87       	std	Y+9, r26	; 0x09
    194c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    194e:	6f 81       	ldd	r22, Y+7	; 0x07
    1950:	78 85       	ldd	r23, Y+8	; 0x08
    1952:	89 85       	ldd	r24, Y+9	; 0x09
    1954:	9a 85       	ldd	r25, Y+10	; 0x0a
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	40 e8       	ldi	r20, 0x80	; 128
    195c:	5f e3       	ldi	r21, 0x3F	; 63
    195e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1962:	88 23       	and	r24, r24
    1964:	2c f4       	brge	.+10     	; 0x1970 <LCD_vidInitialize+0x474>
		__ticks = 1;
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	9e 83       	std	Y+6, r25	; 0x06
    196c:	8d 83       	std	Y+5, r24	; 0x05
    196e:	3f c0       	rjmp	.+126    	; 0x19ee <LCD_vidInitialize+0x4f2>
	else if (__tmp > 65535)
    1970:	6f 81       	ldd	r22, Y+7	; 0x07
    1972:	78 85       	ldd	r23, Y+8	; 0x08
    1974:	89 85       	ldd	r24, Y+9	; 0x09
    1976:	9a 85       	ldd	r25, Y+10	; 0x0a
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	3f ef       	ldi	r19, 0xFF	; 255
    197c:	4f e7       	ldi	r20, 0x7F	; 127
    197e:	57 e4       	ldi	r21, 0x47	; 71
    1980:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1984:	18 16       	cp	r1, r24
    1986:	4c f5       	brge	.+82     	; 0x19da <LCD_vidInitialize+0x4de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1988:	6b 85       	ldd	r22, Y+11	; 0x0b
    198a:	7c 85       	ldd	r23, Y+12	; 0x0c
    198c:	8d 85       	ldd	r24, Y+13	; 0x0d
    198e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	40 e2       	ldi	r20, 0x20	; 32
    1996:	51 e4       	ldi	r21, 0x41	; 65
    1998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	bc 01       	movw	r22, r24
    19a2:	cd 01       	movw	r24, r26
    19a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a8:	dc 01       	movw	r26, r24
    19aa:	cb 01       	movw	r24, r22
    19ac:	9e 83       	std	Y+6, r25	; 0x06
    19ae:	8d 83       	std	Y+5, r24	; 0x05
    19b0:	0f c0       	rjmp	.+30     	; 0x19d0 <LCD_vidInitialize+0x4d4>
    19b2:	8c e2       	ldi	r24, 0x2C	; 44
    19b4:	91 e0       	ldi	r25, 0x01	; 1
    19b6:	9c 83       	std	Y+4, r25	; 0x04
    19b8:	8b 83       	std	Y+3, r24	; 0x03
    19ba:	8b 81       	ldd	r24, Y+3	; 0x03
    19bc:	9c 81       	ldd	r25, Y+4	; 0x04
    19be:	01 97       	sbiw	r24, 0x01	; 1
    19c0:	f1 f7       	brne	.-4      	; 0x19be <LCD_vidInitialize+0x4c2>
    19c2:	9c 83       	std	Y+4, r25	; 0x04
    19c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19c6:	8d 81       	ldd	r24, Y+5	; 0x05
    19c8:	9e 81       	ldd	r25, Y+6	; 0x06
    19ca:	01 97       	sbiw	r24, 0x01	; 1
    19cc:	9e 83       	std	Y+6, r25	; 0x06
    19ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d0:	8d 81       	ldd	r24, Y+5	; 0x05
    19d2:	9e 81       	ldd	r25, Y+6	; 0x06
    19d4:	00 97       	sbiw	r24, 0x00	; 0
    19d6:	69 f7       	brne	.-38     	; 0x19b2 <LCD_vidInitialize+0x4b6>
    19d8:	14 c0       	rjmp	.+40     	; 0x1a02 <LCD_vidInitialize+0x506>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19da:	6f 81       	ldd	r22, Y+7	; 0x07
    19dc:	78 85       	ldd	r23, Y+8	; 0x08
    19de:	89 85       	ldd	r24, Y+9	; 0x09
    19e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	9e 83       	std	Y+6, r25	; 0x06
    19ec:	8d 83       	std	Y+5, r24	; 0x05
    19ee:	8d 81       	ldd	r24, Y+5	; 0x05
    19f0:	9e 81       	ldd	r25, Y+6	; 0x06
    19f2:	9a 83       	std	Y+2, r25	; 0x02
    19f4:	89 83       	std	Y+1, r24	; 0x01
    19f6:	89 81       	ldd	r24, Y+1	; 0x01
    19f8:	9a 81       	ldd	r25, Y+2	; 0x02
    19fa:	01 97       	sbiw	r24, 0x01	; 1
    19fc:	f1 f7       	brne	.-4      	; 0x19fa <LCD_vidInitialize+0x4fe>
    19fe:	9a 83       	std	Y+2, r25	; 0x02
    1a00:	89 83       	std	Y+1, r24	; 0x01
	  _delay_ms (20);

}
    1a02:	ca 5b       	subi	r28, 0xBA	; 186
    1a04:	df 4f       	sbci	r29, 0xFF	; 255
    1a06:	0f b6       	in	r0, 0x3f	; 63
    1a08:	f8 94       	cli
    1a0a:	de bf       	out	0x3e, r29	; 62
    1a0c:	0f be       	out	0x3f, r0	; 63
    1a0e:	cd bf       	out	0x3d, r28	; 61
    1a10:	cf 91       	pop	r28
    1a12:	df 91       	pop	r29
    1a14:	1f 91       	pop	r17
    1a16:	0f 91       	pop	r16
    1a18:	08 95       	ret

00001a1a <LCD_vidWriteCharacter>:


/****************************************************************/

void LCD_vidWriteCharacter(u8 u8DataCpy){
    1a1a:	df 93       	push	r29
    1a1c:	cf 93       	push	r28
    1a1e:	cd b7       	in	r28, 0x3d	; 61
    1a20:	de b7       	in	r29, 0x3e	; 62
    1a22:	6d 97       	sbiw	r28, 0x1d	; 29
    1a24:	0f b6       	in	r0, 0x3f	; 63
    1a26:	f8 94       	cli
    1a28:	de bf       	out	0x3e, r29	; 62
    1a2a:	0f be       	out	0x3f, r0	; 63
    1a2c:	cd bf       	out	0x3d, r28	; 61
    1a2e:	8d 8f       	std	Y+29, r24	; 0x1d
	 // Set RS to HIGH
		DIO_SetPinValue(Ctrl_PORT, RS , HIGH);
    1a30:	83 e0       	ldi	r24, 0x03	; 3
    1a32:	65 e0       	ldi	r22, 0x05	; 5
    1a34:	41 e0       	ldi	r20, 0x01	; 1
    1a36:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_SetPinValue>

		// Set R/W to LOW
		DIO_SetPinValue(Ctrl_PORT, RW , LOW);
    1a3a:	83 e0       	ldi	r24, 0x03	; 3
    1a3c:	66 e0       	ldi	r22, 0x06	; 6
    1a3e:	40 e0       	ldi	r20, 0x00	; 0
    1a40:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_SetPinValue>

		// Set E to HIGH
		DIO_SetPinValue(Ctrl_PORT, E , HIGH);
    1a44:	83 e0       	ldi	r24, 0x03	; 3
    1a46:	67 e0       	ldi	r22, 0x07	; 7
    1a48:	41 e0       	ldi	r20, 0x01	; 1
    1a4a:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_SetPinValue>

		// Load Command on Data bus
		DIO_SetPortValue(Buff_PORT, u8DataCpy);
    1a4e:	82 e0       	ldi	r24, 0x02	; 2
    1a50:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1a52:	0e 94 c2 08 	call	0x1184	; 0x1184 <DIO_SetPortValue>

		// Set E to LOW
		DIO_SetPinValue(Ctrl_PORT, E, LOW);
    1a56:	83 e0       	ldi	r24, 0x03	; 3
    1a58:	67 e0       	ldi	r22, 0x07	; 7
    1a5a:	40 e0       	ldi	r20, 0x00	; 0
    1a5c:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_SetPinValue>
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	a0 e2       	ldi	r26, 0x20	; 32
    1a66:	b1 e4       	ldi	r27, 0x41	; 65
    1a68:	89 8f       	std	Y+25, r24	; 0x19
    1a6a:	9a 8f       	std	Y+26, r25	; 0x1a
    1a6c:	ab 8f       	std	Y+27, r26	; 0x1b
    1a6e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a70:	69 8d       	ldd	r22, Y+25	; 0x19
    1a72:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	30 e8       	ldi	r19, 0x80	; 128
    1a7c:	4b e3       	ldi	r20, 0x3B	; 59
    1a7e:	55 e4       	ldi	r21, 0x45	; 69
    1a80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	8d 8b       	std	Y+21, r24	; 0x15
    1a8a:	9e 8b       	std	Y+22, r25	; 0x16
    1a8c:	af 8b       	std	Y+23, r26	; 0x17
    1a8e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a90:	6d 89       	ldd	r22, Y+21	; 0x15
    1a92:	7e 89       	ldd	r23, Y+22	; 0x16
    1a94:	8f 89       	ldd	r24, Y+23	; 0x17
    1a96:	98 8d       	ldd	r25, Y+24	; 0x18
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	40 e8       	ldi	r20, 0x80	; 128
    1a9e:	5f e3       	ldi	r21, 0x3F	; 63
    1aa0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aa4:	88 23       	and	r24, r24
    1aa6:	2c f4       	brge	.+10     	; 0x1ab2 <LCD_vidWriteCharacter+0x98>
		__ticks = 1;
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	9c 8b       	std	Y+20, r25	; 0x14
    1aae:	8b 8b       	std	Y+19, r24	; 0x13
    1ab0:	3f c0       	rjmp	.+126    	; 0x1b30 <LCD_vidWriteCharacter+0x116>
	else if (__tmp > 65535)
    1ab2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ab4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ab6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ab8:	98 8d       	ldd	r25, Y+24	; 0x18
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	3f ef       	ldi	r19, 0xFF	; 255
    1abe:	4f e7       	ldi	r20, 0x7F	; 127
    1ac0:	57 e4       	ldi	r21, 0x47	; 71
    1ac2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ac6:	18 16       	cp	r1, r24
    1ac8:	4c f5       	brge	.+82     	; 0x1b1c <LCD_vidWriteCharacter+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aca:	69 8d       	ldd	r22, Y+25	; 0x19
    1acc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ace:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ad0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	40 e2       	ldi	r20, 0x20	; 32
    1ad8:	51 e4       	ldi	r21, 0x41	; 65
    1ada:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	bc 01       	movw	r22, r24
    1ae4:	cd 01       	movw	r24, r26
    1ae6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	9c 8b       	std	Y+20, r25	; 0x14
    1af0:	8b 8b       	std	Y+19, r24	; 0x13
    1af2:	0f c0       	rjmp	.+30     	; 0x1b12 <LCD_vidWriteCharacter+0xf8>
    1af4:	8c e2       	ldi	r24, 0x2C	; 44
    1af6:	91 e0       	ldi	r25, 0x01	; 1
    1af8:	9a 8b       	std	Y+18, r25	; 0x12
    1afa:	89 8b       	std	Y+17, r24	; 0x11
    1afc:	89 89       	ldd	r24, Y+17	; 0x11
    1afe:	9a 89       	ldd	r25, Y+18	; 0x12
    1b00:	01 97       	sbiw	r24, 0x01	; 1
    1b02:	f1 f7       	brne	.-4      	; 0x1b00 <LCD_vidWriteCharacter+0xe6>
    1b04:	9a 8b       	std	Y+18, r25	; 0x12
    1b06:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b08:	8b 89       	ldd	r24, Y+19	; 0x13
    1b0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	9c 8b       	std	Y+20, r25	; 0x14
    1b10:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b12:	8b 89       	ldd	r24, Y+19	; 0x13
    1b14:	9c 89       	ldd	r25, Y+20	; 0x14
    1b16:	00 97       	sbiw	r24, 0x00	; 0
    1b18:	69 f7       	brne	.-38     	; 0x1af4 <LCD_vidWriteCharacter+0xda>
    1b1a:	14 c0       	rjmp	.+40     	; 0x1b44 <LCD_vidWriteCharacter+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b1c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b1e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b20:	8f 89       	ldd	r24, Y+23	; 0x17
    1b22:	98 8d       	ldd	r25, Y+24	; 0x18
    1b24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	9c 8b       	std	Y+20, r25	; 0x14
    1b2e:	8b 8b       	std	Y+19, r24	; 0x13
    1b30:	8b 89       	ldd	r24, Y+19	; 0x13
    1b32:	9c 89       	ldd	r25, Y+20	; 0x14
    1b34:	98 8b       	std	Y+16, r25	; 0x10
    1b36:	8f 87       	std	Y+15, r24	; 0x0f
    1b38:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b3a:	98 89       	ldd	r25, Y+16	; 0x10
    1b3c:	01 97       	sbiw	r24, 0x01	; 1
    1b3e:	f1 f7       	brne	.-4      	; 0x1b3c <LCD_vidWriteCharacter+0x122>
    1b40:	98 8b       	std	Y+16, r25	; 0x10
    1b42:	8f 87       	std	Y+15, r24	; 0x0f

		// Wait for E to settle
		_delay_ms(10);

		// Set E to HIGH
		DIO_SetPinValue(Ctrl_PORT, E, HIGH);
    1b44:	83 e0       	ldi	r24, 0x03	; 3
    1b46:	67 e0       	ldi	r22, 0x07	; 7
    1b48:	41 e0       	ldi	r20, 0x01	; 1
    1b4a:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_SetPinValue>
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	a0 e2       	ldi	r26, 0x20	; 32
    1b54:	b1 e4       	ldi	r27, 0x41	; 65
    1b56:	8b 87       	std	Y+11, r24	; 0x0b
    1b58:	9c 87       	std	Y+12, r25	; 0x0c
    1b5a:	ad 87       	std	Y+13, r26	; 0x0d
    1b5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e8       	ldi	r19, 0x80	; 128
    1b6a:	4b e3       	ldi	r20, 0x3B	; 59
    1b6c:	55 e4       	ldi	r21, 0x45	; 69
    1b6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	8f 83       	std	Y+7, r24	; 0x07
    1b78:	98 87       	std	Y+8, r25	; 0x08
    1b7a:	a9 87       	std	Y+9, r26	; 0x09
    1b7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b80:	78 85       	ldd	r23, Y+8	; 0x08
    1b82:	89 85       	ldd	r24, Y+9	; 0x09
    1b84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	40 e8       	ldi	r20, 0x80	; 128
    1b8c:	5f e3       	ldi	r21, 0x3F	; 63
    1b8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b92:	88 23       	and	r24, r24
    1b94:	2c f4       	brge	.+10     	; 0x1ba0 <LCD_vidWriteCharacter+0x186>
		__ticks = 1;
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	9e 83       	std	Y+6, r25	; 0x06
    1b9c:	8d 83       	std	Y+5, r24	; 0x05
    1b9e:	3f c0       	rjmp	.+126    	; 0x1c1e <LCD_vidWriteCharacter+0x204>
	else if (__tmp > 65535)
    1ba0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba2:	78 85       	ldd	r23, Y+8	; 0x08
    1ba4:	89 85       	ldd	r24, Y+9	; 0x09
    1ba6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	3f ef       	ldi	r19, 0xFF	; 255
    1bac:	4f e7       	ldi	r20, 0x7F	; 127
    1bae:	57 e4       	ldi	r21, 0x47	; 71
    1bb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bb4:	18 16       	cp	r1, r24
    1bb6:	4c f5       	brge	.+82     	; 0x1c0a <LCD_vidWriteCharacter+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bba:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	40 e2       	ldi	r20, 0x20	; 32
    1bc6:	51 e4       	ldi	r21, 0x41	; 65
    1bc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	bc 01       	movw	r22, r24
    1bd2:	cd 01       	movw	r24, r26
    1bd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	9e 83       	std	Y+6, r25	; 0x06
    1bde:	8d 83       	std	Y+5, r24	; 0x05
    1be0:	0f c0       	rjmp	.+30     	; 0x1c00 <LCD_vidWriteCharacter+0x1e6>
    1be2:	8c e2       	ldi	r24, 0x2C	; 44
    1be4:	91 e0       	ldi	r25, 0x01	; 1
    1be6:	9c 83       	std	Y+4, r25	; 0x04
    1be8:	8b 83       	std	Y+3, r24	; 0x03
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	9c 81       	ldd	r25, Y+4	; 0x04
    1bee:	01 97       	sbiw	r24, 0x01	; 1
    1bf0:	f1 f7       	brne	.-4      	; 0x1bee <LCD_vidWriteCharacter+0x1d4>
    1bf2:	9c 83       	std	Y+4, r25	; 0x04
    1bf4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfa:	01 97       	sbiw	r24, 0x01	; 1
    1bfc:	9e 83       	std	Y+6, r25	; 0x06
    1bfe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c00:	8d 81       	ldd	r24, Y+5	; 0x05
    1c02:	9e 81       	ldd	r25, Y+6	; 0x06
    1c04:	00 97       	sbiw	r24, 0x00	; 0
    1c06:	69 f7       	brne	.-38     	; 0x1be2 <LCD_vidWriteCharacter+0x1c8>
    1c08:	14 c0       	rjmp	.+40     	; 0x1c32 <LCD_vidWriteCharacter+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0c:	78 85       	ldd	r23, Y+8	; 0x08
    1c0e:	89 85       	ldd	r24, Y+9	; 0x09
    1c10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	9e 83       	std	Y+6, r25	; 0x06
    1c1c:	8d 83       	std	Y+5, r24	; 0x05
    1c1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c20:	9e 81       	ldd	r25, Y+6	; 0x06
    1c22:	9a 83       	std	Y+2, r25	; 0x02
    1c24:	89 83       	std	Y+1, r24	; 0x01
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	f1 f7       	brne	.-4      	; 0x1c2a <LCD_vidWriteCharacter+0x210>
    1c2e:	9a 83       	std	Y+2, r25	; 0x02
    1c30:	89 83       	std	Y+1, r24	; 0x01

		// Delay to let the LCD Display the character
		_delay_ms(10);

}
    1c32:	6d 96       	adiw	r28, 0x1d	; 29
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	f8 94       	cli
    1c38:	de bf       	out	0x3e, r29	; 62
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	cd bf       	out	0x3d, r28	; 61
    1c3e:	cf 91       	pop	r28
    1c40:	df 91       	pop	r29
    1c42:	08 95       	ret

00001c44 <LCD_vidWriteString>:


/****************************************************************/

void LCD_vidWriteString (u8* pu8StringCpy, u8 u8Index){
    1c44:	df 93       	push	r29
    1c46:	cf 93       	push	r28
    1c48:	cd b7       	in	r28, 0x3d	; 61
    1c4a:	de b7       	in	r29, 0x3e	; 62
    1c4c:	62 97       	sbiw	r28, 0x12	; 18
    1c4e:	0f b6       	in	r0, 0x3f	; 63
    1c50:	f8 94       	cli
    1c52:	de bf       	out	0x3e, r29	; 62
    1c54:	0f be       	out	0x3f, r0	; 63
    1c56:	cd bf       	out	0x3d, r28	; 61
    1c58:	99 8b       	std	Y+17, r25	; 0x11
    1c5a:	88 8b       	std	Y+16, r24	; 0x10
    1c5c:	6a 8b       	std	Y+18, r22	; 0x12

	// Local loop index

		u8 iteration=0;
    1c5e:	1f 86       	std	Y+15, r1	; 0x0f

		for (iteration=0; ((iteration<u8Index)&&(pu8StringCpy[iteration] != '\0')) ; iteration++)
    1c60:	1f 86       	std	Y+15, r1	; 0x0f
    1c62:	80 c0       	rjmp	.+256    	; 0x1d64 <LCD_vidWriteString+0x120>
		{
			/* Write Character on LCD */
			LCD_vidWriteCharacter(pu8StringCpy[iteration]);
    1c64:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	88 89       	ldd	r24, Y+16	; 0x10
    1c6c:	99 89       	ldd	r25, Y+17	; 0x11
    1c6e:	fc 01       	movw	r30, r24
    1c70:	e2 0f       	add	r30, r18
    1c72:	f3 1f       	adc	r31, r19
    1c74:	80 81       	ld	r24, Z
    1c76:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <LCD_vidWriteCharacter>
    1c7a:	80 e0       	ldi	r24, 0x00	; 0
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	a0 e2       	ldi	r26, 0x20	; 32
    1c80:	b1 e4       	ldi	r27, 0x41	; 65
    1c82:	8b 87       	std	Y+11, r24	; 0x0b
    1c84:	9c 87       	std	Y+12, r25	; 0x0c
    1c86:	ad 87       	std	Y+13, r26	; 0x0d
    1c88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	30 e8       	ldi	r19, 0x80	; 128
    1c96:	4b e3       	ldi	r20, 0x3B	; 59
    1c98:	55 e4       	ldi	r21, 0x45	; 69
    1c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	8f 83       	std	Y+7, r24	; 0x07
    1ca4:	98 87       	std	Y+8, r25	; 0x08
    1ca6:	a9 87       	std	Y+9, r26	; 0x09
    1ca8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1caa:	6f 81       	ldd	r22, Y+7	; 0x07
    1cac:	78 85       	ldd	r23, Y+8	; 0x08
    1cae:	89 85       	ldd	r24, Y+9	; 0x09
    1cb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	40 e8       	ldi	r20, 0x80	; 128
    1cb8:	5f e3       	ldi	r21, 0x3F	; 63
    1cba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cbe:	88 23       	and	r24, r24
    1cc0:	2c f4       	brge	.+10     	; 0x1ccc <LCD_vidWriteString+0x88>
		__ticks = 1;
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	9e 83       	std	Y+6, r25	; 0x06
    1cc8:	8d 83       	std	Y+5, r24	; 0x05
    1cca:	3f c0       	rjmp	.+126    	; 0x1d4a <LCD_vidWriteString+0x106>
	else if (__tmp > 65535)
    1ccc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cce:	78 85       	ldd	r23, Y+8	; 0x08
    1cd0:	89 85       	ldd	r24, Y+9	; 0x09
    1cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	3f ef       	ldi	r19, 0xFF	; 255
    1cd8:	4f e7       	ldi	r20, 0x7F	; 127
    1cda:	57 e4       	ldi	r21, 0x47	; 71
    1cdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ce0:	18 16       	cp	r1, r24
    1ce2:	4c f5       	brge	.+82     	; 0x1d36 <LCD_vidWriteString+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ce6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ce8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	40 e2       	ldi	r20, 0x20	; 32
    1cf2:	51 e4       	ldi	r21, 0x41	; 65
    1cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	bc 01       	movw	r22, r24
    1cfe:	cd 01       	movw	r24, r26
    1d00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d04:	dc 01       	movw	r26, r24
    1d06:	cb 01       	movw	r24, r22
    1d08:	9e 83       	std	Y+6, r25	; 0x06
    1d0a:	8d 83       	std	Y+5, r24	; 0x05
    1d0c:	0f c0       	rjmp	.+30     	; 0x1d2c <LCD_vidWriteString+0xe8>
    1d0e:	8c e2       	ldi	r24, 0x2C	; 44
    1d10:	91 e0       	ldi	r25, 0x01	; 1
    1d12:	9c 83       	std	Y+4, r25	; 0x04
    1d14:	8b 83       	std	Y+3, r24	; 0x03
    1d16:	8b 81       	ldd	r24, Y+3	; 0x03
    1d18:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1a:	01 97       	sbiw	r24, 0x01	; 1
    1d1c:	f1 f7       	brne	.-4      	; 0x1d1a <LCD_vidWriteString+0xd6>
    1d1e:	9c 83       	std	Y+4, r25	; 0x04
    1d20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d22:	8d 81       	ldd	r24, Y+5	; 0x05
    1d24:	9e 81       	ldd	r25, Y+6	; 0x06
    1d26:	01 97       	sbiw	r24, 0x01	; 1
    1d28:	9e 83       	std	Y+6, r25	; 0x06
    1d2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d30:	00 97       	sbiw	r24, 0x00	; 0
    1d32:	69 f7       	brne	.-38     	; 0x1d0e <LCD_vidWriteString+0xca>
    1d34:	14 c0       	rjmp	.+40     	; 0x1d5e <LCD_vidWriteString+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d36:	6f 81       	ldd	r22, Y+7	; 0x07
    1d38:	78 85       	ldd	r23, Y+8	; 0x08
    1d3a:	89 85       	ldd	r24, Y+9	; 0x09
    1d3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	9e 83       	std	Y+6, r25	; 0x06
    1d48:	8d 83       	std	Y+5, r24	; 0x05
    1d4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4e:	9a 83       	std	Y+2, r25	; 0x02
    1d50:	89 83       	std	Y+1, r24	; 0x01
    1d52:	89 81       	ldd	r24, Y+1	; 0x01
    1d54:	9a 81       	ldd	r25, Y+2	; 0x02
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	f1 f7       	brne	.-4      	; 0x1d56 <LCD_vidWriteString+0x112>
    1d5a:	9a 83       	std	Y+2, r25	; 0x02
    1d5c:	89 83       	std	Y+1, r24	; 0x01

	// Local loop index

		u8 iteration=0;

		for (iteration=0; ((iteration<u8Index)&&(pu8StringCpy[iteration] != '\0')) ; iteration++)
    1d5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d60:	8f 5f       	subi	r24, 0xFF	; 255
    1d62:	8f 87       	std	Y+15, r24	; 0x0f
    1d64:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d66:	8a 89       	ldd	r24, Y+18	; 0x12
    1d68:	98 17       	cp	r25, r24
    1d6a:	60 f4       	brcc	.+24     	; 0x1d84 <LCD_vidWriteString+0x140>
    1d6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d6e:	28 2f       	mov	r18, r24
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	88 89       	ldd	r24, Y+16	; 0x10
    1d74:	99 89       	ldd	r25, Y+17	; 0x11
    1d76:	fc 01       	movw	r30, r24
    1d78:	e2 0f       	add	r30, r18
    1d7a:	f3 1f       	adc	r31, r19
    1d7c:	80 81       	ld	r24, Z
    1d7e:	88 23       	and	r24, r24
    1d80:	09 f0       	breq	.+2      	; 0x1d84 <LCD_vidWriteString+0x140>
    1d82:	70 cf       	rjmp	.-288    	; 0x1c64 <LCD_vidWriteString+0x20>
			LCD_vidWriteCharacter(pu8StringCpy[iteration]);

			/* Delay to let the LCD show the character */
			_delay_ms(10);
		}
}
    1d84:	62 96       	adiw	r28, 0x12	; 18
    1d86:	0f b6       	in	r0, 0x3f	; 63
    1d88:	f8 94       	cli
    1d8a:	de bf       	out	0x3e, r29	; 62
    1d8c:	0f be       	out	0x3f, r0	; 63
    1d8e:	cd bf       	out	0x3d, r28	; 61
    1d90:	cf 91       	pop	r28
    1d92:	df 91       	pop	r29
    1d94:	08 95       	ret

00001d96 <Gotoxy>:
/****************************************************************/


/****************************************************************/

void Gotoxy (u8 X,u8 Y){
    1d96:	df 93       	push	r29
    1d98:	cf 93       	push	r28
    1d9a:	00 d0       	rcall	.+0      	; 0x1d9c <Gotoxy+0x6>
    1d9c:	00 d0       	rcall	.+0      	; 0x1d9e <Gotoxy+0x8>
    1d9e:	cd b7       	in	r28, 0x3d	; 61
    1da0:	de b7       	in	r29, 0x3e	; 62
    1da2:	89 83       	std	Y+1, r24	; 0x01
    1da4:	6a 83       	std	Y+2, r22	; 0x02
	if (X>0 && X<=16)
    1da6:	89 81       	ldd	r24, Y+1	; 0x01
    1da8:	88 23       	and	r24, r24
    1daa:	e1 f0       	breq	.+56     	; 0x1de4 <Gotoxy+0x4e>
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	81 31       	cpi	r24, 0x11	; 17
    1db0:	c8 f4       	brcc	.+50     	; 0x1de4 <Gotoxy+0x4e>
		{
		    switch(Y)
    1db2:	8a 81       	ldd	r24, Y+2	; 0x02
    1db4:	28 2f       	mov	r18, r24
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	3c 83       	std	Y+4, r19	; 0x04
    1dba:	2b 83       	std	Y+3, r18	; 0x03
    1dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc0:	81 30       	cpi	r24, 0x01	; 1
    1dc2:	91 05       	cpc	r25, r1
    1dc4:	31 f0       	breq	.+12     	; 0x1dd2 <Gotoxy+0x3c>
    1dc6:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc8:	3c 81       	ldd	r19, Y+4	; 0x04
    1dca:	22 30       	cpi	r18, 0x02	; 2
    1dcc:	31 05       	cpc	r19, r1
    1dce:	31 f0       	breq	.+12     	; 0x1ddc <Gotoxy+0x46>
    1dd0:	09 c0       	rjmp	.+18     	; 0x1de4 <Gotoxy+0x4e>
		    {
			    case 1:
			    	LCD_vidWriteCommand(X+127);
    1dd2:	89 81       	ldd	r24, Y+1	; 0x01
    1dd4:	81 58       	subi	r24, 0x81	; 129
    1dd6:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vidWriteCommand>
    1dda:	04 c0       	rjmp	.+8      	; 0x1de4 <Gotoxy+0x4e>
			    break;
			    case 2:
			    	LCD_vidWriteCommand(X+191);
    1ddc:	89 81       	ldd	r24, Y+1	; 0x01
    1dde:	81 54       	subi	r24, 0x41	; 65
    1de0:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vidWriteCommand>
			    default:
			    break;
		    }
		}

}
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	08 95       	ret

00001df2 <LCDWriteInteger>:

/********************************************************/

void LCDWriteInteger(u16 val , u16 field_length)
{
    1df2:	df 93       	push	r29
    1df4:	cf 93       	push	r28
    1df6:	cd b7       	in	r28, 0x3d	; 61
    1df8:	de b7       	in	r29, 0x3e	; 62
    1dfa:	62 97       	sbiw	r28, 0x12	; 18
    1dfc:	0f b6       	in	r0, 0x3f	; 63
    1dfe:	f8 94       	cli
    1e00:	de bf       	out	0x3e, r29	; 62
    1e02:	0f be       	out	0x3f, r0	; 63
    1e04:	cd bf       	out	0x3d, r28	; 61
    1e06:	98 8b       	std	Y+16, r25	; 0x10
    1e08:	8f 87       	std	Y+15, r24	; 0x0f
    1e0a:	7a 8b       	std	Y+18, r23	; 0x12
    1e0c:	69 8b       	std	Y+17, r22	; 0x11
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	u16 str[5]={0,0,0,0,0};
    1e0e:	8a e0       	ldi	r24, 0x0A	; 10
    1e10:	fe 01       	movw	r30, r28
    1e12:	35 96       	adiw	r30, 0x05	; 5
    1e14:	df 01       	movw	r26, r30
    1e16:	28 2f       	mov	r18, r24
    1e18:	1d 92       	st	X+, r1
    1e1a:	2a 95       	dec	r18
    1e1c:	e9 f7       	brne	.-6      	; 0x1e18 <LCDWriteInteger+0x26>
	u16 i=4,j=0;
    1e1e:	84 e0       	ldi	r24, 0x04	; 4
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	9c 83       	std	Y+4, r25	; 0x04
    1e24:	8b 83       	std	Y+3, r24	; 0x03
    1e26:	1a 82       	std	Y+2, r1	; 0x02
    1e28:	19 82       	std	Y+1, r1	; 0x01
		LCD_vidWriteCharacter('-');   //Write Negative sign
		val=val*(-1);     //convert to positive
	}
	else
	{
		LCD_vidWriteCharacter(' ');
    1e2a:	80 e2       	ldi	r24, 0x20	; 32
    1e2c:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <LCD_vidWriteCharacter>
    1e30:	24 c0       	rjmp	.+72     	; 0x1e7a <LCDWriteInteger+0x88>
	}

	while(val)
	{
		str[i]=val%10;
    1e32:	eb 81       	ldd	r30, Y+3	; 0x03
    1e34:	fc 81       	ldd	r31, Y+4	; 0x04
    1e36:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e38:	98 89       	ldd	r25, Y+16	; 0x10
    1e3a:	2a e0       	ldi	r18, 0x0A	; 10
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	b9 01       	movw	r22, r18
    1e40:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__udivmodhi4>
    1e44:	ac 01       	movw	r20, r24
    1e46:	9f 01       	movw	r18, r30
    1e48:	22 0f       	add	r18, r18
    1e4a:	33 1f       	adc	r19, r19
    1e4c:	ce 01       	movw	r24, r28
    1e4e:	01 96       	adiw	r24, 0x01	; 1
    1e50:	82 0f       	add	r24, r18
    1e52:	93 1f       	adc	r25, r19
    1e54:	fc 01       	movw	r30, r24
    1e56:	34 96       	adiw	r30, 0x04	; 4
    1e58:	51 83       	std	Z+1, r21	; 0x01
    1e5a:	40 83       	st	Z, r20
		val=val/10;
    1e5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e5e:	98 89       	ldd	r25, Y+16	; 0x10
    1e60:	2a e0       	ldi	r18, 0x0A	; 10
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	b9 01       	movw	r22, r18
    1e66:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__udivmodhi4>
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	98 8b       	std	Y+16, r25	; 0x10
    1e6e:	8f 87       	std	Y+15, r24	; 0x0f
		i--;
    1e70:	8b 81       	ldd	r24, Y+3	; 0x03
    1e72:	9c 81       	ldd	r25, Y+4	; 0x04
    1e74:	01 97       	sbiw	r24, 0x01	; 1
    1e76:	9c 83       	std	Y+4, r25	; 0x04
    1e78:	8b 83       	std	Y+3, r24	; 0x03
	else
	{
		LCD_vidWriteCharacter(' ');
	}

	while(val)
    1e7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e7c:	98 89       	ldd	r25, Y+16	; 0x10
    1e7e:	00 97       	sbiw	r24, 0x00	; 0
    1e80:	c1 f6       	brne	.-80     	; 0x1e32 <LCDWriteInteger+0x40>
		str[i]=val%10;
		val=val/10;
		i--;
	}

	if(field_length==-1)
    1e82:	89 89       	ldd	r24, Y+17	; 0x11
    1e84:	9a 89       	ldd	r25, Y+18	; 0x12
    1e86:	af ef       	ldi	r26, 0xFF	; 255
    1e88:	8f 3f       	cpi	r24, 0xFF	; 255
    1e8a:	9a 07       	cpc	r25, r26
    1e8c:	b1 f4       	brne	.+44     	; 0x1eba <LCDWriteInteger+0xc8>
    1e8e:	05 c0       	rjmp	.+10     	; 0x1e9a <LCDWriteInteger+0xa8>
		while(str[j]==0) j++;
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	9a 81       	ldd	r25, Y+2	; 0x02
    1e94:	01 96       	adiw	r24, 0x01	; 1
    1e96:	9a 83       	std	Y+2, r25	; 0x02
    1e98:	89 83       	std	Y+1, r24	; 0x01
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
    1e9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9e:	9c 01       	movw	r18, r24
    1ea0:	22 0f       	add	r18, r18
    1ea2:	33 1f       	adc	r19, r19
    1ea4:	ce 01       	movw	r24, r28
    1ea6:	01 96       	adiw	r24, 0x01	; 1
    1ea8:	82 0f       	add	r24, r18
    1eaa:	93 1f       	adc	r25, r19
    1eac:	fc 01       	movw	r30, r24
    1eae:	34 96       	adiw	r30, 0x04	; 4
    1eb0:	80 81       	ld	r24, Z
    1eb2:	91 81       	ldd	r25, Z+1	; 0x01
    1eb4:	00 97       	sbiw	r24, 0x00	; 0
    1eb6:	61 f3       	breq	.-40     	; 0x1e90 <LCDWriteInteger+0x9e>
    1eb8:	08 c0       	rjmp	.+16     	; 0x1eca <LCDWriteInteger+0xd8>
	else
		j=5-field_length;
    1eba:	85 e0       	ldi	r24, 0x05	; 5
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	29 89       	ldd	r18, Y+17	; 0x11
    1ec0:	3a 89       	ldd	r19, Y+18	; 0x12
    1ec2:	82 1b       	sub	r24, r18
    1ec4:	93 0b       	sbc	r25, r19
    1ec6:	9a 83       	std	Y+2, r25	; 0x02
    1ec8:	89 83       	std	Y+1, r24	; 0x01

	for(i=j;i<5;i++)
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
    1ecc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ece:	9c 83       	std	Y+4, r25	; 0x04
    1ed0:	8b 83       	std	Y+3, r24	; 0x03
    1ed2:	15 c0       	rjmp	.+42     	; 0x1efe <LCDWriteInteger+0x10c>
	{
		LCD_vidWriteCharacter('0'+str[i]);
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed8:	9c 01       	movw	r18, r24
    1eda:	22 0f       	add	r18, r18
    1edc:	33 1f       	adc	r19, r19
    1ede:	ce 01       	movw	r24, r28
    1ee0:	01 96       	adiw	r24, 0x01	; 1
    1ee2:	82 0f       	add	r24, r18
    1ee4:	93 1f       	adc	r25, r19
    1ee6:	fc 01       	movw	r30, r24
    1ee8:	34 96       	adiw	r30, 0x04	; 4
    1eea:	80 81       	ld	r24, Z
    1eec:	91 81       	ldd	r25, Z+1	; 0x01
    1eee:	80 5d       	subi	r24, 0xD0	; 208
    1ef0:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <LCD_vidWriteCharacter>
	if(field_length==-1)
		while(str[j]==0) j++;
	else
		j=5-field_length;

	for(i=j;i<5;i++)
    1ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef8:	01 96       	adiw	r24, 0x01	; 1
    1efa:	9c 83       	std	Y+4, r25	; 0x04
    1efc:	8b 83       	std	Y+3, r24	; 0x03
    1efe:	8b 81       	ldd	r24, Y+3	; 0x03
    1f00:	9c 81       	ldd	r25, Y+4	; 0x04
    1f02:	85 30       	cpi	r24, 0x05	; 5
    1f04:	91 05       	cpc	r25, r1
    1f06:	30 f3       	brcs	.-52     	; 0x1ed4 <LCDWriteInteger+0xe2>
	{
		LCD_vidWriteCharacter('0'+str[i]);
	}
}
    1f08:	62 96       	adiw	r28, 0x12	; 18
    1f0a:	0f b6       	in	r0, 0x3f	; 63
    1f0c:	f8 94       	cli
    1f0e:	de bf       	out	0x3e, r29	; 62
    1f10:	0f be       	out	0x3f, r0	; 63
    1f12:	cd bf       	out	0x3d, r28	; 61
    1f14:	cf 91       	pop	r28
    1f16:	df 91       	pop	r29
    1f18:	08 95       	ret

00001f1a <vid_SeparateResult>:


/********************************************************/

void vid_SeparateResult(u32 u32Result , u8 * u8ArrayResult) {
    1f1a:	0f 93       	push	r16
    1f1c:	1f 93       	push	r17
    1f1e:	df 93       	push	r29
    1f20:	cf 93       	push	r28
    1f22:	00 d0       	rcall	.+0      	; 0x1f24 <vid_SeparateResult+0xa>
    1f24:	00 d0       	rcall	.+0      	; 0x1f26 <vid_SeparateResult+0xc>
    1f26:	00 d0       	rcall	.+0      	; 0x1f28 <vid_SeparateResult+0xe>
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
    1f2c:	69 83       	std	Y+1, r22	; 0x01
    1f2e:	7a 83       	std	Y+2, r23	; 0x02
    1f30:	8b 83       	std	Y+3, r24	; 0x03
    1f32:	9c 83       	std	Y+4, r25	; 0x04
    1f34:	5e 83       	std	Y+6, r21	; 0x06
    1f36:	4d 83       	std	Y+5, r20	; 0x05

	u8ArrayResult[0]= ( (u32Result / 10000) % 10 ) + 48 ;
    1f38:	89 81       	ldd	r24, Y+1	; 0x01
    1f3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3c:	ab 81       	ldd	r26, Y+3	; 0x03
    1f3e:	bc 81       	ldd	r27, Y+4	; 0x04
    1f40:	20 e1       	ldi	r18, 0x10	; 16
    1f42:	37 e2       	ldi	r19, 0x27	; 39
    1f44:	40 e0       	ldi	r20, 0x00	; 0
    1f46:	50 e0       	ldi	r21, 0x00	; 0
    1f48:	bc 01       	movw	r22, r24
    1f4a:	cd 01       	movw	r24, r26
    1f4c:	0e 94 91 11 	call	0x2322	; 0x2322 <__udivmodsi4>
    1f50:	da 01       	movw	r26, r20
    1f52:	c9 01       	movw	r24, r18
    1f54:	2a e0       	ldi	r18, 0x0A	; 10
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	40 e0       	ldi	r20, 0x00	; 0
    1f5a:	50 e0       	ldi	r21, 0x00	; 0
    1f5c:	bc 01       	movw	r22, r24
    1f5e:	cd 01       	movw	r24, r26
    1f60:	0e 94 91 11 	call	0x2322	; 0x2322 <__udivmodsi4>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	80 5d       	subi	r24, 0xD0	; 208
    1f6a:	ed 81       	ldd	r30, Y+5	; 0x05
    1f6c:	fe 81       	ldd	r31, Y+6	; 0x06
    1f6e:	80 83       	st	Z, r24
	u8ArrayResult[1]= ( (u32Result / 1000) % 10 ) + 48 ;
    1f70:	8d 81       	ldd	r24, Y+5	; 0x05
    1f72:	9e 81       	ldd	r25, Y+6	; 0x06
    1f74:	8c 01       	movw	r16, r24
    1f76:	0f 5f       	subi	r16, 0xFF	; 255
    1f78:	1f 4f       	sbci	r17, 0xFF	; 255
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
    1f7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7e:	ab 81       	ldd	r26, Y+3	; 0x03
    1f80:	bc 81       	ldd	r27, Y+4	; 0x04
    1f82:	28 ee       	ldi	r18, 0xE8	; 232
    1f84:	33 e0       	ldi	r19, 0x03	; 3
    1f86:	40 e0       	ldi	r20, 0x00	; 0
    1f88:	50 e0       	ldi	r21, 0x00	; 0
    1f8a:	bc 01       	movw	r22, r24
    1f8c:	cd 01       	movw	r24, r26
    1f8e:	0e 94 91 11 	call	0x2322	; 0x2322 <__udivmodsi4>
    1f92:	da 01       	movw	r26, r20
    1f94:	c9 01       	movw	r24, r18
    1f96:	2a e0       	ldi	r18, 0x0A	; 10
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	40 e0       	ldi	r20, 0x00	; 0
    1f9c:	50 e0       	ldi	r21, 0x00	; 0
    1f9e:	bc 01       	movw	r22, r24
    1fa0:	cd 01       	movw	r24, r26
    1fa2:	0e 94 91 11 	call	0x2322	; 0x2322 <__udivmodsi4>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	80 5d       	subi	r24, 0xD0	; 208
    1fac:	f8 01       	movw	r30, r16
    1fae:	80 83       	st	Z, r24
	u8ArrayResult[2]= ( (u32Result / 100) % 10 ) + 48 ;
    1fb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb4:	8c 01       	movw	r16, r24
    1fb6:	0e 5f       	subi	r16, 0xFE	; 254
    1fb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1fbe:	ab 81       	ldd	r26, Y+3	; 0x03
    1fc0:	bc 81       	ldd	r27, Y+4	; 0x04
    1fc2:	24 e6       	ldi	r18, 0x64	; 100
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	40 e0       	ldi	r20, 0x00	; 0
    1fc8:	50 e0       	ldi	r21, 0x00	; 0
    1fca:	bc 01       	movw	r22, r24
    1fcc:	cd 01       	movw	r24, r26
    1fce:	0e 94 91 11 	call	0x2322	; 0x2322 <__udivmodsi4>
    1fd2:	da 01       	movw	r26, r20
    1fd4:	c9 01       	movw	r24, r18
    1fd6:	2a e0       	ldi	r18, 0x0A	; 10
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	40 e0       	ldi	r20, 0x00	; 0
    1fdc:	50 e0       	ldi	r21, 0x00	; 0
    1fde:	bc 01       	movw	r22, r24
    1fe0:	cd 01       	movw	r24, r26
    1fe2:	0e 94 91 11 	call	0x2322	; 0x2322 <__udivmodsi4>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	80 5d       	subi	r24, 0xD0	; 208
    1fec:	f8 01       	movw	r30, r16
    1fee:	80 83       	st	Z, r24
	u8ArrayResult[3]= ( (u32Result / 10) % 10 ) + 48 ;
    1ff0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff4:	8c 01       	movw	r16, r24
    1ff6:	0d 5f       	subi	r16, 0xFD	; 253
    1ff8:	1f 4f       	sbci	r17, 0xFF	; 255
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffe:	ab 81       	ldd	r26, Y+3	; 0x03
    2000:	bc 81       	ldd	r27, Y+4	; 0x04
    2002:	2a e0       	ldi	r18, 0x0A	; 10
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	40 e0       	ldi	r20, 0x00	; 0
    2008:	50 e0       	ldi	r21, 0x00	; 0
    200a:	bc 01       	movw	r22, r24
    200c:	cd 01       	movw	r24, r26
    200e:	0e 94 91 11 	call	0x2322	; 0x2322 <__udivmodsi4>
    2012:	da 01       	movw	r26, r20
    2014:	c9 01       	movw	r24, r18
    2016:	2a e0       	ldi	r18, 0x0A	; 10
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	40 e0       	ldi	r20, 0x00	; 0
    201c:	50 e0       	ldi	r21, 0x00	; 0
    201e:	bc 01       	movw	r22, r24
    2020:	cd 01       	movw	r24, r26
    2022:	0e 94 91 11 	call	0x2322	; 0x2322 <__udivmodsi4>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	80 5d       	subi	r24, 0xD0	; 208
    202c:	f8 01       	movw	r30, r16
    202e:	80 83       	st	Z, r24
	u8ArrayResult[4]=   (u32Result  % 10 ) + 48 ;
    2030:	8d 81       	ldd	r24, Y+5	; 0x05
    2032:	9e 81       	ldd	r25, Y+6	; 0x06
    2034:	8c 01       	movw	r16, r24
    2036:	0c 5f       	subi	r16, 0xFC	; 252
    2038:	1f 4f       	sbci	r17, 0xFF	; 255
    203a:	89 81       	ldd	r24, Y+1	; 0x01
    203c:	9a 81       	ldd	r25, Y+2	; 0x02
    203e:	ab 81       	ldd	r26, Y+3	; 0x03
    2040:	bc 81       	ldd	r27, Y+4	; 0x04
    2042:	2a e0       	ldi	r18, 0x0A	; 10
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	40 e0       	ldi	r20, 0x00	; 0
    2048:	50 e0       	ldi	r21, 0x00	; 0
    204a:	bc 01       	movw	r22, r24
    204c:	cd 01       	movw	r24, r26
    204e:	0e 94 91 11 	call	0x2322	; 0x2322 <__udivmodsi4>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	80 5d       	subi	r24, 0xD0	; 208
    2058:	f8 01       	movw	r30, r16
    205a:	80 83       	st	Z, r24

}
    205c:	26 96       	adiw	r28, 0x06	; 6
    205e:	0f b6       	in	r0, 0x3f	; 63
    2060:	f8 94       	cli
    2062:	de bf       	out	0x3e, r29	; 62
    2064:	0f be       	out	0x3f, r0	; 63
    2066:	cd bf       	out	0x3d, r28	; 61
    2068:	cf 91       	pop	r28
    206a:	df 91       	pop	r29
    206c:	1f 91       	pop	r17
    206e:	0f 91       	pop	r16
    2070:	08 95       	ret

00002072 <Timer0_Initialize>:

#include "STD_Types.h"
#include"TIMER_Private.h"
#include "ADC_int.h"

void Timer0_Initialize(void){
    2072:	df 93       	push	r29
    2074:	cf 93       	push	r28
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62

	// Prescalar / 64
	// fast PWM
	TCCR0_REG = 0b01101011 ;
    207a:	e3 e5       	ldi	r30, 0x53	; 83
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	8b e6       	ldi	r24, 0x6B	; 107
    2080:	80 83       	st	Z, r24

	// 128 duty cycle 50 %
	OCR0_REG = 128 ;
    2082:	ec e5       	ldi	r30, 0x5C	; 92
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 e8       	ldi	r24, 0x80	; 128
    2088:	80 83       	st	Z, r24

	//OCR0_REG =  ADC_Read (0); ;

}
    208a:	cf 91       	pop	r28
    208c:	df 91       	pop	r29
    208e:	08 95       	ret

00002090 <Timer1_Initialize>:

#include "STD_Types.h"
#include"Timer_Private.h"


void Timer1_Initialize(void){
    2090:	df 93       	push	r29
    2092:	cf 93       	push	r28
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62

	// Normal Mode
	// Prescalar / 8

	TCCR1A_REG = 0;
    2098:	ef e4       	ldi	r30, 0x4F	; 79
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	10 82       	st	Z, r1
	TCCR1B_REG = 0x03 ;
    209e:	ee e4       	ldi	r30, 0x4E	; 78
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	83 e0       	ldi	r24, 0x03	; 3
    20a4:	80 83       	st	Z, r24

}
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	08 95       	ret

000020ac <u16Tim_GetCounterVal>:


u16 u16Tim_GetCounterVal(void){
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62

	return TCNT1_REG ;
    20b4:	ec e4       	ldi	r30, 0x4C	; 76
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	91 81       	ldd	r25, Z+1	; 0x01

}
    20bc:	cf 91       	pop	r28
    20be:	df 91       	pop	r29
    20c0:	08 95       	ret

000020c2 <Timer1_Reset>:

void Timer1_Reset(void){
    20c2:	df 93       	push	r29
    20c4:	cf 93       	push	r28
    20c6:	cd b7       	in	r28, 0x3d	; 61
    20c8:	de b7       	in	r29, 0x3e	; 62

	TCNT1_REG = 0 ;
    20ca:	ec e4       	ldi	r30, 0x4C	; 76
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	11 82       	std	Z+1, r1	; 0x01
    20d0:	10 82       	st	Z, r1
}
    20d2:	cf 91       	pop	r28
    20d4:	df 91       	pop	r29
    20d6:	08 95       	ret

000020d8 <main>:


u16 u16_Freq = 0 ;
u16 u16_Duty = 0 ;

void main(void) {
    20d8:	df 93       	push	r29
    20da:	cf 93       	push	r28
    20dc:	cd b7       	in	r28, 0x3d	; 61
    20de:	de b7       	in	r29, 0x3e	; 62
    20e0:	ae 97       	sbiw	r28, 0x2e	; 46
    20e2:	0f b6       	in	r0, 0x3f	; 63
    20e4:	f8 94       	cli
    20e6:	de bf       	out	0x3e, r29	; 62
    20e8:	0f be       	out	0x3f, r0	; 63
    20ea:	cd bf       	out	0x3d, r28	; 61

	u8 F[11] = "Frequency=" ;
    20ec:	ce 01       	movw	r24, r28
    20ee:	0f 96       	adiw	r24, 0x0f	; 15
    20f0:	9e a3       	std	Y+38, r25	; 0x26
    20f2:	8d a3       	std	Y+37, r24	; 0x25
    20f4:	e0 e6       	ldi	r30, 0x60	; 96
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	f8 a7       	std	Y+40, r31	; 0x28
    20fa:	ef a3       	std	Y+39, r30	; 0x27
    20fc:	fb e0       	ldi	r31, 0x0B	; 11
    20fe:	f9 a7       	std	Y+41, r31	; 0x29
    2100:	ef a1       	ldd	r30, Y+39	; 0x27
    2102:	f8 a5       	ldd	r31, Y+40	; 0x28
    2104:	00 80       	ld	r0, Z
    2106:	8f a1       	ldd	r24, Y+39	; 0x27
    2108:	98 a5       	ldd	r25, Y+40	; 0x28
    210a:	01 96       	adiw	r24, 0x01	; 1
    210c:	98 a7       	std	Y+40, r25	; 0x28
    210e:	8f a3       	std	Y+39, r24	; 0x27
    2110:	ed a1       	ldd	r30, Y+37	; 0x25
    2112:	fe a1       	ldd	r31, Y+38	; 0x26
    2114:	00 82       	st	Z, r0
    2116:	8d a1       	ldd	r24, Y+37	; 0x25
    2118:	9e a1       	ldd	r25, Y+38	; 0x26
    211a:	01 96       	adiw	r24, 0x01	; 1
    211c:	9e a3       	std	Y+38, r25	; 0x26
    211e:	8d a3       	std	Y+37, r24	; 0x25
    2120:	99 a5       	ldd	r25, Y+41	; 0x29
    2122:	91 50       	subi	r25, 0x01	; 1
    2124:	99 a7       	std	Y+41, r25	; 0x29
    2126:	e9 a5       	ldd	r30, Y+41	; 0x29
    2128:	ee 23       	and	r30, r30
    212a:	51 f7       	brne	.-44     	; 0x2100 <main+0x28>
	u8 D[11] = "DutyCycle=" ;
    212c:	ce 01       	movw	r24, r28
    212e:	4a 96       	adiw	r24, 0x1a	; 26
    2130:	9b a7       	std	Y+43, r25	; 0x2b
    2132:	8a a7       	std	Y+42, r24	; 0x2a
    2134:	eb e6       	ldi	r30, 0x6B	; 107
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	fd a7       	std	Y+45, r31	; 0x2d
    213a:	ec a7       	std	Y+44, r30	; 0x2c
    213c:	fb e0       	ldi	r31, 0x0B	; 11
    213e:	fe a7       	std	Y+46, r31	; 0x2e
    2140:	ec a5       	ldd	r30, Y+44	; 0x2c
    2142:	fd a5       	ldd	r31, Y+45	; 0x2d
    2144:	00 80       	ld	r0, Z
    2146:	8c a5       	ldd	r24, Y+44	; 0x2c
    2148:	9d a5       	ldd	r25, Y+45	; 0x2d
    214a:	01 96       	adiw	r24, 0x01	; 1
    214c:	9d a7       	std	Y+45, r25	; 0x2d
    214e:	8c a7       	std	Y+44, r24	; 0x2c
    2150:	ea a5       	ldd	r30, Y+42	; 0x2a
    2152:	fb a5       	ldd	r31, Y+43	; 0x2b
    2154:	00 82       	st	Z, r0
    2156:	8a a5       	ldd	r24, Y+42	; 0x2a
    2158:	9b a5       	ldd	r25, Y+43	; 0x2b
    215a:	01 96       	adiw	r24, 0x01	; 1
    215c:	9b a7       	std	Y+43, r25	; 0x2b
    215e:	8a a7       	std	Y+42, r24	; 0x2a
    2160:	9e a5       	ldd	r25, Y+46	; 0x2e
    2162:	91 50       	subi	r25, 0x01	; 1
    2164:	9e a7       	std	Y+46, r25	; 0x2e
    2166:	ee a5       	ldd	r30, Y+46	; 0x2e
    2168:	ee 23       	and	r30, r30
    216a:	51 f7       	brne	.-44     	; 0x2140 <main+0x68>


	/*****************************************************************/

	// SET  OCO >> PORTB , PIN 3 OUT_PUT
	DIO_SetPinDirection (PORTB_DIO , PIN3 , OUTPUT );
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	63 e0       	ldi	r22, 0x03	; 3
    2170:	41 e0       	ldi	r20, 0x01	; 1
    2172:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_SetPinDirection>

 	// External Interrupt INT0 >> PORTD , PIN 2
	DIO_SetPinDirection (PORTD_DIO , PIN2 , INPUT );
    2176:	83 e0       	ldi	r24, 0x03	; 3
    2178:	62 e0       	ldi	r22, 0x02	; 2
    217a:	40 e0       	ldi	r20, 0x00	; 0
    217c:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_SetPinDirection>
	DIO_SetPinValue (PORTD_DIO , PIN2 , HIGH );
    2180:	83 e0       	ldi	r24, 0x03	; 3
    2182:	62 e0       	ldi	r22, 0x02	; 2
    2184:	41 e0       	ldi	r20, 0x01	; 1
    2186:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_SetPinValue>

	// ADC >> A0
	DIO_SetPinDirection (PORTA_DIO , PIN0 , INPUT );
    218a:	80 e0       	ldi	r24, 0x00	; 0
    218c:	60 e0       	ldi	r22, 0x00	; 0
    218e:	40 e0       	ldi	r20, 0x00	; 0
    2190:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_SetPinDirection>
	DIO_SetPinValue (PORTA_DIO , PIN0 , HIGH );
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	60 e0       	ldi	r22, 0x00	; 0
    2198:	41 e0       	ldi	r20, 0x01	; 1
    219a:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_SetPinValue>

	/****************************************************************/

	/******************  Preipherals Initialization *****************/

 	LCD_vidInitialize();
    219e:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <LCD_vidInitialize>

	ADC_Init () ;
    21a2:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_Init>

	Timer0_Initialize();
    21a6:	0e 94 39 10 	call	0x2072	; 0x2072 <Timer0_Initialize>

	Timer1_Initialize();
    21aa:	0e 94 48 10 	call	0x2090	; 0x2090 <Timer1_Initialize>

	EXT_INT_Initialize();
    21ae:	0e 94 03 09 	call	0x1206	; 0x1206 <EXT_INT_Initialize>

	while(1){

		//OCR0_REG =  ADC_Read (0); ;

		vid_EXTINT_GetIcu(& u16_Freq ,& u16_Duty) ;
    21b2:	85 e8       	ldi	r24, 0x85	; 133
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	27 e8       	ldi	r18, 0x87	; 135
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	b9 01       	movw	r22, r18
    21bc:	0e 94 74 09 	call	0x12e8	; 0x12e8 <vid_EXTINT_GetIcu>

		 Gotoxy (1,1) ;
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	61 e0       	ldi	r22, 0x01	; 1
    21c4:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <Gotoxy>
		 LCD_vidWriteString (F,11) ;
    21c8:	ce 01       	movw	r24, r28
    21ca:	0f 96       	adiw	r24, 0x0f	; 15
    21cc:	6b e0       	ldi	r22, 0x0B	; 11
    21ce:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <LCD_vidWriteString>
		 Gotoxy (12,1) ;
    21d2:	8c e0       	ldi	r24, 0x0C	; 12
    21d4:	61 e0       	ldi	r22, 0x01	; 1
    21d6:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <Gotoxy>
		LCDWriteInteger( u16_Freq,4) ;
    21da:	80 91 85 00 	lds	r24, 0x0085
    21de:	90 91 86 00 	lds	r25, 0x0086
    21e2:	64 e0       	ldi	r22, 0x04	; 4
    21e4:	70 e0       	ldi	r23, 0x00	; 0
    21e6:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <LCDWriteInteger>

		 Gotoxy (1,2) ;
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	62 e0       	ldi	r22, 0x02	; 2
    21ee:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <Gotoxy>
	     LCD_vidWriteString (D,11) ;
    21f2:	ce 01       	movw	r24, r28
    21f4:	4a 96       	adiw	r24, 0x1a	; 26
    21f6:	6b e0       	ldi	r22, 0x0B	; 11
    21f8:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <LCD_vidWriteString>
	     Gotoxy (12,2) ;
    21fc:	8c e0       	ldi	r24, 0x0C	; 12
    21fe:	62 e0       	ldi	r22, 0x02	; 2
    2200:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <Gotoxy>
	     LCDWriteInteger( u16_Duty,4) ;
    2204:	80 91 87 00 	lds	r24, 0x0087
    2208:	90 91 88 00 	lds	r25, 0x0088
    220c:	64 e0       	ldi	r22, 0x04	; 4
    220e:	70 e0       	ldi	r23, 0x00	; 0
    2210:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <LCDWriteInteger>
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	aa e7       	ldi	r26, 0x7A	; 122
    221a:	b4 e4       	ldi	r27, 0x44	; 68
    221c:	8b 87       	std	Y+11, r24	; 0x0b
    221e:	9c 87       	std	Y+12, r25	; 0x0c
    2220:	ad 87       	std	Y+13, r26	; 0x0d
    2222:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2224:	6b 85       	ldd	r22, Y+11	; 0x0b
    2226:	7c 85       	ldd	r23, Y+12	; 0x0c
    2228:	8d 85       	ldd	r24, Y+13	; 0x0d
    222a:	9e 85       	ldd	r25, Y+14	; 0x0e
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e8       	ldi	r19, 0x80	; 128
    2230:	4b e3       	ldi	r20, 0x3B	; 59
    2232:	55 e4       	ldi	r21, 0x45	; 69
    2234:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	8f 83       	std	Y+7, r24	; 0x07
    223e:	98 87       	std	Y+8, r25	; 0x08
    2240:	a9 87       	std	Y+9, r26	; 0x09
    2242:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2244:	6f 81       	ldd	r22, Y+7	; 0x07
    2246:	78 85       	ldd	r23, Y+8	; 0x08
    2248:	89 85       	ldd	r24, Y+9	; 0x09
    224a:	9a 85       	ldd	r25, Y+10	; 0x0a
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e8       	ldi	r20, 0x80	; 128
    2252:	5f e3       	ldi	r21, 0x3F	; 63
    2254:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2258:	88 23       	and	r24, r24
    225a:	2c f4       	brge	.+10     	; 0x2266 <main+0x18e>
		__ticks = 1;
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	9e 83       	std	Y+6, r25	; 0x06
    2262:	8d 83       	std	Y+5, r24	; 0x05
    2264:	3f c0       	rjmp	.+126    	; 0x22e4 <main+0x20c>
	else if (__tmp > 65535)
    2266:	6f 81       	ldd	r22, Y+7	; 0x07
    2268:	78 85       	ldd	r23, Y+8	; 0x08
    226a:	89 85       	ldd	r24, Y+9	; 0x09
    226c:	9a 85       	ldd	r25, Y+10	; 0x0a
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	3f ef       	ldi	r19, 0xFF	; 255
    2272:	4f e7       	ldi	r20, 0x7F	; 127
    2274:	57 e4       	ldi	r21, 0x47	; 71
    2276:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    227a:	18 16       	cp	r1, r24
    227c:	4c f5       	brge	.+82     	; 0x22d0 <main+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    227e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2280:	7c 85       	ldd	r23, Y+12	; 0x0c
    2282:	8d 85       	ldd	r24, Y+13	; 0x0d
    2284:	9e 85       	ldd	r25, Y+14	; 0x0e
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	40 e2       	ldi	r20, 0x20	; 32
    228c:	51 e4       	ldi	r21, 0x41	; 65
    228e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	bc 01       	movw	r22, r24
    2298:	cd 01       	movw	r24, r26
    229a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	9e 83       	std	Y+6, r25	; 0x06
    22a4:	8d 83       	std	Y+5, r24	; 0x05
    22a6:	0f c0       	rjmp	.+30     	; 0x22c6 <main+0x1ee>
    22a8:	8c e2       	ldi	r24, 0x2C	; 44
    22aa:	91 e0       	ldi	r25, 0x01	; 1
    22ac:	9c 83       	std	Y+4, r25	; 0x04
    22ae:	8b 83       	std	Y+3, r24	; 0x03
    22b0:	8b 81       	ldd	r24, Y+3	; 0x03
    22b2:	9c 81       	ldd	r25, Y+4	; 0x04
    22b4:	01 97       	sbiw	r24, 0x01	; 1
    22b6:	f1 f7       	brne	.-4      	; 0x22b4 <main+0x1dc>
    22b8:	9c 83       	std	Y+4, r25	; 0x04
    22ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22bc:	8d 81       	ldd	r24, Y+5	; 0x05
    22be:	9e 81       	ldd	r25, Y+6	; 0x06
    22c0:	01 97       	sbiw	r24, 0x01	; 1
    22c2:	9e 83       	std	Y+6, r25	; 0x06
    22c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c6:	8d 81       	ldd	r24, Y+5	; 0x05
    22c8:	9e 81       	ldd	r25, Y+6	; 0x06
    22ca:	00 97       	sbiw	r24, 0x00	; 0
    22cc:	69 f7       	brne	.-38     	; 0x22a8 <main+0x1d0>
    22ce:	71 cf       	rjmp	.-286    	; 0x21b2 <main+0xda>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d0:	6f 81       	ldd	r22, Y+7	; 0x07
    22d2:	78 85       	ldd	r23, Y+8	; 0x08
    22d4:	89 85       	ldd	r24, Y+9	; 0x09
    22d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	9e 83       	std	Y+6, r25	; 0x06
    22e2:	8d 83       	std	Y+5, r24	; 0x05
    22e4:	8d 81       	ldd	r24, Y+5	; 0x05
    22e6:	9e 81       	ldd	r25, Y+6	; 0x06
    22e8:	9a 83       	std	Y+2, r25	; 0x02
    22ea:	89 83       	std	Y+1, r24	; 0x01
    22ec:	89 81       	ldd	r24, Y+1	; 0x01
    22ee:	9a 81       	ldd	r25, Y+2	; 0x02
    22f0:	01 97       	sbiw	r24, 0x01	; 1
    22f2:	f1 f7       	brne	.-4      	; 0x22f0 <main+0x218>
    22f4:	9a 83       	std	Y+2, r25	; 0x02
    22f6:	89 83       	std	Y+1, r24	; 0x01
    22f8:	5c cf       	rjmp	.-328    	; 0x21b2 <main+0xda>

000022fa <__udivmodhi4>:
    22fa:	aa 1b       	sub	r26, r26
    22fc:	bb 1b       	sub	r27, r27
    22fe:	51 e1       	ldi	r21, 0x11	; 17
    2300:	07 c0       	rjmp	.+14     	; 0x2310 <__udivmodhi4_ep>

00002302 <__udivmodhi4_loop>:
    2302:	aa 1f       	adc	r26, r26
    2304:	bb 1f       	adc	r27, r27
    2306:	a6 17       	cp	r26, r22
    2308:	b7 07       	cpc	r27, r23
    230a:	10 f0       	brcs	.+4      	; 0x2310 <__udivmodhi4_ep>
    230c:	a6 1b       	sub	r26, r22
    230e:	b7 0b       	sbc	r27, r23

00002310 <__udivmodhi4_ep>:
    2310:	88 1f       	adc	r24, r24
    2312:	99 1f       	adc	r25, r25
    2314:	5a 95       	dec	r21
    2316:	a9 f7       	brne	.-22     	; 0x2302 <__udivmodhi4_loop>
    2318:	80 95       	com	r24
    231a:	90 95       	com	r25
    231c:	bc 01       	movw	r22, r24
    231e:	cd 01       	movw	r24, r26
    2320:	08 95       	ret

00002322 <__udivmodsi4>:
    2322:	a1 e2       	ldi	r26, 0x21	; 33
    2324:	1a 2e       	mov	r1, r26
    2326:	aa 1b       	sub	r26, r26
    2328:	bb 1b       	sub	r27, r27
    232a:	fd 01       	movw	r30, r26
    232c:	0d c0       	rjmp	.+26     	; 0x2348 <__udivmodsi4_ep>

0000232e <__udivmodsi4_loop>:
    232e:	aa 1f       	adc	r26, r26
    2330:	bb 1f       	adc	r27, r27
    2332:	ee 1f       	adc	r30, r30
    2334:	ff 1f       	adc	r31, r31
    2336:	a2 17       	cp	r26, r18
    2338:	b3 07       	cpc	r27, r19
    233a:	e4 07       	cpc	r30, r20
    233c:	f5 07       	cpc	r31, r21
    233e:	20 f0       	brcs	.+8      	; 0x2348 <__udivmodsi4_ep>
    2340:	a2 1b       	sub	r26, r18
    2342:	b3 0b       	sbc	r27, r19
    2344:	e4 0b       	sbc	r30, r20
    2346:	f5 0b       	sbc	r31, r21

00002348 <__udivmodsi4_ep>:
    2348:	66 1f       	adc	r22, r22
    234a:	77 1f       	adc	r23, r23
    234c:	88 1f       	adc	r24, r24
    234e:	99 1f       	adc	r25, r25
    2350:	1a 94       	dec	r1
    2352:	69 f7       	brne	.-38     	; 0x232e <__udivmodsi4_loop>
    2354:	60 95       	com	r22
    2356:	70 95       	com	r23
    2358:	80 95       	com	r24
    235a:	90 95       	com	r25
    235c:	9b 01       	movw	r18, r22
    235e:	ac 01       	movw	r20, r24
    2360:	bd 01       	movw	r22, r26
    2362:	cf 01       	movw	r24, r30
    2364:	08 95       	ret

00002366 <__prologue_saves__>:
    2366:	2f 92       	push	r2
    2368:	3f 92       	push	r3
    236a:	4f 92       	push	r4
    236c:	5f 92       	push	r5
    236e:	6f 92       	push	r6
    2370:	7f 92       	push	r7
    2372:	8f 92       	push	r8
    2374:	9f 92       	push	r9
    2376:	af 92       	push	r10
    2378:	bf 92       	push	r11
    237a:	cf 92       	push	r12
    237c:	df 92       	push	r13
    237e:	ef 92       	push	r14
    2380:	ff 92       	push	r15
    2382:	0f 93       	push	r16
    2384:	1f 93       	push	r17
    2386:	cf 93       	push	r28
    2388:	df 93       	push	r29
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    238e:	ca 1b       	sub	r28, r26
    2390:	db 0b       	sbc	r29, r27
    2392:	0f b6       	in	r0, 0x3f	; 63
    2394:	f8 94       	cli
    2396:	de bf       	out	0x3e, r29	; 62
    2398:	0f be       	out	0x3f, r0	; 63
    239a:	cd bf       	out	0x3d, r28	; 61
    239c:	09 94       	ijmp

0000239e <__epilogue_restores__>:
    239e:	2a 88       	ldd	r2, Y+18	; 0x12
    23a0:	39 88       	ldd	r3, Y+17	; 0x11
    23a2:	48 88       	ldd	r4, Y+16	; 0x10
    23a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    23a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    23a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    23aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    23ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    23ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    23b0:	b9 84       	ldd	r11, Y+9	; 0x09
    23b2:	c8 84       	ldd	r12, Y+8	; 0x08
    23b4:	df 80       	ldd	r13, Y+7	; 0x07
    23b6:	ee 80       	ldd	r14, Y+6	; 0x06
    23b8:	fd 80       	ldd	r15, Y+5	; 0x05
    23ba:	0c 81       	ldd	r16, Y+4	; 0x04
    23bc:	1b 81       	ldd	r17, Y+3	; 0x03
    23be:	aa 81       	ldd	r26, Y+2	; 0x02
    23c0:	b9 81       	ldd	r27, Y+1	; 0x01
    23c2:	ce 0f       	add	r28, r30
    23c4:	d1 1d       	adc	r29, r1
    23c6:	0f b6       	in	r0, 0x3f	; 63
    23c8:	f8 94       	cli
    23ca:	de bf       	out	0x3e, r29	; 62
    23cc:	0f be       	out	0x3f, r0	; 63
    23ce:	cd bf       	out	0x3d, r28	; 61
    23d0:	ed 01       	movw	r28, r26
    23d2:	08 95       	ret

000023d4 <_exit>:
    23d4:	f8 94       	cli

000023d6 <__stop_program>:
    23d6:	ff cf       	rjmp	.-2      	; 0x23d6 <__stop_program>
