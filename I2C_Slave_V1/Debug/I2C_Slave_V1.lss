
I2C_Slave_V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000148  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000003a8  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000032f  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 85 00 	call	0x10a	; 0x10a <main>
  64:	0c 94 a2 00 	jmp	0x144	; 0x144 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <TWI_InitSlave>:
#include "STD_Types.h"
#include "I2C_private.h"

/********************************************************/

void TWI_InitSlave (void) {
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	TWAR_REG = u8_SlaveAddress ;     // set slave address
  74:	e2 e2       	ldi	r30, 0x22	; 34
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	80 e2       	ldi	r24, 0x20	; 32
  7a:	80 83       	st	Z, r24
	TWCR_REG |= (1<<TWEA) | (1<<TWEN) | (0<<TWSTA) | (0<<TWST0) ;
  7c:	a6 e5       	ldi	r26, 0x56	; 86
  7e:	b0 e0       	ldi	r27, 0x00	; 0
  80:	e6 e5       	ldi	r30, 0x56	; 86
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	84 64       	ori	r24, 0x44	; 68
  88:	8c 93       	st	X, r24
}
  8a:	cf 91       	pop	r28
  8c:	df 91       	pop	r29
  8e:	08 95       	ret

00000090 <TWI_MatchAdrsRead>:

/********************************************************/

void TWI_MatchAdrsRead (void) {
  90:	df 93       	push	r29
  92:	cf 93       	push	r28
  94:	0f 92       	push	r0
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	while ( ( TWSR_REG & 0xF8 ) != 0x60 ) ;
  9a:	e1 e2       	ldi	r30, 0x21	; 33
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	88 2f       	mov	r24, r24
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	88 7f       	andi	r24, 0xF8	; 248
  a6:	90 70       	andi	r25, 0x00	; 0
  a8:	80 36       	cpi	r24, 0x60	; 96
  aa:	91 05       	cpc	r25, r1
  ac:	b1 f7       	brne	.-20     	; 0x9a <TWI_MatchAdrsRead+0xa>
	TWCR_REG |= (1<<TWEA) | (1<<TWEN) | (1<<TWINT)   ;
  ae:	a6 e5       	ldi	r26, 0x56	; 86
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	e6 e5       	ldi	r30, 0x56	; 86
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	84 6c       	ori	r24, 0xC4	; 196
  ba:	8c 93       	st	X, r24
	while (!TWCR_REG & (1<<TWINT)) ;
  bc:	e6 e5       	ldi	r30, 0x56	; 86
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z

}
  c2:	0f 90       	pop	r0
  c4:	cf 91       	pop	r28
  c6:	df 91       	pop	r29
  c8:	08 95       	ret

000000ca <TWI_SlaveRead>:

/********************************************************/

u8 TWI_SlaveRead (void) {
  ca:	df 93       	push	r29
  cc:	cf 93       	push	r28
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62

	TWCR_REG |= (1<<TWINT) | (1<<TWEA) | (1<<TWEN) ;
  d2:	a6 e5       	ldi	r26, 0x56	; 86
  d4:	b0 e0       	ldi	r27, 0x00	; 0
  d6:	e6 e5       	ldi	r30, 0x56	; 86
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	84 6c       	ori	r24, 0xC4	; 196
  de:	8c 93       	st	X, r24
	while (!(TWCR_REG & (1<<TWINT))) ;
  e0:	e6 e5       	ldi	r30, 0x56	; 86
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	88 23       	and	r24, r24
  e8:	dc f7       	brge	.-10     	; 0xe0 <TWI_SlaveRead+0x16>
	while ( ( TWSR_REG & 0xF8 ) != 0x80 ) ;
  ea:	e1 e2       	ldi	r30, 0x21	; 33
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	88 2f       	mov	r24, r24
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	88 7f       	andi	r24, 0xF8	; 248
  f6:	90 70       	andi	r25, 0x00	; 0
  f8:	80 38       	cpi	r24, 0x80	; 128
  fa:	91 05       	cpc	r25, r1
  fc:	b1 f7       	brne	.-20     	; 0xea <TWI_SlaveRead+0x20>
	return TWDR_REG ;
  fe:	e3 e2       	ldi	r30, 0x23	; 35
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
}
 104:	cf 91       	pop	r28
 106:	df 91       	pop	r29
 108:	08 95       	ret

0000010a <main>:





void main(void){
 10a:	df 93       	push	r29
 10c:	cf 93       	push	r28
 10e:	0f 92       	push	r0
 110:	cd b7       	in	r28, 0x3d	; 61
 112:	de b7       	in	r29, 0x3e	; 62

	u8 Read = 0 ;
 114:	19 82       	std	Y+1, r1	; 0x01

	DDRA = 0x01 ;
 116:	ea e3       	ldi	r30, 0x3A	; 58
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	80 83       	st	Z, r24


	TWI_InitSlave () ;
 11e:	0e 94 36 00 	call	0x6c	; 0x6c <TWI_InitSlave>



	while(1){

		TWI_MatchAdrsRead () ;
 122:	0e 94 48 00 	call	0x90	; 0x90 <TWI_MatchAdrsRead>

		Read = TWI_SlaveRead() ;
 126:	0e 94 65 00 	call	0xca	; 0xca <TWI_SlaveRead>
 12a:	89 83       	std	Y+1, r24	; 0x01

		if ( Read == 't') {
 12c:	89 81       	ldd	r24, Y+1	; 0x01
 12e:	84 37       	cpi	r24, 0x74	; 116
 130:	c1 f7       	brne	.-16     	; 0x122 <main+0x18>

			 TOG_BIT(PORTA , 0 ) ;
 132:	ab e3       	ldi	r26, 0x3B	; 59
 134:	b0 e0       	ldi	r27, 0x00	; 0
 136:	eb e3       	ldi	r30, 0x3B	; 59
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	90 81       	ld	r25, Z
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	89 27       	eor	r24, r25
 140:	8c 93       	st	X, r24
 142:	ef cf       	rjmp	.-34     	; 0x122 <main+0x18>

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
