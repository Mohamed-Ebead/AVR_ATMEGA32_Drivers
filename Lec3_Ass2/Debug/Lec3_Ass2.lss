
Lec3_Ass2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000022f6  0000236a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001218  00000000  00000000  00002374  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000008ac  00000000  00000000  0000358c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00003e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00003f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000040e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00005d31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00006c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000079cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00007b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00007db9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00008587  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ef       	ldi	r30, 0xF6	; 246
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 b1 08 	call	0x1162	; 0x1162 <main>
      7a:	0c 94 79 11 	jmp	0x22f2	; 0x22f2 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 42 11 	jmp	0x2284	; 0x2284 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 5e 11 	jmp	0x22bc	; 0x22bc <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 4e 11 	jmp	0x229c	; 0x229c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 6a 11 	jmp	0x22d4	; 0x22d4 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 4e 11 	jmp	0x229c	; 0x229c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 6a 11 	jmp	0x22d4	; 0x22d4 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 42 11 	jmp	0x2284	; 0x2284 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 5e 11 	jmp	0x22bc	; 0x22bc <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 4e 11 	jmp	0x229c	; 0x229c <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 6a 11 	jmp	0x22d4	; 0x22d4 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 4e 11 	jmp	0x229c	; 0x229c <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 6a 11 	jmp	0x22d4	; 0x22d4 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 4e 11 	jmp	0x229c	; 0x229c <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 6a 11 	jmp	0x22d4	; 0x22d4 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 52 11 	jmp	0x22a4	; 0x22a4 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 6e 11 	jmp	0x22dc	; 0x22dc <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_SetPinValue>:
#include "DIO_int.h"
#include "DIO_reg.h"

/* IO Pins */
void DIO_SetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	27 97       	sbiw	r28, 0x07	; 7
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	89 83       	std	Y+1, r24	; 0x01
     b4c:	6a 83       	std	Y+2, r22	; 0x02
     b4e:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
     b50:	89 81       	ldd	r24, Y+1	; 0x01
     b52:	84 30       	cpi	r24, 0x04	; 4
     b54:	08 f0       	brcs	.+2      	; 0xb58 <DIO_SetPinValue+0x22>
     b56:	ee c0       	rjmp	.+476    	; 0xd34 <DIO_SetPinValue+0x1fe>
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	88 30       	cpi	r24, 0x08	; 8
     b5c:	08 f0       	brcs	.+2      	; 0xb60 <DIO_SetPinValue+0x2a>
     b5e:	ea c0       	rjmp	.+468    	; 0xd34 <DIO_SetPinValue+0x1fe>
	{
		if (u8PinValCopy == HIGH)
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	81 30       	cpi	r24, 0x01	; 1
     b64:	09 f0       	breq	.+2      	; 0xb68 <DIO_SetPinValue+0x32>
     b66:	6f c0       	rjmp	.+222    	; 0xc46 <DIO_SetPinValue+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	3f 83       	std	Y+7, r19	; 0x07
     b70:	2e 83       	std	Y+6, r18	; 0x06
     b72:	8e 81       	ldd	r24, Y+6	; 0x06
     b74:	9f 81       	ldd	r25, Y+7	; 0x07
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	91 05       	cpc	r25, r1
     b7a:	49 f1       	breq	.+82     	; 0xbce <DIO_SetPinValue+0x98>
     b7c:	2e 81       	ldd	r18, Y+6	; 0x06
     b7e:	3f 81       	ldd	r19, Y+7	; 0x07
     b80:	22 30       	cpi	r18, 0x02	; 2
     b82:	31 05       	cpc	r19, r1
     b84:	2c f4       	brge	.+10     	; 0xb90 <DIO_SetPinValue+0x5a>
     b86:	8e 81       	ldd	r24, Y+6	; 0x06
     b88:	9f 81       	ldd	r25, Y+7	; 0x07
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	61 f0       	breq	.+24     	; 0xba6 <DIO_SetPinValue+0x70>
     b8e:	d2 c0       	rjmp	.+420    	; 0xd34 <DIO_SetPinValue+0x1fe>
     b90:	2e 81       	ldd	r18, Y+6	; 0x06
     b92:	3f 81       	ldd	r19, Y+7	; 0x07
     b94:	22 30       	cpi	r18, 0x02	; 2
     b96:	31 05       	cpc	r19, r1
     b98:	71 f1       	breq	.+92     	; 0xbf6 <DIO_SetPinValue+0xc0>
     b9a:	8e 81       	ldd	r24, Y+6	; 0x06
     b9c:	9f 81       	ldd	r25, Y+7	; 0x07
     b9e:	83 30       	cpi	r24, 0x03	; 3
     ba0:	91 05       	cpc	r25, r1
     ba2:	e9 f1       	breq	.+122    	; 0xc1e <DIO_SetPinValue+0xe8>
     ba4:	c7 c0       	rjmp	.+398    	; 0xd34 <DIO_SetPinValue+0x1fe>
			{
				case PORTA: SET_BIT(PORTA_Register,u8PinIdCopy); break;
     ba6:	ab e3       	ldi	r26, 0x3B	; 59
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	eb e3       	ldi	r30, 0x3B	; 59
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	48 2f       	mov	r20, r24
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	02 2e       	mov	r0, r18
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <DIO_SetPinValue+0x8e>
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	0a 94       	dec	r0
     bc6:	e2 f7       	brpl	.-8      	; 0xbc0 <DIO_SetPinValue+0x8a>
     bc8:	84 2b       	or	r24, r20
     bca:	8c 93       	st	X, r24
     bcc:	b3 c0       	rjmp	.+358    	; 0xd34 <DIO_SetPinValue+0x1fe>
				case PORTB: SET_BIT(PORTB_Register,u8PinIdCopy); break;
     bce:	a8 e3       	ldi	r26, 0x38	; 56
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e8 e3       	ldi	r30, 0x38	; 56
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	48 2f       	mov	r20, r24
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	28 2f       	mov	r18, r24
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	02 2e       	mov	r0, r18
     be6:	02 c0       	rjmp	.+4      	; 0xbec <DIO_SetPinValue+0xb6>
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	0a 94       	dec	r0
     bee:	e2 f7       	brpl	.-8      	; 0xbe8 <DIO_SetPinValue+0xb2>
     bf0:	84 2b       	or	r24, r20
     bf2:	8c 93       	st	X, r24
     bf4:	9f c0       	rjmp	.+318    	; 0xd34 <DIO_SetPinValue+0x1fe>
				case PORTC: SET_BIT(PORTC_Register,u8PinIdCopy); break;
     bf6:	a5 e3       	ldi	r26, 0x35	; 53
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e5 e3       	ldi	r30, 0x35	; 53
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	48 2f       	mov	r20, r24
     c02:	8a 81       	ldd	r24, Y+2	; 0x02
     c04:	28 2f       	mov	r18, r24
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	02 2e       	mov	r0, r18
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <DIO_SetPinValue+0xde>
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	0a 94       	dec	r0
     c16:	e2 f7       	brpl	.-8      	; 0xc10 <DIO_SetPinValue+0xda>
     c18:	84 2b       	or	r24, r20
     c1a:	8c 93       	st	X, r24
     c1c:	8b c0       	rjmp	.+278    	; 0xd34 <DIO_SetPinValue+0x1fe>
				case PORTD: SET_BIT(PORTD_Register,u8PinIdCopy); break;
     c1e:	a2 e3       	ldi	r26, 0x32	; 50
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e2 e3       	ldi	r30, 0x32	; 50
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	48 2f       	mov	r20, r24
     c2a:	8a 81       	ldd	r24, Y+2	; 0x02
     c2c:	28 2f       	mov	r18, r24
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	02 2e       	mov	r0, r18
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <DIO_SetPinValue+0x106>
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	0a 94       	dec	r0
     c3e:	e2 f7       	brpl	.-8      	; 0xc38 <DIO_SetPinValue+0x102>
     c40:	84 2b       	or	r24, r20
     c42:	8c 93       	st	X, r24
     c44:	77 c0       	rjmp	.+238    	; 0xd34 <DIO_SetPinValue+0x1fe>
			}
		
		}
		
		else if (u8PinValCopy == LOW)
     c46:	8b 81       	ldd	r24, Y+3	; 0x03
     c48:	88 23       	and	r24, r24
     c4a:	09 f0       	breq	.+2      	; 0xc4e <DIO_SetPinValue+0x118>
     c4c:	73 c0       	rjmp	.+230    	; 0xd34 <DIO_SetPinValue+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	28 2f       	mov	r18, r24
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	3d 83       	std	Y+5, r19	; 0x05
     c56:	2c 83       	std	Y+4, r18	; 0x04
     c58:	8c 81       	ldd	r24, Y+4	; 0x04
     c5a:	9d 81       	ldd	r25, Y+5	; 0x05
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	91 05       	cpc	r25, r1
     c60:	59 f1       	breq	.+86     	; 0xcb8 <DIO_SetPinValue+0x182>
     c62:	2c 81       	ldd	r18, Y+4	; 0x04
     c64:	3d 81       	ldd	r19, Y+5	; 0x05
     c66:	22 30       	cpi	r18, 0x02	; 2
     c68:	31 05       	cpc	r19, r1
     c6a:	2c f4       	brge	.+10     	; 0xc76 <DIO_SetPinValue+0x140>
     c6c:	8c 81       	ldd	r24, Y+4	; 0x04
     c6e:	9d 81       	ldd	r25, Y+5	; 0x05
     c70:	00 97       	sbiw	r24, 0x00	; 0
     c72:	69 f0       	breq	.+26     	; 0xc8e <DIO_SetPinValue+0x158>
     c74:	5f c0       	rjmp	.+190    	; 0xd34 <DIO_SetPinValue+0x1fe>
     c76:	2c 81       	ldd	r18, Y+4	; 0x04
     c78:	3d 81       	ldd	r19, Y+5	; 0x05
     c7a:	22 30       	cpi	r18, 0x02	; 2
     c7c:	31 05       	cpc	r19, r1
     c7e:	89 f1       	breq	.+98     	; 0xce2 <DIO_SetPinValue+0x1ac>
     c80:	8c 81       	ldd	r24, Y+4	; 0x04
     c82:	9d 81       	ldd	r25, Y+5	; 0x05
     c84:	83 30       	cpi	r24, 0x03	; 3
     c86:	91 05       	cpc	r25, r1
     c88:	09 f4       	brne	.+2      	; 0xc8c <DIO_SetPinValue+0x156>
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <DIO_SetPinValue+0x1d6>
     c8c:	53 c0       	rjmp	.+166    	; 0xd34 <DIO_SetPinValue+0x1fe>
			{
				case PORTA: CLR_BIT(PORTA_Register,u8PinIdCopy); break;
     c8e:	ab e3       	ldi	r26, 0x3B	; 59
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	eb e3       	ldi	r30, 0x3B	; 59
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	48 2f       	mov	r20, r24
     c9a:	8a 81       	ldd	r24, Y+2	; 0x02
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	02 2e       	mov	r0, r18
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <DIO_SetPinValue+0x176>
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	0a 94       	dec	r0
     cae:	e2 f7       	brpl	.-8      	; 0xca8 <DIO_SetPinValue+0x172>
     cb0:	80 95       	com	r24
     cb2:	84 23       	and	r24, r20
     cb4:	8c 93       	st	X, r24
     cb6:	3e c0       	rjmp	.+124    	; 0xd34 <DIO_SetPinValue+0x1fe>
				case PORTB: CLR_BIT(PORTB_Register,u8PinIdCopy); break;
     cb8:	a8 e3       	ldi	r26, 0x38	; 56
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e8 e3       	ldi	r30, 0x38	; 56
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	48 2f       	mov	r20, r24
     cc4:	8a 81       	ldd	r24, Y+2	; 0x02
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	02 2e       	mov	r0, r18
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <DIO_SetPinValue+0x1a0>
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	0a 94       	dec	r0
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <DIO_SetPinValue+0x19c>
     cda:	80 95       	com	r24
     cdc:	84 23       	and	r24, r20
     cde:	8c 93       	st	X, r24
     ce0:	29 c0       	rjmp	.+82     	; 0xd34 <DIO_SetPinValue+0x1fe>
				case PORTC: CLR_BIT(PORTC_Register,u8PinIdCopy); break;
     ce2:	a5 e3       	ldi	r26, 0x35	; 53
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e5 e3       	ldi	r30, 0x35	; 53
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	48 2f       	mov	r20, r24
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	02 2e       	mov	r0, r18
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <DIO_SetPinValue+0x1ca>
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	0a 94       	dec	r0
     d02:	e2 f7       	brpl	.-8      	; 0xcfc <DIO_SetPinValue+0x1c6>
     d04:	80 95       	com	r24
     d06:	84 23       	and	r24, r20
     d08:	8c 93       	st	X, r24
     d0a:	14 c0       	rjmp	.+40     	; 0xd34 <DIO_SetPinValue+0x1fe>
				case PORTD: CLR_BIT(PORTD_Register,u8PinIdCopy); break;
     d0c:	a2 e3       	ldi	r26, 0x32	; 50
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e2 e3       	ldi	r30, 0x32	; 50
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	48 2f       	mov	r20, r24
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	02 2e       	mov	r0, r18
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <DIO_SetPinValue+0x1f4>
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	0a 94       	dec	r0
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <DIO_SetPinValue+0x1f0>
     d2e:	80 95       	com	r24
     d30:	84 23       	and	r24, r20
     d32:	8c 93       	st	X, r24
	
	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
     d34:	27 96       	adiw	r28, 0x07	; 7
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <DIO_GetPinValue>:

u8 DIO_GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy)
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	00 d0       	rcall	.+0      	; 0xd4c <DIO_GetPinValue+0x6>
     d4c:	00 d0       	rcall	.+0      	; 0xd4e <DIO_GetPinValue+0x8>
     d4e:	0f 92       	push	r0
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
     d54:	8a 83       	std	Y+2, r24	; 0x02
     d56:	6b 83       	std	Y+3, r22	; 0x03
	/* Define Local Variable to get the BIT Value */
	u8 u8ResultLocal;
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
     d58:	8a 81       	ldd	r24, Y+2	; 0x02
     d5a:	84 30       	cpi	r24, 0x04	; 4
     d5c:	08 f0       	brcs	.+2      	; 0xd60 <DIO_GetPinValue+0x1a>
     d5e:	6c c0       	rjmp	.+216    	; 0xe38 <DIO_GetPinValue+0xf2>
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	88 30       	cpi	r24, 0x08	; 8
     d64:	08 f0       	brcs	.+2      	; 0xd68 <DIO_GetPinValue+0x22>
     d66:	68 c0       	rjmp	.+208    	; 0xe38 <DIO_GetPinValue+0xf2>
	{
		/* Check on the Required PORT Number */
		switch (u8PortIdCopy)
     d68:	8a 81       	ldd	r24, Y+2	; 0x02
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	3d 83       	std	Y+5, r19	; 0x05
     d70:	2c 83       	std	Y+4, r18	; 0x04
     d72:	4c 81       	ldd	r20, Y+4	; 0x04
     d74:	5d 81       	ldd	r21, Y+5	; 0x05
     d76:	41 30       	cpi	r20, 0x01	; 1
     d78:	51 05       	cpc	r21, r1
     d7a:	41 f1       	breq	.+80     	; 0xdcc <DIO_GetPinValue+0x86>
     d7c:	8c 81       	ldd	r24, Y+4	; 0x04
     d7e:	9d 81       	ldd	r25, Y+5	; 0x05
     d80:	82 30       	cpi	r24, 0x02	; 2
     d82:	91 05       	cpc	r25, r1
     d84:	34 f4       	brge	.+12     	; 0xd92 <DIO_GetPinValue+0x4c>
     d86:	2c 81       	ldd	r18, Y+4	; 0x04
     d88:	3d 81       	ldd	r19, Y+5	; 0x05
     d8a:	21 15       	cp	r18, r1
     d8c:	31 05       	cpc	r19, r1
     d8e:	61 f0       	breq	.+24     	; 0xda8 <DIO_GetPinValue+0x62>
     d90:	55 c0       	rjmp	.+170    	; 0xe3c <DIO_GetPinValue+0xf6>
     d92:	4c 81       	ldd	r20, Y+4	; 0x04
     d94:	5d 81       	ldd	r21, Y+5	; 0x05
     d96:	42 30       	cpi	r20, 0x02	; 2
     d98:	51 05       	cpc	r21, r1
     d9a:	51 f1       	breq	.+84     	; 0xdf0 <DIO_GetPinValue+0xaa>
     d9c:	8c 81       	ldd	r24, Y+4	; 0x04
     d9e:	9d 81       	ldd	r25, Y+5	; 0x05
     da0:	83 30       	cpi	r24, 0x03	; 3
     da2:	91 05       	cpc	r25, r1
     da4:	b9 f1       	breq	.+110    	; 0xe14 <DIO_GetPinValue+0xce>
     da6:	4a c0       	rjmp	.+148    	; 0xe3c <DIO_GetPinValue+0xf6>
		{
			case PORTA: u8ResultLocal= GET_BIT(PINA_Register,u8PinIdCopy); break;
     da8:	e9 e3       	ldi	r30, 0x39	; 57
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	28 2f       	mov	r18, r24
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	8b 81       	ldd	r24, Y+3	; 0x03
     db4:	88 2f       	mov	r24, r24
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	a9 01       	movw	r20, r18
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <DIO_GetPinValue+0x7a>
     dbc:	55 95       	asr	r21
     dbe:	47 95       	ror	r20
     dc0:	8a 95       	dec	r24
     dc2:	e2 f7       	brpl	.-8      	; 0xdbc <DIO_GetPinValue+0x76>
     dc4:	ca 01       	movw	r24, r20
     dc6:	81 70       	andi	r24, 0x01	; 1
     dc8:	89 83       	std	Y+1, r24	; 0x01
     dca:	38 c0       	rjmp	.+112    	; 0xe3c <DIO_GetPinValue+0xf6>
			case PORTB: u8ResultLocal= GET_BIT(PINB_Register,u8PinIdCopy); break;
     dcc:	e6 e3       	ldi	r30, 0x36	; 54
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	28 2f       	mov	r18, r24
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	8b 81       	ldd	r24, Y+3	; 0x03
     dd8:	88 2f       	mov	r24, r24
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	a9 01       	movw	r20, r18
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <DIO_GetPinValue+0x9e>
     de0:	55 95       	asr	r21
     de2:	47 95       	ror	r20
     de4:	8a 95       	dec	r24
     de6:	e2 f7       	brpl	.-8      	; 0xde0 <DIO_GetPinValue+0x9a>
     de8:	ca 01       	movw	r24, r20
     dea:	81 70       	andi	r24, 0x01	; 1
     dec:	89 83       	std	Y+1, r24	; 0x01
     dee:	26 c0       	rjmp	.+76     	; 0xe3c <DIO_GetPinValue+0xf6>
			case PORTC: u8ResultLocal= GET_BIT(PINC_Register,u8PinIdCopy); break;
     df0:	e3 e3       	ldi	r30, 0x33	; 51
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	28 2f       	mov	r18, r24
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	8b 81       	ldd	r24, Y+3	; 0x03
     dfc:	88 2f       	mov	r24, r24
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	a9 01       	movw	r20, r18
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <DIO_GetPinValue+0xc2>
     e04:	55 95       	asr	r21
     e06:	47 95       	ror	r20
     e08:	8a 95       	dec	r24
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <DIO_GetPinValue+0xbe>
     e0c:	ca 01       	movw	r24, r20
     e0e:	81 70       	andi	r24, 0x01	; 1
     e10:	89 83       	std	Y+1, r24	; 0x01
     e12:	14 c0       	rjmp	.+40     	; 0xe3c <DIO_GetPinValue+0xf6>
			case PORTD: u8ResultLocal= GET_BIT(PIND_Register,u8PinIdCopy); break;
     e14:	e0 e3       	ldi	r30, 0x30	; 48
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	28 2f       	mov	r18, r24
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	88 2f       	mov	r24, r24
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	a9 01       	movw	r20, r18
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <DIO_GetPinValue+0xe6>
     e28:	55 95       	asr	r21
     e2a:	47 95       	ror	r20
     e2c:	8a 95       	dec	r24
     e2e:	e2 f7       	brpl	.-8      	; 0xe28 <DIO_GetPinValue+0xe2>
     e30:	ca 01       	movw	r24, r20
     e32:	81 70       	andi	r24, 0x01	; 1
     e34:	89 83       	std	Y+1, r24	; 0x01
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_GetPinValue+0xf6>
	}
	
	else
	{
		/* return 0xff in case of error in the Pin ID or PORT ID */
		u8ResultLocal = 0xFF;
     e38:	8f ef       	ldi	r24, 0xFF	; 255
     e3a:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return u8ResultLocal;
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
}
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	0f 90       	pop	r0
     e44:	0f 90       	pop	r0
     e46:	0f 90       	pop	r0
     e48:	cf 91       	pop	r28
     e4a:	df 91       	pop	r29
     e4c:	08 95       	ret

00000e4e <DIO_SetPinDirection>:

void DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
     e4e:	df 93       	push	r29
     e50:	cf 93       	push	r28
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
     e56:	27 97       	sbiw	r28, 0x07	; 7
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	f8 94       	cli
     e5c:	de bf       	out	0x3e, r29	; 62
     e5e:	0f be       	out	0x3f, r0	; 63
     e60:	cd bf       	out	0x3d, r28	; 61
     e62:	89 83       	std	Y+1, r24	; 0x01
     e64:	6a 83       	std	Y+2, r22	; 0x02
     e66:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
     e68:	89 81       	ldd	r24, Y+1	; 0x01
     e6a:	84 30       	cpi	r24, 0x04	; 4
     e6c:	08 f0       	brcs	.+2      	; 0xe70 <DIO_SetPinDirection+0x22>
     e6e:	ee c0       	rjmp	.+476    	; 0x104c <DIO_SetPinDirection+0x1fe>
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	88 30       	cpi	r24, 0x08	; 8
     e74:	08 f0       	brcs	.+2      	; 0xe78 <DIO_SetPinDirection+0x2a>
     e76:	ea c0       	rjmp	.+468    	; 0x104c <DIO_SetPinDirection+0x1fe>
	{
		if ( u8PinDirCopy == OUTPUT )
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	81 30       	cpi	r24, 0x01	; 1
     e7c:	09 f0       	breq	.+2      	; 0xe80 <DIO_SetPinDirection+0x32>
     e7e:	6f c0       	rjmp	.+222    	; 0xf5e <DIO_SetPinDirection+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	3f 83       	std	Y+7, r19	; 0x07
     e88:	2e 83       	std	Y+6, r18	; 0x06
     e8a:	8e 81       	ldd	r24, Y+6	; 0x06
     e8c:	9f 81       	ldd	r25, Y+7	; 0x07
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	91 05       	cpc	r25, r1
     e92:	49 f1       	breq	.+82     	; 0xee6 <DIO_SetPinDirection+0x98>
     e94:	2e 81       	ldd	r18, Y+6	; 0x06
     e96:	3f 81       	ldd	r19, Y+7	; 0x07
     e98:	22 30       	cpi	r18, 0x02	; 2
     e9a:	31 05       	cpc	r19, r1
     e9c:	2c f4       	brge	.+10     	; 0xea8 <DIO_SetPinDirection+0x5a>
     e9e:	8e 81       	ldd	r24, Y+6	; 0x06
     ea0:	9f 81       	ldd	r25, Y+7	; 0x07
     ea2:	00 97       	sbiw	r24, 0x00	; 0
     ea4:	61 f0       	breq	.+24     	; 0xebe <DIO_SetPinDirection+0x70>
     ea6:	d2 c0       	rjmp	.+420    	; 0x104c <DIO_SetPinDirection+0x1fe>
     ea8:	2e 81       	ldd	r18, Y+6	; 0x06
     eaa:	3f 81       	ldd	r19, Y+7	; 0x07
     eac:	22 30       	cpi	r18, 0x02	; 2
     eae:	31 05       	cpc	r19, r1
     eb0:	71 f1       	breq	.+92     	; 0xf0e <DIO_SetPinDirection+0xc0>
     eb2:	8e 81       	ldd	r24, Y+6	; 0x06
     eb4:	9f 81       	ldd	r25, Y+7	; 0x07
     eb6:	83 30       	cpi	r24, 0x03	; 3
     eb8:	91 05       	cpc	r25, r1
     eba:	e9 f1       	breq	.+122    	; 0xf36 <DIO_SetPinDirection+0xe8>
     ebc:	c7 c0       	rjmp	.+398    	; 0x104c <DIO_SetPinDirection+0x1fe>
			{
				case PORTA: SET_BIT(DDRA_Register,u8PinIdCopy); break;
     ebe:	aa e3       	ldi	r26, 0x3A	; 58
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	ea e3       	ldi	r30, 0x3A	; 58
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	48 2f       	mov	r20, r24
     eca:	8a 81       	ldd	r24, Y+2	; 0x02
     ecc:	28 2f       	mov	r18, r24
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	02 2e       	mov	r0, r18
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <DIO_SetPinDirection+0x8e>
     ed8:	88 0f       	add	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	0a 94       	dec	r0
     ede:	e2 f7       	brpl	.-8      	; 0xed8 <DIO_SetPinDirection+0x8a>
     ee0:	84 2b       	or	r24, r20
     ee2:	8c 93       	st	X, r24
     ee4:	b3 c0       	rjmp	.+358    	; 0x104c <DIO_SetPinDirection+0x1fe>
				case PORTB: SET_BIT(DDRB_Register,u8PinIdCopy); break;
     ee6:	a7 e3       	ldi	r26, 0x37	; 55
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e7 e3       	ldi	r30, 0x37	; 55
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	48 2f       	mov	r20, r24
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	02 2e       	mov	r0, r18
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <DIO_SetPinDirection+0xb6>
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	0a 94       	dec	r0
     f06:	e2 f7       	brpl	.-8      	; 0xf00 <DIO_SetPinDirection+0xb2>
     f08:	84 2b       	or	r24, r20
     f0a:	8c 93       	st	X, r24
     f0c:	9f c0       	rjmp	.+318    	; 0x104c <DIO_SetPinDirection+0x1fe>
				case PORTC: SET_BIT(DDRC_Register,u8PinIdCopy); break;
     f0e:	a4 e3       	ldi	r26, 0x34	; 52
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e4 e3       	ldi	r30, 0x34	; 52
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	48 2f       	mov	r20, r24
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	02 2e       	mov	r0, r18
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <DIO_SetPinDirection+0xde>
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	0a 94       	dec	r0
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <DIO_SetPinDirection+0xda>
     f30:	84 2b       	or	r24, r20
     f32:	8c 93       	st	X, r24
     f34:	8b c0       	rjmp	.+278    	; 0x104c <DIO_SetPinDirection+0x1fe>
				case PORTD: SET_BIT(DDRD_Register,u8PinIdCopy); break;
     f36:	a1 e3       	ldi	r26, 0x31	; 49
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e1 e3       	ldi	r30, 0x31	; 49
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	48 2f       	mov	r20, r24
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	02 2e       	mov	r0, r18
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <DIO_SetPinDirection+0x106>
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	0a 94       	dec	r0
     f56:	e2 f7       	brpl	.-8      	; 0xf50 <DIO_SetPinDirection+0x102>
     f58:	84 2b       	or	r24, r20
     f5a:	8c 93       	st	X, r24
     f5c:	77 c0       	rjmp	.+238    	; 0x104c <DIO_SetPinDirection+0x1fe>
			}
		}
		
		else if ( u8PinDirCopy == INPUT )
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	88 23       	and	r24, r24
     f62:	09 f0       	breq	.+2      	; 0xf66 <DIO_SetPinDirection+0x118>
     f64:	73 c0       	rjmp	.+230    	; 0x104c <DIO_SetPinDirection+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	3d 83       	std	Y+5, r19	; 0x05
     f6e:	2c 83       	std	Y+4, r18	; 0x04
     f70:	8c 81       	ldd	r24, Y+4	; 0x04
     f72:	9d 81       	ldd	r25, Y+5	; 0x05
     f74:	81 30       	cpi	r24, 0x01	; 1
     f76:	91 05       	cpc	r25, r1
     f78:	59 f1       	breq	.+86     	; 0xfd0 <DIO_SetPinDirection+0x182>
     f7a:	2c 81       	ldd	r18, Y+4	; 0x04
     f7c:	3d 81       	ldd	r19, Y+5	; 0x05
     f7e:	22 30       	cpi	r18, 0x02	; 2
     f80:	31 05       	cpc	r19, r1
     f82:	2c f4       	brge	.+10     	; 0xf8e <DIO_SetPinDirection+0x140>
     f84:	8c 81       	ldd	r24, Y+4	; 0x04
     f86:	9d 81       	ldd	r25, Y+5	; 0x05
     f88:	00 97       	sbiw	r24, 0x00	; 0
     f8a:	69 f0       	breq	.+26     	; 0xfa6 <DIO_SetPinDirection+0x158>
     f8c:	5f c0       	rjmp	.+190    	; 0x104c <DIO_SetPinDirection+0x1fe>
     f8e:	2c 81       	ldd	r18, Y+4	; 0x04
     f90:	3d 81       	ldd	r19, Y+5	; 0x05
     f92:	22 30       	cpi	r18, 0x02	; 2
     f94:	31 05       	cpc	r19, r1
     f96:	89 f1       	breq	.+98     	; 0xffa <DIO_SetPinDirection+0x1ac>
     f98:	8c 81       	ldd	r24, Y+4	; 0x04
     f9a:	9d 81       	ldd	r25, Y+5	; 0x05
     f9c:	83 30       	cpi	r24, 0x03	; 3
     f9e:	91 05       	cpc	r25, r1
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <DIO_SetPinDirection+0x156>
     fa2:	40 c0       	rjmp	.+128    	; 0x1024 <DIO_SetPinDirection+0x1d6>
     fa4:	53 c0       	rjmp	.+166    	; 0x104c <DIO_SetPinDirection+0x1fe>
			{
				case PORTA: CLR_BIT(DDRA_Register,u8PinIdCopy); break;
     fa6:	aa e3       	ldi	r26, 0x3A	; 58
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	ea e3       	ldi	r30, 0x3A	; 58
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	48 2f       	mov	r20, r24
     fb2:	8a 81       	ldd	r24, Y+2	; 0x02
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	02 2e       	mov	r0, r18
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <DIO_SetPinDirection+0x176>
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	0a 94       	dec	r0
     fc6:	e2 f7       	brpl	.-8      	; 0xfc0 <DIO_SetPinDirection+0x172>
     fc8:	80 95       	com	r24
     fca:	84 23       	and	r24, r20
     fcc:	8c 93       	st	X, r24
     fce:	3e c0       	rjmp	.+124    	; 0x104c <DIO_SetPinDirection+0x1fe>
				case PORTB: CLR_BIT(DDRB_Register,u8PinIdCopy); break;
     fd0:	a7 e3       	ldi	r26, 0x37	; 55
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e7 e3       	ldi	r30, 0x37	; 55
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	48 2f       	mov	r20, r24
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	02 2e       	mov	r0, r18
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <DIO_SetPinDirection+0x1a0>
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	0a 94       	dec	r0
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <DIO_SetPinDirection+0x19c>
     ff2:	80 95       	com	r24
     ff4:	84 23       	and	r24, r20
     ff6:	8c 93       	st	X, r24
     ff8:	29 c0       	rjmp	.+82     	; 0x104c <DIO_SetPinDirection+0x1fe>
				case PORTC: CLR_BIT(DDRC_Register,u8PinIdCopy); break;
     ffa:	a4 e3       	ldi	r26, 0x34	; 52
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e4 e3       	ldi	r30, 0x34	; 52
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	48 2f       	mov	r20, r24
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	02 2e       	mov	r0, r18
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <DIO_SetPinDirection+0x1ca>
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	0a 94       	dec	r0
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <DIO_SetPinDirection+0x1c6>
    101c:	80 95       	com	r24
    101e:	84 23       	and	r24, r20
    1020:	8c 93       	st	X, r24
    1022:	14 c0       	rjmp	.+40     	; 0x104c <DIO_SetPinDirection+0x1fe>
				case PORTD: CLR_BIT(DDRD_Register,u8PinIdCopy); break;
    1024:	a1 e3       	ldi	r26, 0x31	; 49
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e1 e3       	ldi	r30, 0x31	; 49
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	48 2f       	mov	r20, r24
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	02 2e       	mov	r0, r18
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <DIO_SetPinDirection+0x1f4>
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	0a 94       	dec	r0
    1044:	e2 f7       	brpl	.-8      	; 0x103e <DIO_SetPinDirection+0x1f0>
    1046:	80 95       	com	r24
    1048:	84 23       	and	r24, r20
    104a:	8c 93       	st	X, r24
	
	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
    104c:	27 96       	adiw	r28, 0x07	; 7
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	f8 94       	cli
    1052:	de bf       	out	0x3e, r29	; 62
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	cd bf       	out	0x3d, r28	; 61
    1058:	cf 91       	pop	r28
    105a:	df 91       	pop	r29
    105c:	08 95       	ret

0000105e <DIO_SetPortDirection>:


/* IO Ports */
void DIO_SetPortDirection (u8 u8PortId, u8 u8PortDir)
{
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	00 d0       	rcall	.+0      	; 0x1064 <DIO_SetPortDirection+0x6>
    1064:	00 d0       	rcall	.+0      	; 0x1066 <DIO_SetPortDirection+0x8>
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
    106a:	89 83       	std	Y+1, r24	; 0x01
    106c:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (u8PortId)
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	3c 83       	std	Y+4, r19	; 0x04
    1076:	2b 83       	std	Y+3, r18	; 0x03
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	9c 81       	ldd	r25, Y+4	; 0x04
    107c:	81 30       	cpi	r24, 0x01	; 1
    107e:	91 05       	cpc	r25, r1
    1080:	d1 f0       	breq	.+52     	; 0x10b6 <DIO_SetPortDirection+0x58>
    1082:	2b 81       	ldd	r18, Y+3	; 0x03
    1084:	3c 81       	ldd	r19, Y+4	; 0x04
    1086:	22 30       	cpi	r18, 0x02	; 2
    1088:	31 05       	cpc	r19, r1
    108a:	2c f4       	brge	.+10     	; 0x1096 <DIO_SetPortDirection+0x38>
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	9c 81       	ldd	r25, Y+4	; 0x04
    1090:	00 97       	sbiw	r24, 0x00	; 0
    1092:	61 f0       	breq	.+24     	; 0x10ac <DIO_SetPortDirection+0x4e>
    1094:	1e c0       	rjmp	.+60     	; 0x10d2 <DIO_SetPortDirection+0x74>
    1096:	2b 81       	ldd	r18, Y+3	; 0x03
    1098:	3c 81       	ldd	r19, Y+4	; 0x04
    109a:	22 30       	cpi	r18, 0x02	; 2
    109c:	31 05       	cpc	r19, r1
    109e:	81 f0       	breq	.+32     	; 0x10c0 <DIO_SetPortDirection+0x62>
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	9c 81       	ldd	r25, Y+4	; 0x04
    10a4:	83 30       	cpi	r24, 0x03	; 3
    10a6:	91 05       	cpc	r25, r1
    10a8:	81 f0       	breq	.+32     	; 0x10ca <DIO_SetPortDirection+0x6c>
    10aa:	13 c0       	rjmp	.+38     	; 0x10d2 <DIO_SetPortDirection+0x74>
	{
		case     PORTA: DDRA_Register = u8PortDir; break;
    10ac:	ea e3       	ldi	r30, 0x3A	; 58
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	80 83       	st	Z, r24
    10b4:	0e c0       	rjmp	.+28     	; 0x10d2 <DIO_SetPortDirection+0x74>
		case     PORTB: DDRB_Register = u8PortDir; break;
    10b6:	e7 e3       	ldi	r30, 0x37	; 55
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	80 83       	st	Z, r24
    10be:	09 c0       	rjmp	.+18     	; 0x10d2 <DIO_SetPortDirection+0x74>
		case     PORTC: DDRC_Register = u8PortDir; break;
    10c0:	e4 e3       	ldi	r30, 0x34	; 52
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	80 83       	st	Z, r24
    10c8:	04 c0       	rjmp	.+8      	; 0x10d2 <DIO_SetPortDirection+0x74>
		case     PORTD: DDRD_Register = u8PortDir; break;
    10ca:	e1 e3       	ldi	r30, 0x31	; 49
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	80 83       	st	Z, r24
		default: /* Wrong Port ID */       break;
	}
}
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	08 95       	ret

000010e0 <DIO_SetPortValue>:

void DIO_SetPortValue (u8 u8PortId, u8 u8PortVal)
{
    10e0:	df 93       	push	r29
    10e2:	cf 93       	push	r28
    10e4:	00 d0       	rcall	.+0      	; 0x10e6 <DIO_SetPortValue+0x6>
    10e6:	00 d0       	rcall	.+0      	; 0x10e8 <DIO_SetPortValue+0x8>
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	89 83       	std	Y+1, r24	; 0x01
    10ee:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (u8PortId)
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	3c 83       	std	Y+4, r19	; 0x04
    10f8:	2b 83       	std	Y+3, r18	; 0x03
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	9c 81       	ldd	r25, Y+4	; 0x04
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	91 05       	cpc	r25, r1
    1102:	d1 f0       	breq	.+52     	; 0x1138 <DIO_SetPortValue+0x58>
    1104:	2b 81       	ldd	r18, Y+3	; 0x03
    1106:	3c 81       	ldd	r19, Y+4	; 0x04
    1108:	22 30       	cpi	r18, 0x02	; 2
    110a:	31 05       	cpc	r19, r1
    110c:	2c f4       	brge	.+10     	; 0x1118 <DIO_SetPortValue+0x38>
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	9c 81       	ldd	r25, Y+4	; 0x04
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	61 f0       	breq	.+24     	; 0x112e <DIO_SetPortValue+0x4e>
    1116:	1e c0       	rjmp	.+60     	; 0x1154 <DIO_SetPortValue+0x74>
    1118:	2b 81       	ldd	r18, Y+3	; 0x03
    111a:	3c 81       	ldd	r19, Y+4	; 0x04
    111c:	22 30       	cpi	r18, 0x02	; 2
    111e:	31 05       	cpc	r19, r1
    1120:	81 f0       	breq	.+32     	; 0x1142 <DIO_SetPortValue+0x62>
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	9c 81       	ldd	r25, Y+4	; 0x04
    1126:	83 30       	cpi	r24, 0x03	; 3
    1128:	91 05       	cpc	r25, r1
    112a:	81 f0       	breq	.+32     	; 0x114c <DIO_SetPortValue+0x6c>
    112c:	13 c0       	rjmp	.+38     	; 0x1154 <DIO_SetPortValue+0x74>
	{
		case     PORTA: PORTA_Register = u8PortVal; break;
    112e:	eb e3       	ldi	r30, 0x3B	; 59
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	80 83       	st	Z, r24
    1136:	0e c0       	rjmp	.+28     	; 0x1154 <DIO_SetPortValue+0x74>
		case     PORTB: PORTB_Register = u8PortVal; break;
    1138:	e8 e3       	ldi	r30, 0x38	; 56
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	80 83       	st	Z, r24
    1140:	09 c0       	rjmp	.+18     	; 0x1154 <DIO_SetPortValue+0x74>
		case     PORTC: PORTC_Register = u8PortVal; break;
    1142:	e5 e3       	ldi	r30, 0x35	; 53
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	80 83       	st	Z, r24
    114a:	04 c0       	rjmp	.+8      	; 0x1154 <DIO_SetPortValue+0x74>
		case     PORTD: PORTD_Register = u8PortVal; break;
    114c:	e2 e3       	ldi	r30, 0x32	; 50
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	80 83       	st	Z, r24
		default: /* Wrong Port ID */        break;
	}
}
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	08 95       	ret

00001162 <main>:

#include "DIO_int.h"
#include "DIO_reg.h"


void main(void){
    1162:	0f 93       	push	r16
    1164:	1f 93       	push	r17
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	cc 59       	subi	r28, 0x9C	; 156
    1170:	d0 40       	sbci	r29, 0x00	; 0
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	f8 94       	cli
    1176:	de bf       	out	0x3e, r29	; 62
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	cd bf       	out	0x3d, r28	; 61
	u8 i,j ;

	 //Set PORTA as INPUT from switches
	 	DIO_SetPortDirection (PORTA, 0X00);
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	60 e0       	ldi	r22, 0x00	; 0
    1180:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_SetPortDirection>

	 	// CONNECT PORTA TO PULL UP RESISTORS
	 	DIO_SetPortValue     (PORTA, 0XFF);
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	6f ef       	ldi	r22, 0xFF	; 255
    1188:	0e 94 70 08 	call	0x10e0	; 0x10e0 <DIO_SetPortValue>

	//Set PORTC as output to leds
	 	 DIO_SetPortDirection (PORTC, 0XFF);
    118c:	82 e0       	ldi	r24, 0x02	; 2
    118e:	6f ef       	ldi	r22, 0xFF	; 255
    1190:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_SetPortDirection>

	 	//Set PORTD as extra output to leds
	 	//used in specific tasks
	 	 DIO_SetPortDirection (PORTD, 0XFF);
    1194:	83 e0       	ldi	r24, 0x03	; 3
    1196:	6f ef       	ldi	r22, 0xFF	; 255
    1198:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_SetPortDirection>

	while (1){


		// Flashing every 500 ms
		if (!(DIO_GetPinValue(PORTA, PIN0)))
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_GetPinValue>
    11a4:	88 23       	and	r24, r24
    11a6:	09 f0       	breq	.+2      	; 0x11aa <main+0x48>
    11a8:	70 c1       	rjmp	.+736    	; 0x148a <main+0x328>
		{
			DIO_SetPortValue (PORTC, 0xff);
    11aa:	82 e0       	ldi	r24, 0x02	; 2
    11ac:	6f ef       	ldi	r22, 0xFF	; 255
    11ae:	0e 94 70 08 	call	0x10e0	; 0x10e0 <DIO_SetPortValue>
    11b2:	fe 01       	movw	r30, r28
    11b4:	e9 56       	subi	r30, 0x69	; 105
    11b6:	ff 4f       	sbci	r31, 0xFF	; 255
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	aa ef       	ldi	r26, 0xFA	; 250
    11be:	b3 e4       	ldi	r27, 0x43	; 67
    11c0:	80 83       	st	Z, r24
    11c2:	91 83       	std	Z+1, r25	; 0x01
    11c4:	a2 83       	std	Z+2, r26	; 0x02
    11c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11c8:	8e 01       	movw	r16, r28
    11ca:	0d 56       	subi	r16, 0x6D	; 109
    11cc:	1f 4f       	sbci	r17, 0xFF	; 255
    11ce:	fe 01       	movw	r30, r28
    11d0:	e9 56       	subi	r30, 0x69	; 105
    11d2:	ff 4f       	sbci	r31, 0xFF	; 255
    11d4:	60 81       	ld	r22, Z
    11d6:	71 81       	ldd	r23, Z+1	; 0x01
    11d8:	82 81       	ldd	r24, Z+2	; 0x02
    11da:	93 81       	ldd	r25, Z+3	; 0x03
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	4a e7       	ldi	r20, 0x7A	; 122
    11e2:	53 e4       	ldi	r21, 0x43	; 67
    11e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11e8:	dc 01       	movw	r26, r24
    11ea:	cb 01       	movw	r24, r22
    11ec:	f8 01       	movw	r30, r16
    11ee:	80 83       	st	Z, r24
    11f0:	91 83       	std	Z+1, r25	; 0x01
    11f2:	a2 83       	std	Z+2, r26	; 0x02
    11f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11f6:	fe 01       	movw	r30, r28
    11f8:	ed 56       	subi	r30, 0x6D	; 109
    11fa:	ff 4f       	sbci	r31, 0xFF	; 255
    11fc:	60 81       	ld	r22, Z
    11fe:	71 81       	ldd	r23, Z+1	; 0x01
    1200:	82 81       	ldd	r24, Z+2	; 0x02
    1202:	93 81       	ldd	r25, Z+3	; 0x03
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	40 e8       	ldi	r20, 0x80	; 128
    120a:	5f e3       	ldi	r21, 0x3F	; 63
    120c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1210:	88 23       	and	r24, r24
    1212:	44 f4       	brge	.+16     	; 0x1224 <main+0xc2>
		__ticks = 1;
    1214:	fe 01       	movw	r30, r28
    1216:	ef 56       	subi	r30, 0x6F	; 111
    1218:	ff 4f       	sbci	r31, 0xFF	; 255
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	91 83       	std	Z+1, r25	; 0x01
    1220:	80 83       	st	Z, r24
    1222:	64 c0       	rjmp	.+200    	; 0x12ec <main+0x18a>
	else if (__tmp > 65535)
    1224:	fe 01       	movw	r30, r28
    1226:	ed 56       	subi	r30, 0x6D	; 109
    1228:	ff 4f       	sbci	r31, 0xFF	; 255
    122a:	60 81       	ld	r22, Z
    122c:	71 81       	ldd	r23, Z+1	; 0x01
    122e:	82 81       	ldd	r24, Z+2	; 0x02
    1230:	93 81       	ldd	r25, Z+3	; 0x03
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	3f ef       	ldi	r19, 0xFF	; 255
    1236:	4f e7       	ldi	r20, 0x7F	; 127
    1238:	57 e4       	ldi	r21, 0x47	; 71
    123a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    123e:	18 16       	cp	r1, r24
    1240:	0c f0       	brlt	.+2      	; 0x1244 <main+0xe2>
    1242:	43 c0       	rjmp	.+134    	; 0x12ca <main+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1244:	fe 01       	movw	r30, r28
    1246:	e9 56       	subi	r30, 0x69	; 105
    1248:	ff 4f       	sbci	r31, 0xFF	; 255
    124a:	60 81       	ld	r22, Z
    124c:	71 81       	ldd	r23, Z+1	; 0x01
    124e:	82 81       	ldd	r24, Z+2	; 0x02
    1250:	93 81       	ldd	r25, Z+3	; 0x03
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	40 e2       	ldi	r20, 0x20	; 32
    1258:	51 e4       	ldi	r21, 0x41	; 65
    125a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    125e:	dc 01       	movw	r26, r24
    1260:	cb 01       	movw	r24, r22
    1262:	8e 01       	movw	r16, r28
    1264:	0f 56       	subi	r16, 0x6F	; 111
    1266:	1f 4f       	sbci	r17, 0xFF	; 255
    1268:	bc 01       	movw	r22, r24
    126a:	cd 01       	movw	r24, r26
    126c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	f8 01       	movw	r30, r16
    1276:	91 83       	std	Z+1, r25	; 0x01
    1278:	80 83       	st	Z, r24
    127a:	1f c0       	rjmp	.+62     	; 0x12ba <main+0x158>
    127c:	fe 01       	movw	r30, r28
    127e:	e1 57       	subi	r30, 0x71	; 113
    1280:	ff 4f       	sbci	r31, 0xFF	; 255
    1282:	89 e1       	ldi	r24, 0x19	; 25
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	91 83       	std	Z+1, r25	; 0x01
    1288:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    128a:	fe 01       	movw	r30, r28
    128c:	e1 57       	subi	r30, 0x71	; 113
    128e:	ff 4f       	sbci	r31, 0xFF	; 255
    1290:	80 81       	ld	r24, Z
    1292:	91 81       	ldd	r25, Z+1	; 0x01
    1294:	01 97       	sbiw	r24, 0x01	; 1
    1296:	f1 f7       	brne	.-4      	; 0x1294 <main+0x132>
    1298:	fe 01       	movw	r30, r28
    129a:	e1 57       	subi	r30, 0x71	; 113
    129c:	ff 4f       	sbci	r31, 0xFF	; 255
    129e:	91 83       	std	Z+1, r25	; 0x01
    12a0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12a2:	de 01       	movw	r26, r28
    12a4:	af 56       	subi	r26, 0x6F	; 111
    12a6:	bf 4f       	sbci	r27, 0xFF	; 255
    12a8:	fe 01       	movw	r30, r28
    12aa:	ef 56       	subi	r30, 0x6F	; 111
    12ac:	ff 4f       	sbci	r31, 0xFF	; 255
    12ae:	80 81       	ld	r24, Z
    12b0:	91 81       	ldd	r25, Z+1	; 0x01
    12b2:	01 97       	sbiw	r24, 0x01	; 1
    12b4:	11 96       	adiw	r26, 0x01	; 1
    12b6:	9c 93       	st	X, r25
    12b8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ba:	fe 01       	movw	r30, r28
    12bc:	ef 56       	subi	r30, 0x6F	; 111
    12be:	ff 4f       	sbci	r31, 0xFF	; 255
    12c0:	80 81       	ld	r24, Z
    12c2:	91 81       	ldd	r25, Z+1	; 0x01
    12c4:	00 97       	sbiw	r24, 0x00	; 0
    12c6:	d1 f6       	brne	.-76     	; 0x127c <main+0x11a>
    12c8:	27 c0       	rjmp	.+78     	; 0x1318 <main+0x1b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ca:	8e 01       	movw	r16, r28
    12cc:	0f 56       	subi	r16, 0x6F	; 111
    12ce:	1f 4f       	sbci	r17, 0xFF	; 255
    12d0:	fe 01       	movw	r30, r28
    12d2:	ed 56       	subi	r30, 0x6D	; 109
    12d4:	ff 4f       	sbci	r31, 0xFF	; 255
    12d6:	60 81       	ld	r22, Z
    12d8:	71 81       	ldd	r23, Z+1	; 0x01
    12da:	82 81       	ldd	r24, Z+2	; 0x02
    12dc:	93 81       	ldd	r25, Z+3	; 0x03
    12de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12e2:	dc 01       	movw	r26, r24
    12e4:	cb 01       	movw	r24, r22
    12e6:	f8 01       	movw	r30, r16
    12e8:	91 83       	std	Z+1, r25	; 0x01
    12ea:	80 83       	st	Z, r24
    12ec:	de 01       	movw	r26, r28
    12ee:	a3 57       	subi	r26, 0x73	; 115
    12f0:	bf 4f       	sbci	r27, 0xFF	; 255
    12f2:	fe 01       	movw	r30, r28
    12f4:	ef 56       	subi	r30, 0x6F	; 111
    12f6:	ff 4f       	sbci	r31, 0xFF	; 255
    12f8:	80 81       	ld	r24, Z
    12fa:	91 81       	ldd	r25, Z+1	; 0x01
    12fc:	8d 93       	st	X+, r24
    12fe:	9c 93       	st	X, r25
    1300:	fe 01       	movw	r30, r28
    1302:	e3 57       	subi	r30, 0x73	; 115
    1304:	ff 4f       	sbci	r31, 0xFF	; 255
    1306:	80 81       	ld	r24, Z
    1308:	91 81       	ldd	r25, Z+1	; 0x01
    130a:	01 97       	sbiw	r24, 0x01	; 1
    130c:	f1 f7       	brne	.-4      	; 0x130a <main+0x1a8>
    130e:	fe 01       	movw	r30, r28
    1310:	e3 57       	subi	r30, 0x73	; 115
    1312:	ff 4f       	sbci	r31, 0xFF	; 255
    1314:	91 83       	std	Z+1, r25	; 0x01
    1316:	80 83       	st	Z, r24
			_delay_ms(500);
			DIO_SetPortValue     (PORTC, 0x00);
    1318:	82 e0       	ldi	r24, 0x02	; 2
    131a:	60 e0       	ldi	r22, 0x00	; 0
    131c:	0e 94 70 08 	call	0x10e0	; 0x10e0 <DIO_SetPortValue>
    1320:	fe 01       	movw	r30, r28
    1322:	e7 57       	subi	r30, 0x77	; 119
    1324:	ff 4f       	sbci	r31, 0xFF	; 255
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	aa ef       	ldi	r26, 0xFA	; 250
    132c:	b3 e4       	ldi	r27, 0x43	; 67
    132e:	80 83       	st	Z, r24
    1330:	91 83       	std	Z+1, r25	; 0x01
    1332:	a2 83       	std	Z+2, r26	; 0x02
    1334:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1336:	8e 01       	movw	r16, r28
    1338:	0b 57       	subi	r16, 0x7B	; 123
    133a:	1f 4f       	sbci	r17, 0xFF	; 255
    133c:	fe 01       	movw	r30, r28
    133e:	e7 57       	subi	r30, 0x77	; 119
    1340:	ff 4f       	sbci	r31, 0xFF	; 255
    1342:	60 81       	ld	r22, Z
    1344:	71 81       	ldd	r23, Z+1	; 0x01
    1346:	82 81       	ldd	r24, Z+2	; 0x02
    1348:	93 81       	ldd	r25, Z+3	; 0x03
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	4a e7       	ldi	r20, 0x7A	; 122
    1350:	53 e4       	ldi	r21, 0x43	; 67
    1352:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1356:	dc 01       	movw	r26, r24
    1358:	cb 01       	movw	r24, r22
    135a:	f8 01       	movw	r30, r16
    135c:	80 83       	st	Z, r24
    135e:	91 83       	std	Z+1, r25	; 0x01
    1360:	a2 83       	std	Z+2, r26	; 0x02
    1362:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1364:	fe 01       	movw	r30, r28
    1366:	eb 57       	subi	r30, 0x7B	; 123
    1368:	ff 4f       	sbci	r31, 0xFF	; 255
    136a:	60 81       	ld	r22, Z
    136c:	71 81       	ldd	r23, Z+1	; 0x01
    136e:	82 81       	ldd	r24, Z+2	; 0x02
    1370:	93 81       	ldd	r25, Z+3	; 0x03
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	40 e8       	ldi	r20, 0x80	; 128
    1378:	5f e3       	ldi	r21, 0x3F	; 63
    137a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    137e:	88 23       	and	r24, r24
    1380:	44 f4       	brge	.+16     	; 0x1392 <main+0x230>
		__ticks = 1;
    1382:	fe 01       	movw	r30, r28
    1384:	ed 57       	subi	r30, 0x7D	; 125
    1386:	ff 4f       	sbci	r31, 0xFF	; 255
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	91 83       	std	Z+1, r25	; 0x01
    138e:	80 83       	st	Z, r24
    1390:	64 c0       	rjmp	.+200    	; 0x145a <main+0x2f8>
	else if (__tmp > 65535)
    1392:	fe 01       	movw	r30, r28
    1394:	eb 57       	subi	r30, 0x7B	; 123
    1396:	ff 4f       	sbci	r31, 0xFF	; 255
    1398:	60 81       	ld	r22, Z
    139a:	71 81       	ldd	r23, Z+1	; 0x01
    139c:	82 81       	ldd	r24, Z+2	; 0x02
    139e:	93 81       	ldd	r25, Z+3	; 0x03
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	3f ef       	ldi	r19, 0xFF	; 255
    13a4:	4f e7       	ldi	r20, 0x7F	; 127
    13a6:	57 e4       	ldi	r21, 0x47	; 71
    13a8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    13ac:	18 16       	cp	r1, r24
    13ae:	0c f0       	brlt	.+2      	; 0x13b2 <main+0x250>
    13b0:	43 c0       	rjmp	.+134    	; 0x1438 <main+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13b2:	fe 01       	movw	r30, r28
    13b4:	e7 57       	subi	r30, 0x77	; 119
    13b6:	ff 4f       	sbci	r31, 0xFF	; 255
    13b8:	60 81       	ld	r22, Z
    13ba:	71 81       	ldd	r23, Z+1	; 0x01
    13bc:	82 81       	ldd	r24, Z+2	; 0x02
    13be:	93 81       	ldd	r25, Z+3	; 0x03
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	40 e2       	ldi	r20, 0x20	; 32
    13c6:	51 e4       	ldi	r21, 0x41	; 65
    13c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13cc:	dc 01       	movw	r26, r24
    13ce:	cb 01       	movw	r24, r22
    13d0:	8e 01       	movw	r16, r28
    13d2:	0d 57       	subi	r16, 0x7D	; 125
    13d4:	1f 4f       	sbci	r17, 0xFF	; 255
    13d6:	bc 01       	movw	r22, r24
    13d8:	cd 01       	movw	r24, r26
    13da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13de:	dc 01       	movw	r26, r24
    13e0:	cb 01       	movw	r24, r22
    13e2:	f8 01       	movw	r30, r16
    13e4:	91 83       	std	Z+1, r25	; 0x01
    13e6:	80 83       	st	Z, r24
    13e8:	1f c0       	rjmp	.+62     	; 0x1428 <main+0x2c6>
    13ea:	fe 01       	movw	r30, r28
    13ec:	ef 57       	subi	r30, 0x7F	; 127
    13ee:	ff 4f       	sbci	r31, 0xFF	; 255
    13f0:	89 e1       	ldi	r24, 0x19	; 25
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	91 83       	std	Z+1, r25	; 0x01
    13f6:	80 83       	st	Z, r24
    13f8:	fe 01       	movw	r30, r28
    13fa:	ef 57       	subi	r30, 0x7F	; 127
    13fc:	ff 4f       	sbci	r31, 0xFF	; 255
    13fe:	80 81       	ld	r24, Z
    1400:	91 81       	ldd	r25, Z+1	; 0x01
    1402:	01 97       	sbiw	r24, 0x01	; 1
    1404:	f1 f7       	brne	.-4      	; 0x1402 <main+0x2a0>
    1406:	fe 01       	movw	r30, r28
    1408:	ef 57       	subi	r30, 0x7F	; 127
    140a:	ff 4f       	sbci	r31, 0xFF	; 255
    140c:	91 83       	std	Z+1, r25	; 0x01
    140e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1410:	de 01       	movw	r26, r28
    1412:	ad 57       	subi	r26, 0x7D	; 125
    1414:	bf 4f       	sbci	r27, 0xFF	; 255
    1416:	fe 01       	movw	r30, r28
    1418:	ed 57       	subi	r30, 0x7D	; 125
    141a:	ff 4f       	sbci	r31, 0xFF	; 255
    141c:	80 81       	ld	r24, Z
    141e:	91 81       	ldd	r25, Z+1	; 0x01
    1420:	01 97       	sbiw	r24, 0x01	; 1
    1422:	11 96       	adiw	r26, 0x01	; 1
    1424:	9c 93       	st	X, r25
    1426:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1428:	fe 01       	movw	r30, r28
    142a:	ed 57       	subi	r30, 0x7D	; 125
    142c:	ff 4f       	sbci	r31, 0xFF	; 255
    142e:	80 81       	ld	r24, Z
    1430:	91 81       	ldd	r25, Z+1	; 0x01
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	d1 f6       	brne	.-76     	; 0x13ea <main+0x288>
    1436:	b2 ce       	rjmp	.-668    	; 0x119c <main+0x3a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1438:	8e 01       	movw	r16, r28
    143a:	0d 57       	subi	r16, 0x7D	; 125
    143c:	1f 4f       	sbci	r17, 0xFF	; 255
    143e:	fe 01       	movw	r30, r28
    1440:	eb 57       	subi	r30, 0x7B	; 123
    1442:	ff 4f       	sbci	r31, 0xFF	; 255
    1444:	60 81       	ld	r22, Z
    1446:	71 81       	ldd	r23, Z+1	; 0x01
    1448:	82 81       	ldd	r24, Z+2	; 0x02
    144a:	93 81       	ldd	r25, Z+3	; 0x03
    144c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1450:	dc 01       	movw	r26, r24
    1452:	cb 01       	movw	r24, r22
    1454:	f8 01       	movw	r30, r16
    1456:	91 83       	std	Z+1, r25	; 0x01
    1458:	80 83       	st	Z, r24
    145a:	de 01       	movw	r26, r28
    145c:	a1 58       	subi	r26, 0x81	; 129
    145e:	bf 4f       	sbci	r27, 0xFF	; 255
    1460:	fe 01       	movw	r30, r28
    1462:	ed 57       	subi	r30, 0x7D	; 125
    1464:	ff 4f       	sbci	r31, 0xFF	; 255
    1466:	80 81       	ld	r24, Z
    1468:	91 81       	ldd	r25, Z+1	; 0x01
    146a:	11 96       	adiw	r26, 0x01	; 1
    146c:	9c 93       	st	X, r25
    146e:	8e 93       	st	-X, r24
    1470:	fe 01       	movw	r30, r28
    1472:	e1 58       	subi	r30, 0x81	; 129
    1474:	ff 4f       	sbci	r31, 0xFF	; 255
    1476:	80 81       	ld	r24, Z
    1478:	91 81       	ldd	r25, Z+1	; 0x01
    147a:	01 97       	sbiw	r24, 0x01	; 1
    147c:	f1 f7       	brne	.-4      	; 0x147a <main+0x318>
    147e:	fe 01       	movw	r30, r28
    1480:	e1 58       	subi	r30, 0x81	; 129
    1482:	ff 4f       	sbci	r31, 0xFF	; 255
    1484:	91 83       	std	Z+1, r25	; 0x01
    1486:	80 83       	st	Z, r24
    1488:	89 ce       	rjmp	.-750    	; 0x119c <main+0x3a>
			_delay_ms(500);
		}


		//Shifting Left every 250 ms
		else if (!(DIO_GetPinValue(PORTA, PIN1))){
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	61 e0       	ldi	r22, 0x01	; 1
    148e:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_GetPinValue>
    1492:	88 23       	and	r24, r24
    1494:	09 f0       	breq	.+2      	; 0x1498 <main+0x336>
    1496:	db c0       	rjmp	.+438    	; 0x164e <main+0x4ec>
			// Shift LEDs Left
					for(i=0; i<8;i++)
    1498:	fe 01       	movw	r30, r28
    149a:	e4 56       	subi	r30, 0x64	; 100
    149c:	ff 4f       	sbci	r31, 0xFF	; 255
    149e:	10 82       	st	Z, r1
    14a0:	ce c0       	rjmp	.+412    	; 0x163e <main+0x4dc>
					{
						DIO_SetPortValue     (PORTC, 1 << i);
    14a2:	fe 01       	movw	r30, r28
    14a4:	e4 56       	subi	r30, 0x64	; 100
    14a6:	ff 4f       	sbci	r31, 0xFF	; 255
    14a8:	80 81       	ld	r24, Z
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <main+0x356>
    14b4:	88 0f       	add	r24, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	2a 95       	dec	r18
    14ba:	e2 f7       	brpl	.-8      	; 0x14b4 <main+0x352>
    14bc:	98 2f       	mov	r25, r24
    14be:	82 e0       	ldi	r24, 0x02	; 2
    14c0:	69 2f       	mov	r22, r25
    14c2:	0e 94 70 08 	call	0x10e0	; 0x10e0 <DIO_SetPortValue>
    14c6:	fe 01       	movw	r30, r28
    14c8:	e5 58       	subi	r30, 0x85	; 133
    14ca:	ff 4f       	sbci	r31, 0xFF	; 255
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	aa e7       	ldi	r26, 0x7A	; 122
    14d2:	b3 e4       	ldi	r27, 0x43	; 67
    14d4:	80 83       	st	Z, r24
    14d6:	91 83       	std	Z+1, r25	; 0x01
    14d8:	a2 83       	std	Z+2, r26	; 0x02
    14da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14dc:	8e 01       	movw	r16, r28
    14de:	09 58       	subi	r16, 0x89	; 137
    14e0:	1f 4f       	sbci	r17, 0xFF	; 255
    14e2:	fe 01       	movw	r30, r28
    14e4:	e5 58       	subi	r30, 0x85	; 133
    14e6:	ff 4f       	sbci	r31, 0xFF	; 255
    14e8:	60 81       	ld	r22, Z
    14ea:	71 81       	ldd	r23, Z+1	; 0x01
    14ec:	82 81       	ldd	r24, Z+2	; 0x02
    14ee:	93 81       	ldd	r25, Z+3	; 0x03
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	4a e7       	ldi	r20, 0x7A	; 122
    14f6:	53 e4       	ldi	r21, 0x43	; 67
    14f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	f8 01       	movw	r30, r16
    1502:	80 83       	st	Z, r24
    1504:	91 83       	std	Z+1, r25	; 0x01
    1506:	a2 83       	std	Z+2, r26	; 0x02
    1508:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    150a:	fe 01       	movw	r30, r28
    150c:	e9 58       	subi	r30, 0x89	; 137
    150e:	ff 4f       	sbci	r31, 0xFF	; 255
    1510:	60 81       	ld	r22, Z
    1512:	71 81       	ldd	r23, Z+1	; 0x01
    1514:	82 81       	ldd	r24, Z+2	; 0x02
    1516:	93 81       	ldd	r25, Z+3	; 0x03
    1518:	20 e0       	ldi	r18, 0x00	; 0
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	40 e8       	ldi	r20, 0x80	; 128
    151e:	5f e3       	ldi	r21, 0x3F	; 63
    1520:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1524:	88 23       	and	r24, r24
    1526:	44 f4       	brge	.+16     	; 0x1538 <main+0x3d6>
		__ticks = 1;
    1528:	fe 01       	movw	r30, r28
    152a:	eb 58       	subi	r30, 0x8B	; 139
    152c:	ff 4f       	sbci	r31, 0xFF	; 255
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	91 83       	std	Z+1, r25	; 0x01
    1534:	80 83       	st	Z, r24
    1536:	64 c0       	rjmp	.+200    	; 0x1600 <main+0x49e>
	else if (__tmp > 65535)
    1538:	fe 01       	movw	r30, r28
    153a:	e9 58       	subi	r30, 0x89	; 137
    153c:	ff 4f       	sbci	r31, 0xFF	; 255
    153e:	60 81       	ld	r22, Z
    1540:	71 81       	ldd	r23, Z+1	; 0x01
    1542:	82 81       	ldd	r24, Z+2	; 0x02
    1544:	93 81       	ldd	r25, Z+3	; 0x03
    1546:	20 e0       	ldi	r18, 0x00	; 0
    1548:	3f ef       	ldi	r19, 0xFF	; 255
    154a:	4f e7       	ldi	r20, 0x7F	; 127
    154c:	57 e4       	ldi	r21, 0x47	; 71
    154e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1552:	18 16       	cp	r1, r24
    1554:	0c f0       	brlt	.+2      	; 0x1558 <main+0x3f6>
    1556:	43 c0       	rjmp	.+134    	; 0x15de <main+0x47c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1558:	fe 01       	movw	r30, r28
    155a:	e5 58       	subi	r30, 0x85	; 133
    155c:	ff 4f       	sbci	r31, 0xFF	; 255
    155e:	60 81       	ld	r22, Z
    1560:	71 81       	ldd	r23, Z+1	; 0x01
    1562:	82 81       	ldd	r24, Z+2	; 0x02
    1564:	93 81       	ldd	r25, Z+3	; 0x03
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	40 e2       	ldi	r20, 0x20	; 32
    156c:	51 e4       	ldi	r21, 0x41	; 65
    156e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1572:	dc 01       	movw	r26, r24
    1574:	cb 01       	movw	r24, r22
    1576:	8e 01       	movw	r16, r28
    1578:	0b 58       	subi	r16, 0x8B	; 139
    157a:	1f 4f       	sbci	r17, 0xFF	; 255
    157c:	bc 01       	movw	r22, r24
    157e:	cd 01       	movw	r24, r26
    1580:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	f8 01       	movw	r30, r16
    158a:	91 83       	std	Z+1, r25	; 0x01
    158c:	80 83       	st	Z, r24
    158e:	1f c0       	rjmp	.+62     	; 0x15ce <main+0x46c>
    1590:	fe 01       	movw	r30, r28
    1592:	ed 58       	subi	r30, 0x8D	; 141
    1594:	ff 4f       	sbci	r31, 0xFF	; 255
    1596:	89 e1       	ldi	r24, 0x19	; 25
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	91 83       	std	Z+1, r25	; 0x01
    159c:	80 83       	st	Z, r24
    159e:	fe 01       	movw	r30, r28
    15a0:	ed 58       	subi	r30, 0x8D	; 141
    15a2:	ff 4f       	sbci	r31, 0xFF	; 255
    15a4:	80 81       	ld	r24, Z
    15a6:	91 81       	ldd	r25, Z+1	; 0x01
    15a8:	01 97       	sbiw	r24, 0x01	; 1
    15aa:	f1 f7       	brne	.-4      	; 0x15a8 <main+0x446>
    15ac:	fe 01       	movw	r30, r28
    15ae:	ed 58       	subi	r30, 0x8D	; 141
    15b0:	ff 4f       	sbci	r31, 0xFF	; 255
    15b2:	91 83       	std	Z+1, r25	; 0x01
    15b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b6:	de 01       	movw	r26, r28
    15b8:	ab 58       	subi	r26, 0x8B	; 139
    15ba:	bf 4f       	sbci	r27, 0xFF	; 255
    15bc:	fe 01       	movw	r30, r28
    15be:	eb 58       	subi	r30, 0x8B	; 139
    15c0:	ff 4f       	sbci	r31, 0xFF	; 255
    15c2:	80 81       	ld	r24, Z
    15c4:	91 81       	ldd	r25, Z+1	; 0x01
    15c6:	01 97       	sbiw	r24, 0x01	; 1
    15c8:	11 96       	adiw	r26, 0x01	; 1
    15ca:	9c 93       	st	X, r25
    15cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ce:	fe 01       	movw	r30, r28
    15d0:	eb 58       	subi	r30, 0x8B	; 139
    15d2:	ff 4f       	sbci	r31, 0xFF	; 255
    15d4:	80 81       	ld	r24, Z
    15d6:	91 81       	ldd	r25, Z+1	; 0x01
    15d8:	00 97       	sbiw	r24, 0x00	; 0
    15da:	d1 f6       	brne	.-76     	; 0x1590 <main+0x42e>
    15dc:	27 c0       	rjmp	.+78     	; 0x162c <main+0x4ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15de:	8e 01       	movw	r16, r28
    15e0:	0b 58       	subi	r16, 0x8B	; 139
    15e2:	1f 4f       	sbci	r17, 0xFF	; 255
    15e4:	fe 01       	movw	r30, r28
    15e6:	e9 58       	subi	r30, 0x89	; 137
    15e8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ea:	60 81       	ld	r22, Z
    15ec:	71 81       	ldd	r23, Z+1	; 0x01
    15ee:	82 81       	ldd	r24, Z+2	; 0x02
    15f0:	93 81       	ldd	r25, Z+3	; 0x03
    15f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	f8 01       	movw	r30, r16
    15fc:	91 83       	std	Z+1, r25	; 0x01
    15fe:	80 83       	st	Z, r24
    1600:	de 01       	movw	r26, r28
    1602:	af 58       	subi	r26, 0x8F	; 143
    1604:	bf 4f       	sbci	r27, 0xFF	; 255
    1606:	fe 01       	movw	r30, r28
    1608:	eb 58       	subi	r30, 0x8B	; 139
    160a:	ff 4f       	sbci	r31, 0xFF	; 255
    160c:	80 81       	ld	r24, Z
    160e:	91 81       	ldd	r25, Z+1	; 0x01
    1610:	8d 93       	st	X+, r24
    1612:	9c 93       	st	X, r25
    1614:	fe 01       	movw	r30, r28
    1616:	ef 58       	subi	r30, 0x8F	; 143
    1618:	ff 4f       	sbci	r31, 0xFF	; 255
    161a:	80 81       	ld	r24, Z
    161c:	91 81       	ldd	r25, Z+1	; 0x01
    161e:	01 97       	sbiw	r24, 0x01	; 1
    1620:	f1 f7       	brne	.-4      	; 0x161e <main+0x4bc>
    1622:	fe 01       	movw	r30, r28
    1624:	ef 58       	subi	r30, 0x8F	; 143
    1626:	ff 4f       	sbci	r31, 0xFF	; 255
    1628:	91 83       	std	Z+1, r25	; 0x01
    162a:	80 83       	st	Z, r24


		//Shifting Left every 250 ms
		else if (!(DIO_GetPinValue(PORTA, PIN1))){
			// Shift LEDs Left
					for(i=0; i<8;i++)
    162c:	de 01       	movw	r26, r28
    162e:	a4 56       	subi	r26, 0x64	; 100
    1630:	bf 4f       	sbci	r27, 0xFF	; 255
    1632:	fe 01       	movw	r30, r28
    1634:	e4 56       	subi	r30, 0x64	; 100
    1636:	ff 4f       	sbci	r31, 0xFF	; 255
    1638:	80 81       	ld	r24, Z
    163a:	8f 5f       	subi	r24, 0xFF	; 255
    163c:	8c 93       	st	X, r24
    163e:	fe 01       	movw	r30, r28
    1640:	e4 56       	subi	r30, 0x64	; 100
    1642:	ff 4f       	sbci	r31, 0xFF	; 255
    1644:	80 81       	ld	r24, Z
    1646:	88 30       	cpi	r24, 0x08	; 8
    1648:	08 f4       	brcc	.+2      	; 0x164c <main+0x4ea>
    164a:	2b cf       	rjmp	.-426    	; 0x14a2 <main+0x340>
    164c:	a7 cd       	rjmp	.-1202   	; 0x119c <main+0x3a>
						_delay_ms(250);
					}
				}

		//Shifting Right every 250 ms
		else if (!(DIO_GetPinValue(PORTA, PIN2))){
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	62 e0       	ldi	r22, 0x02	; 2
    1652:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_GetPinValue>
    1656:	88 23       	and	r24, r24
    1658:	09 f0       	breq	.+2      	; 0x165c <main+0x4fa>
    165a:	db c0       	rjmp	.+438    	; 0x1812 <main+0x6b0>
					// Shift LEDs Left
									for(i=0; i<8;i++)
    165c:	fe 01       	movw	r30, r28
    165e:	e4 56       	subi	r30, 0x64	; 100
    1660:	ff 4f       	sbci	r31, 0xFF	; 255
    1662:	10 82       	st	Z, r1
    1664:	ce c0       	rjmp	.+412    	; 0x1802 <main+0x6a0>
									{
										DIO_SetPortValue     (PORTC, 0x80>> i);
    1666:	fe 01       	movw	r30, r28
    1668:	e4 56       	subi	r30, 0x64	; 100
    166a:	ff 4f       	sbci	r31, 0xFF	; 255
    166c:	80 81       	ld	r24, Z
    166e:	28 2f       	mov	r18, r24
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	80 e8       	ldi	r24, 0x80	; 128
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	02 c0       	rjmp	.+4      	; 0x167c <main+0x51a>
    1678:	95 95       	asr	r25
    167a:	87 95       	ror	r24
    167c:	2a 95       	dec	r18
    167e:	e2 f7       	brpl	.-8      	; 0x1678 <main+0x516>
    1680:	98 2f       	mov	r25, r24
    1682:	82 e0       	ldi	r24, 0x02	; 2
    1684:	69 2f       	mov	r22, r25
    1686:	0e 94 70 08 	call	0x10e0	; 0x10e0 <DIO_SetPortValue>
    168a:	fe 01       	movw	r30, r28
    168c:	e3 59       	subi	r30, 0x93	; 147
    168e:	ff 4f       	sbci	r31, 0xFF	; 255
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	aa e7       	ldi	r26, 0x7A	; 122
    1696:	b3 e4       	ldi	r27, 0x43	; 67
    1698:	80 83       	st	Z, r24
    169a:	91 83       	std	Z+1, r25	; 0x01
    169c:	a2 83       	std	Z+2, r26	; 0x02
    169e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a0:	8e 01       	movw	r16, r28
    16a2:	07 59       	subi	r16, 0x97	; 151
    16a4:	1f 4f       	sbci	r17, 0xFF	; 255
    16a6:	fe 01       	movw	r30, r28
    16a8:	e3 59       	subi	r30, 0x93	; 147
    16aa:	ff 4f       	sbci	r31, 0xFF	; 255
    16ac:	60 81       	ld	r22, Z
    16ae:	71 81       	ldd	r23, Z+1	; 0x01
    16b0:	82 81       	ldd	r24, Z+2	; 0x02
    16b2:	93 81       	ldd	r25, Z+3	; 0x03
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	4a e7       	ldi	r20, 0x7A	; 122
    16ba:	53 e4       	ldi	r21, 0x43	; 67
    16bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	f8 01       	movw	r30, r16
    16c6:	80 83       	st	Z, r24
    16c8:	91 83       	std	Z+1, r25	; 0x01
    16ca:	a2 83       	std	Z+2, r26	; 0x02
    16cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16ce:	fe 01       	movw	r30, r28
    16d0:	e7 59       	subi	r30, 0x97	; 151
    16d2:	ff 4f       	sbci	r31, 0xFF	; 255
    16d4:	60 81       	ld	r22, Z
    16d6:	71 81       	ldd	r23, Z+1	; 0x01
    16d8:	82 81       	ldd	r24, Z+2	; 0x02
    16da:	93 81       	ldd	r25, Z+3	; 0x03
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	40 e8       	ldi	r20, 0x80	; 128
    16e2:	5f e3       	ldi	r21, 0x3F	; 63
    16e4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16e8:	88 23       	and	r24, r24
    16ea:	44 f4       	brge	.+16     	; 0x16fc <main+0x59a>
		__ticks = 1;
    16ec:	fe 01       	movw	r30, r28
    16ee:	e9 59       	subi	r30, 0x99	; 153
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	91 83       	std	Z+1, r25	; 0x01
    16f8:	80 83       	st	Z, r24
    16fa:	64 c0       	rjmp	.+200    	; 0x17c4 <main+0x662>
	else if (__tmp > 65535)
    16fc:	fe 01       	movw	r30, r28
    16fe:	e7 59       	subi	r30, 0x97	; 151
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	60 81       	ld	r22, Z
    1704:	71 81       	ldd	r23, Z+1	; 0x01
    1706:	82 81       	ldd	r24, Z+2	; 0x02
    1708:	93 81       	ldd	r25, Z+3	; 0x03
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	3f ef       	ldi	r19, 0xFF	; 255
    170e:	4f e7       	ldi	r20, 0x7F	; 127
    1710:	57 e4       	ldi	r21, 0x47	; 71
    1712:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1716:	18 16       	cp	r1, r24
    1718:	0c f0       	brlt	.+2      	; 0x171c <main+0x5ba>
    171a:	43 c0       	rjmp	.+134    	; 0x17a2 <main+0x640>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    171c:	fe 01       	movw	r30, r28
    171e:	e3 59       	subi	r30, 0x93	; 147
    1720:	ff 4f       	sbci	r31, 0xFF	; 255
    1722:	60 81       	ld	r22, Z
    1724:	71 81       	ldd	r23, Z+1	; 0x01
    1726:	82 81       	ldd	r24, Z+2	; 0x02
    1728:	93 81       	ldd	r25, Z+3	; 0x03
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	40 e2       	ldi	r20, 0x20	; 32
    1730:	51 e4       	ldi	r21, 0x41	; 65
    1732:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	8e 01       	movw	r16, r28
    173c:	09 59       	subi	r16, 0x99	; 153
    173e:	1f 4f       	sbci	r17, 0xFF	; 255
    1740:	bc 01       	movw	r22, r24
    1742:	cd 01       	movw	r24, r26
    1744:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	f8 01       	movw	r30, r16
    174e:	91 83       	std	Z+1, r25	; 0x01
    1750:	80 83       	st	Z, r24
    1752:	1f c0       	rjmp	.+62     	; 0x1792 <main+0x630>
    1754:	fe 01       	movw	r30, r28
    1756:	eb 59       	subi	r30, 0x9B	; 155
    1758:	ff 4f       	sbci	r31, 0xFF	; 255
    175a:	89 e1       	ldi	r24, 0x19	; 25
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	91 83       	std	Z+1, r25	; 0x01
    1760:	80 83       	st	Z, r24
    1762:	fe 01       	movw	r30, r28
    1764:	eb 59       	subi	r30, 0x9B	; 155
    1766:	ff 4f       	sbci	r31, 0xFF	; 255
    1768:	80 81       	ld	r24, Z
    176a:	91 81       	ldd	r25, Z+1	; 0x01
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	f1 f7       	brne	.-4      	; 0x176c <main+0x60a>
    1770:	fe 01       	movw	r30, r28
    1772:	eb 59       	subi	r30, 0x9B	; 155
    1774:	ff 4f       	sbci	r31, 0xFF	; 255
    1776:	91 83       	std	Z+1, r25	; 0x01
    1778:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    177a:	de 01       	movw	r26, r28
    177c:	a9 59       	subi	r26, 0x99	; 153
    177e:	bf 4f       	sbci	r27, 0xFF	; 255
    1780:	fe 01       	movw	r30, r28
    1782:	e9 59       	subi	r30, 0x99	; 153
    1784:	ff 4f       	sbci	r31, 0xFF	; 255
    1786:	80 81       	ld	r24, Z
    1788:	91 81       	ldd	r25, Z+1	; 0x01
    178a:	01 97       	sbiw	r24, 0x01	; 1
    178c:	11 96       	adiw	r26, 0x01	; 1
    178e:	9c 93       	st	X, r25
    1790:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1792:	fe 01       	movw	r30, r28
    1794:	e9 59       	subi	r30, 0x99	; 153
    1796:	ff 4f       	sbci	r31, 0xFF	; 255
    1798:	80 81       	ld	r24, Z
    179a:	91 81       	ldd	r25, Z+1	; 0x01
    179c:	00 97       	sbiw	r24, 0x00	; 0
    179e:	d1 f6       	brne	.-76     	; 0x1754 <main+0x5f2>
    17a0:	27 c0       	rjmp	.+78     	; 0x17f0 <main+0x68e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a2:	8e 01       	movw	r16, r28
    17a4:	09 59       	subi	r16, 0x99	; 153
    17a6:	1f 4f       	sbci	r17, 0xFF	; 255
    17a8:	fe 01       	movw	r30, r28
    17aa:	e7 59       	subi	r30, 0x97	; 151
    17ac:	ff 4f       	sbci	r31, 0xFF	; 255
    17ae:	60 81       	ld	r22, Z
    17b0:	71 81       	ldd	r23, Z+1	; 0x01
    17b2:	82 81       	ldd	r24, Z+2	; 0x02
    17b4:	93 81       	ldd	r25, Z+3	; 0x03
    17b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17ba:	dc 01       	movw	r26, r24
    17bc:	cb 01       	movw	r24, r22
    17be:	f8 01       	movw	r30, r16
    17c0:	91 83       	std	Z+1, r25	; 0x01
    17c2:	80 83       	st	Z, r24
    17c4:	de 01       	movw	r26, r28
    17c6:	ad 59       	subi	r26, 0x9D	; 157
    17c8:	bf 4f       	sbci	r27, 0xFF	; 255
    17ca:	fe 01       	movw	r30, r28
    17cc:	e9 59       	subi	r30, 0x99	; 153
    17ce:	ff 4f       	sbci	r31, 0xFF	; 255
    17d0:	80 81       	ld	r24, Z
    17d2:	91 81       	ldd	r25, Z+1	; 0x01
    17d4:	8d 93       	st	X+, r24
    17d6:	9c 93       	st	X, r25
    17d8:	fe 01       	movw	r30, r28
    17da:	ed 59       	subi	r30, 0x9D	; 157
    17dc:	ff 4f       	sbci	r31, 0xFF	; 255
    17de:	80 81       	ld	r24, Z
    17e0:	91 81       	ldd	r25, Z+1	; 0x01
    17e2:	01 97       	sbiw	r24, 0x01	; 1
    17e4:	f1 f7       	brne	.-4      	; 0x17e2 <main+0x680>
    17e6:	fe 01       	movw	r30, r28
    17e8:	ed 59       	subi	r30, 0x9D	; 157
    17ea:	ff 4f       	sbci	r31, 0xFF	; 255
    17ec:	91 83       	std	Z+1, r25	; 0x01
    17ee:	80 83       	st	Z, r24
				}

		//Shifting Right every 250 ms
		else if (!(DIO_GetPinValue(PORTA, PIN2))){
					// Shift LEDs Left
									for(i=0; i<8;i++)
    17f0:	de 01       	movw	r26, r28
    17f2:	a4 56       	subi	r26, 0x64	; 100
    17f4:	bf 4f       	sbci	r27, 0xFF	; 255
    17f6:	fe 01       	movw	r30, r28
    17f8:	e4 56       	subi	r30, 0x64	; 100
    17fa:	ff 4f       	sbci	r31, 0xFF	; 255
    17fc:	80 81       	ld	r24, Z
    17fe:	8f 5f       	subi	r24, 0xFF	; 255
    1800:	8c 93       	st	X, r24
    1802:	fe 01       	movw	r30, r28
    1804:	e4 56       	subi	r30, 0x64	; 100
    1806:	ff 4f       	sbci	r31, 0xFF	; 255
    1808:	80 81       	ld	r24, Z
    180a:	88 30       	cpi	r24, 0x08	; 8
    180c:	08 f4       	brcc	.+2      	; 0x1810 <main+0x6ae>
    180e:	2b cf       	rjmp	.-426    	; 0x1666 <main+0x504>
    1810:	c5 cc       	rjmp	.-1654   	; 0x119c <main+0x3a>
																}
									}


		//2-LEDs Converging every 300 ms
		else if (!(DIO_GetPinValue(PORTA, PIN3))){
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	63 e0       	ldi	r22, 0x03	; 3
    1816:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_GetPinValue>
    181a:	88 23       	and	r24, r24
    181c:	09 f0       	breq	.+2      	; 0x1820 <main+0x6be>
    181e:	ed c0       	rjmp	.+474    	; 0x19fa <main+0x898>

			for(i=0; i<4;i++){
    1820:	fe 01       	movw	r30, r28
    1822:	e4 56       	subi	r30, 0x64	; 100
    1824:	ff 4f       	sbci	r31, 0xFF	; 255
    1826:	10 82       	st	Z, r1
    1828:	e0 c0       	rjmp	.+448    	; 0x19ea <main+0x888>

				DIO_SetPortValue     (PORTC, 1 << i);
    182a:	fe 01       	movw	r30, r28
    182c:	e4 56       	subi	r30, 0x64	; 100
    182e:	ff 4f       	sbci	r31, 0xFF	; 255
    1830:	80 81       	ld	r24, Z
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <main+0x6de>
    183c:	88 0f       	add	r24, r24
    183e:	99 1f       	adc	r25, r25
    1840:	2a 95       	dec	r18
    1842:	e2 f7       	brpl	.-8      	; 0x183c <main+0x6da>
    1844:	98 2f       	mov	r25, r24
    1846:	82 e0       	ldi	r24, 0x02	; 2
    1848:	69 2f       	mov	r22, r25
    184a:	0e 94 70 08 	call	0x10e0	; 0x10e0 <DIO_SetPortValue>
				DIO_SetPortValue     (PORTD, 0x80>> i);
    184e:	fe 01       	movw	r30, r28
    1850:	e4 56       	subi	r30, 0x64	; 100
    1852:	ff 4f       	sbci	r31, 0xFF	; 255
    1854:	80 81       	ld	r24, Z
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	80 e8       	ldi	r24, 0x80	; 128
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <main+0x702>
    1860:	95 95       	asr	r25
    1862:	87 95       	ror	r24
    1864:	2a 95       	dec	r18
    1866:	e2 f7       	brpl	.-8      	; 0x1860 <main+0x6fe>
    1868:	98 2f       	mov	r25, r24
    186a:	83 e0       	ldi	r24, 0x03	; 3
    186c:	69 2f       	mov	r22, r25
    186e:	0e 94 70 08 	call	0x10e0	; 0x10e0 <DIO_SetPortValue>
    1872:	fe 01       	movw	r30, r28
    1874:	e1 5a       	subi	r30, 0xA1	; 161
    1876:	ff 4f       	sbci	r31, 0xFF	; 255
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	a6 e9       	ldi	r26, 0x96	; 150
    187e:	b3 e4       	ldi	r27, 0x43	; 67
    1880:	80 83       	st	Z, r24
    1882:	91 83       	std	Z+1, r25	; 0x01
    1884:	a2 83       	std	Z+2, r26	; 0x02
    1886:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1888:	8e 01       	movw	r16, r28
    188a:	05 5a       	subi	r16, 0xA5	; 165
    188c:	1f 4f       	sbci	r17, 0xFF	; 255
    188e:	fe 01       	movw	r30, r28
    1890:	e1 5a       	subi	r30, 0xA1	; 161
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	60 81       	ld	r22, Z
    1896:	71 81       	ldd	r23, Z+1	; 0x01
    1898:	82 81       	ldd	r24, Z+2	; 0x02
    189a:	93 81       	ldd	r25, Z+3	; 0x03
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	4a e7       	ldi	r20, 0x7A	; 122
    18a2:	53 e4       	ldi	r21, 0x43	; 67
    18a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	f8 01       	movw	r30, r16
    18ae:	80 83       	st	Z, r24
    18b0:	91 83       	std	Z+1, r25	; 0x01
    18b2:	a2 83       	std	Z+2, r26	; 0x02
    18b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18b6:	fe 01       	movw	r30, r28
    18b8:	e5 5a       	subi	r30, 0xA5	; 165
    18ba:	ff 4f       	sbci	r31, 0xFF	; 255
    18bc:	60 81       	ld	r22, Z
    18be:	71 81       	ldd	r23, Z+1	; 0x01
    18c0:	82 81       	ldd	r24, Z+2	; 0x02
    18c2:	93 81       	ldd	r25, Z+3	; 0x03
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	40 e8       	ldi	r20, 0x80	; 128
    18ca:	5f e3       	ldi	r21, 0x3F	; 63
    18cc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18d0:	88 23       	and	r24, r24
    18d2:	44 f4       	brge	.+16     	; 0x18e4 <main+0x782>
		__ticks = 1;
    18d4:	fe 01       	movw	r30, r28
    18d6:	e7 5a       	subi	r30, 0xA7	; 167
    18d8:	ff 4f       	sbci	r31, 0xFF	; 255
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	91 83       	std	Z+1, r25	; 0x01
    18e0:	80 83       	st	Z, r24
    18e2:	64 c0       	rjmp	.+200    	; 0x19ac <main+0x84a>
	else if (__tmp > 65535)
    18e4:	fe 01       	movw	r30, r28
    18e6:	e5 5a       	subi	r30, 0xA5	; 165
    18e8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ea:	60 81       	ld	r22, Z
    18ec:	71 81       	ldd	r23, Z+1	; 0x01
    18ee:	82 81       	ldd	r24, Z+2	; 0x02
    18f0:	93 81       	ldd	r25, Z+3	; 0x03
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	3f ef       	ldi	r19, 0xFF	; 255
    18f6:	4f e7       	ldi	r20, 0x7F	; 127
    18f8:	57 e4       	ldi	r21, 0x47	; 71
    18fa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18fe:	18 16       	cp	r1, r24
    1900:	0c f0       	brlt	.+2      	; 0x1904 <main+0x7a2>
    1902:	43 c0       	rjmp	.+134    	; 0x198a <main+0x828>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1904:	fe 01       	movw	r30, r28
    1906:	e1 5a       	subi	r30, 0xA1	; 161
    1908:	ff 4f       	sbci	r31, 0xFF	; 255
    190a:	60 81       	ld	r22, Z
    190c:	71 81       	ldd	r23, Z+1	; 0x01
    190e:	82 81       	ldd	r24, Z+2	; 0x02
    1910:	93 81       	ldd	r25, Z+3	; 0x03
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	40 e2       	ldi	r20, 0x20	; 32
    1918:	51 e4       	ldi	r21, 0x41	; 65
    191a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	8e 01       	movw	r16, r28
    1924:	07 5a       	subi	r16, 0xA7	; 167
    1926:	1f 4f       	sbci	r17, 0xFF	; 255
    1928:	bc 01       	movw	r22, r24
    192a:	cd 01       	movw	r24, r26
    192c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	f8 01       	movw	r30, r16
    1936:	91 83       	std	Z+1, r25	; 0x01
    1938:	80 83       	st	Z, r24
    193a:	1f c0       	rjmp	.+62     	; 0x197a <main+0x818>
    193c:	fe 01       	movw	r30, r28
    193e:	e9 5a       	subi	r30, 0xA9	; 169
    1940:	ff 4f       	sbci	r31, 0xFF	; 255
    1942:	89 e1       	ldi	r24, 0x19	; 25
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	91 83       	std	Z+1, r25	; 0x01
    1948:	80 83       	st	Z, r24
    194a:	fe 01       	movw	r30, r28
    194c:	e9 5a       	subi	r30, 0xA9	; 169
    194e:	ff 4f       	sbci	r31, 0xFF	; 255
    1950:	80 81       	ld	r24, Z
    1952:	91 81       	ldd	r25, Z+1	; 0x01
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	f1 f7       	brne	.-4      	; 0x1954 <main+0x7f2>
    1958:	fe 01       	movw	r30, r28
    195a:	e9 5a       	subi	r30, 0xA9	; 169
    195c:	ff 4f       	sbci	r31, 0xFF	; 255
    195e:	91 83       	std	Z+1, r25	; 0x01
    1960:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1962:	de 01       	movw	r26, r28
    1964:	a7 5a       	subi	r26, 0xA7	; 167
    1966:	bf 4f       	sbci	r27, 0xFF	; 255
    1968:	fe 01       	movw	r30, r28
    196a:	e7 5a       	subi	r30, 0xA7	; 167
    196c:	ff 4f       	sbci	r31, 0xFF	; 255
    196e:	80 81       	ld	r24, Z
    1970:	91 81       	ldd	r25, Z+1	; 0x01
    1972:	01 97       	sbiw	r24, 0x01	; 1
    1974:	11 96       	adiw	r26, 0x01	; 1
    1976:	9c 93       	st	X, r25
    1978:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    197a:	fe 01       	movw	r30, r28
    197c:	e7 5a       	subi	r30, 0xA7	; 167
    197e:	ff 4f       	sbci	r31, 0xFF	; 255
    1980:	80 81       	ld	r24, Z
    1982:	91 81       	ldd	r25, Z+1	; 0x01
    1984:	00 97       	sbiw	r24, 0x00	; 0
    1986:	d1 f6       	brne	.-76     	; 0x193c <main+0x7da>
    1988:	27 c0       	rjmp	.+78     	; 0x19d8 <main+0x876>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    198a:	8e 01       	movw	r16, r28
    198c:	07 5a       	subi	r16, 0xA7	; 167
    198e:	1f 4f       	sbci	r17, 0xFF	; 255
    1990:	fe 01       	movw	r30, r28
    1992:	e5 5a       	subi	r30, 0xA5	; 165
    1994:	ff 4f       	sbci	r31, 0xFF	; 255
    1996:	60 81       	ld	r22, Z
    1998:	71 81       	ldd	r23, Z+1	; 0x01
    199a:	82 81       	ldd	r24, Z+2	; 0x02
    199c:	93 81       	ldd	r25, Z+3	; 0x03
    199e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	f8 01       	movw	r30, r16
    19a8:	91 83       	std	Z+1, r25	; 0x01
    19aa:	80 83       	st	Z, r24
    19ac:	de 01       	movw	r26, r28
    19ae:	ab 5a       	subi	r26, 0xAB	; 171
    19b0:	bf 4f       	sbci	r27, 0xFF	; 255
    19b2:	fe 01       	movw	r30, r28
    19b4:	e7 5a       	subi	r30, 0xA7	; 167
    19b6:	ff 4f       	sbci	r31, 0xFF	; 255
    19b8:	80 81       	ld	r24, Z
    19ba:	91 81       	ldd	r25, Z+1	; 0x01
    19bc:	8d 93       	st	X+, r24
    19be:	9c 93       	st	X, r25
    19c0:	fe 01       	movw	r30, r28
    19c2:	eb 5a       	subi	r30, 0xAB	; 171
    19c4:	ff 4f       	sbci	r31, 0xFF	; 255
    19c6:	80 81       	ld	r24, Z
    19c8:	91 81       	ldd	r25, Z+1	; 0x01
    19ca:	01 97       	sbiw	r24, 0x01	; 1
    19cc:	f1 f7       	brne	.-4      	; 0x19ca <main+0x868>
    19ce:	fe 01       	movw	r30, r28
    19d0:	eb 5a       	subi	r30, 0xAB	; 171
    19d2:	ff 4f       	sbci	r31, 0xFF	; 255
    19d4:	91 83       	std	Z+1, r25	; 0x01
    19d6:	80 83       	st	Z, r24


		//2-LEDs Converging every 300 ms
		else if (!(DIO_GetPinValue(PORTA, PIN3))){

			for(i=0; i<4;i++){
    19d8:	de 01       	movw	r26, r28
    19da:	a4 56       	subi	r26, 0x64	; 100
    19dc:	bf 4f       	sbci	r27, 0xFF	; 255
    19de:	fe 01       	movw	r30, r28
    19e0:	e4 56       	subi	r30, 0x64	; 100
    19e2:	ff 4f       	sbci	r31, 0xFF	; 255
    19e4:	80 81       	ld	r24, Z
    19e6:	8f 5f       	subi	r24, 0xFF	; 255
    19e8:	8c 93       	st	X, r24
    19ea:	fe 01       	movw	r30, r28
    19ec:	e4 56       	subi	r30, 0x64	; 100
    19ee:	ff 4f       	sbci	r31, 0xFF	; 255
    19f0:	80 81       	ld	r24, Z
    19f2:	84 30       	cpi	r24, 0x04	; 4
    19f4:	08 f4       	brcc	.+2      	; 0x19f8 <main+0x896>
    19f6:	19 cf       	rjmp	.-462    	; 0x182a <main+0x6c8>
    19f8:	d1 cb       	rjmp	.-2142   	; 0x119c <main+0x3a>

									}
		}

		//2-LEDs Diverging every 300 ms
		else if (!(DIO_GetPinValue(PORTA,PIN4))){
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	64 e0       	ldi	r22, 0x04	; 4
    19fe:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_GetPinValue>
    1a02:	88 23       	and	r24, r24
    1a04:	09 f0       	breq	.+2      	; 0x1a08 <main+0x8a6>
    1a06:	ed c0       	rjmp	.+474    	; 0x1be2 <main+0xa80>

				for(i=0; i<4;i++){
    1a08:	fe 01       	movw	r30, r28
    1a0a:	e4 56       	subi	r30, 0x64	; 100
    1a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0e:	10 82       	st	Z, r1
    1a10:	e0 c0       	rjmp	.+448    	; 0x1bd2 <main+0xa70>
					DIO_SetPortValue     (PORTC, 0b00010000 << i);
    1a12:	fe 01       	movw	r30, r28
    1a14:	e4 56       	subi	r30, 0x64	; 100
    1a16:	ff 4f       	sbci	r31, 0xFF	; 255
    1a18:	80 81       	ld	r24, Z
    1a1a:	28 2f       	mov	r18, r24
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	80 e1       	ldi	r24, 0x10	; 16
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <main+0x8c6>
    1a24:	88 0f       	add	r24, r24
    1a26:	99 1f       	adc	r25, r25
    1a28:	2a 95       	dec	r18
    1a2a:	e2 f7       	brpl	.-8      	; 0x1a24 <main+0x8c2>
    1a2c:	98 2f       	mov	r25, r24
    1a2e:	82 e0       	ldi	r24, 0x02	; 2
    1a30:	69 2f       	mov	r22, r25
    1a32:	0e 94 70 08 	call	0x10e0	; 0x10e0 <DIO_SetPortValue>
					DIO_SetPortValue     (PORTD, 0b00001000>> i);
    1a36:	fe 01       	movw	r30, r28
    1a38:	e4 56       	subi	r30, 0x64	; 100
    1a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3c:	80 81       	ld	r24, Z
    1a3e:	28 2f       	mov	r18, r24
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	88 e0       	ldi	r24, 0x08	; 8
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	02 c0       	rjmp	.+4      	; 0x1a4c <main+0x8ea>
    1a48:	95 95       	asr	r25
    1a4a:	87 95       	ror	r24
    1a4c:	2a 95       	dec	r18
    1a4e:	e2 f7       	brpl	.-8      	; 0x1a48 <main+0x8e6>
    1a50:	98 2f       	mov	r25, r24
    1a52:	83 e0       	ldi	r24, 0x03	; 3
    1a54:	69 2f       	mov	r22, r25
    1a56:	0e 94 70 08 	call	0x10e0	; 0x10e0 <DIO_SetPortValue>
    1a5a:	fe 01       	movw	r30, r28
    1a5c:	ef 5a       	subi	r30, 0xAF	; 175
    1a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	aa ef       	ldi	r26, 0xFA	; 250
    1a66:	b3 e4       	ldi	r27, 0x43	; 67
    1a68:	80 83       	st	Z, r24
    1a6a:	91 83       	std	Z+1, r25	; 0x01
    1a6c:	a2 83       	std	Z+2, r26	; 0x02
    1a6e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a70:	8e 01       	movw	r16, r28
    1a72:	03 5b       	subi	r16, 0xB3	; 179
    1a74:	1f 4f       	sbci	r17, 0xFF	; 255
    1a76:	fe 01       	movw	r30, r28
    1a78:	ef 5a       	subi	r30, 0xAF	; 175
    1a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7c:	60 81       	ld	r22, Z
    1a7e:	71 81       	ldd	r23, Z+1	; 0x01
    1a80:	82 81       	ldd	r24, Z+2	; 0x02
    1a82:	93 81       	ldd	r25, Z+3	; 0x03
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	4a e7       	ldi	r20, 0x7A	; 122
    1a8a:	53 e4       	ldi	r21, 0x43	; 67
    1a8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	f8 01       	movw	r30, r16
    1a96:	80 83       	st	Z, r24
    1a98:	91 83       	std	Z+1, r25	; 0x01
    1a9a:	a2 83       	std	Z+2, r26	; 0x02
    1a9c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a9e:	fe 01       	movw	r30, r28
    1aa0:	e3 5b       	subi	r30, 0xB3	; 179
    1aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa4:	60 81       	ld	r22, Z
    1aa6:	71 81       	ldd	r23, Z+1	; 0x01
    1aa8:	82 81       	ldd	r24, Z+2	; 0x02
    1aaa:	93 81       	ldd	r25, Z+3	; 0x03
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	40 e8       	ldi	r20, 0x80	; 128
    1ab2:	5f e3       	ldi	r21, 0x3F	; 63
    1ab4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ab8:	88 23       	and	r24, r24
    1aba:	44 f4       	brge	.+16     	; 0x1acc <main+0x96a>
		__ticks = 1;
    1abc:	fe 01       	movw	r30, r28
    1abe:	e5 5b       	subi	r30, 0xB5	; 181
    1ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	91 83       	std	Z+1, r25	; 0x01
    1ac8:	80 83       	st	Z, r24
    1aca:	64 c0       	rjmp	.+200    	; 0x1b94 <main+0xa32>
	else if (__tmp > 65535)
    1acc:	fe 01       	movw	r30, r28
    1ace:	e3 5b       	subi	r30, 0xB3	; 179
    1ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad2:	60 81       	ld	r22, Z
    1ad4:	71 81       	ldd	r23, Z+1	; 0x01
    1ad6:	82 81       	ldd	r24, Z+2	; 0x02
    1ad8:	93 81       	ldd	r25, Z+3	; 0x03
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	3f ef       	ldi	r19, 0xFF	; 255
    1ade:	4f e7       	ldi	r20, 0x7F	; 127
    1ae0:	57 e4       	ldi	r21, 0x47	; 71
    1ae2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ae6:	18 16       	cp	r1, r24
    1ae8:	0c f0       	brlt	.+2      	; 0x1aec <main+0x98a>
    1aea:	43 c0       	rjmp	.+134    	; 0x1b72 <main+0xa10>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aec:	fe 01       	movw	r30, r28
    1aee:	ef 5a       	subi	r30, 0xAF	; 175
    1af0:	ff 4f       	sbci	r31, 0xFF	; 255
    1af2:	60 81       	ld	r22, Z
    1af4:	71 81       	ldd	r23, Z+1	; 0x01
    1af6:	82 81       	ldd	r24, Z+2	; 0x02
    1af8:	93 81       	ldd	r25, Z+3	; 0x03
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	40 e2       	ldi	r20, 0x20	; 32
    1b00:	51 e4       	ldi	r21, 0x41	; 65
    1b02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	8e 01       	movw	r16, r28
    1b0c:	05 5b       	subi	r16, 0xB5	; 181
    1b0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b10:	bc 01       	movw	r22, r24
    1b12:	cd 01       	movw	r24, r26
    1b14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	f8 01       	movw	r30, r16
    1b1e:	91 83       	std	Z+1, r25	; 0x01
    1b20:	80 83       	st	Z, r24
    1b22:	1f c0       	rjmp	.+62     	; 0x1b62 <main+0xa00>
    1b24:	fe 01       	movw	r30, r28
    1b26:	e7 5b       	subi	r30, 0xB7	; 183
    1b28:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2a:	89 e1       	ldi	r24, 0x19	; 25
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	91 83       	std	Z+1, r25	; 0x01
    1b30:	80 83       	st	Z, r24
    1b32:	fe 01       	movw	r30, r28
    1b34:	e7 5b       	subi	r30, 0xB7	; 183
    1b36:	ff 4f       	sbci	r31, 0xFF	; 255
    1b38:	80 81       	ld	r24, Z
    1b3a:	91 81       	ldd	r25, Z+1	; 0x01
    1b3c:	01 97       	sbiw	r24, 0x01	; 1
    1b3e:	f1 f7       	brne	.-4      	; 0x1b3c <main+0x9da>
    1b40:	fe 01       	movw	r30, r28
    1b42:	e7 5b       	subi	r30, 0xB7	; 183
    1b44:	ff 4f       	sbci	r31, 0xFF	; 255
    1b46:	91 83       	std	Z+1, r25	; 0x01
    1b48:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b4a:	de 01       	movw	r26, r28
    1b4c:	a5 5b       	subi	r26, 0xB5	; 181
    1b4e:	bf 4f       	sbci	r27, 0xFF	; 255
    1b50:	fe 01       	movw	r30, r28
    1b52:	e5 5b       	subi	r30, 0xB5	; 181
    1b54:	ff 4f       	sbci	r31, 0xFF	; 255
    1b56:	80 81       	ld	r24, Z
    1b58:	91 81       	ldd	r25, Z+1	; 0x01
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	11 96       	adiw	r26, 0x01	; 1
    1b5e:	9c 93       	st	X, r25
    1b60:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b62:	fe 01       	movw	r30, r28
    1b64:	e5 5b       	subi	r30, 0xB5	; 181
    1b66:	ff 4f       	sbci	r31, 0xFF	; 255
    1b68:	80 81       	ld	r24, Z
    1b6a:	91 81       	ldd	r25, Z+1	; 0x01
    1b6c:	00 97       	sbiw	r24, 0x00	; 0
    1b6e:	d1 f6       	brne	.-76     	; 0x1b24 <main+0x9c2>
    1b70:	27 c0       	rjmp	.+78     	; 0x1bc0 <main+0xa5e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b72:	8e 01       	movw	r16, r28
    1b74:	05 5b       	subi	r16, 0xB5	; 181
    1b76:	1f 4f       	sbci	r17, 0xFF	; 255
    1b78:	fe 01       	movw	r30, r28
    1b7a:	e3 5b       	subi	r30, 0xB3	; 179
    1b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7e:	60 81       	ld	r22, Z
    1b80:	71 81       	ldd	r23, Z+1	; 0x01
    1b82:	82 81       	ldd	r24, Z+2	; 0x02
    1b84:	93 81       	ldd	r25, Z+3	; 0x03
    1b86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	f8 01       	movw	r30, r16
    1b90:	91 83       	std	Z+1, r25	; 0x01
    1b92:	80 83       	st	Z, r24
    1b94:	de 01       	movw	r26, r28
    1b96:	a9 5b       	subi	r26, 0xB9	; 185
    1b98:	bf 4f       	sbci	r27, 0xFF	; 255
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	e5 5b       	subi	r30, 0xB5	; 181
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	80 81       	ld	r24, Z
    1ba2:	91 81       	ldd	r25, Z+1	; 0x01
    1ba4:	8d 93       	st	X+, r24
    1ba6:	9c 93       	st	X, r25
    1ba8:	fe 01       	movw	r30, r28
    1baa:	e9 5b       	subi	r30, 0xB9	; 185
    1bac:	ff 4f       	sbci	r31, 0xFF	; 255
    1bae:	80 81       	ld	r24, Z
    1bb0:	91 81       	ldd	r25, Z+1	; 0x01
    1bb2:	01 97       	sbiw	r24, 0x01	; 1
    1bb4:	f1 f7       	brne	.-4      	; 0x1bb2 <main+0xa50>
    1bb6:	fe 01       	movw	r30, r28
    1bb8:	e9 5b       	subi	r30, 0xB9	; 185
    1bba:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbc:	91 83       	std	Z+1, r25	; 0x01
    1bbe:	80 83       	st	Z, r24
		}

		//2-LEDs Diverging every 300 ms
		else if (!(DIO_GetPinValue(PORTA,PIN4))){

				for(i=0; i<4;i++){
    1bc0:	de 01       	movw	r26, r28
    1bc2:	a4 56       	subi	r26, 0x64	; 100
    1bc4:	bf 4f       	sbci	r27, 0xFF	; 255
    1bc6:	fe 01       	movw	r30, r28
    1bc8:	e4 56       	subi	r30, 0x64	; 100
    1bca:	ff 4f       	sbci	r31, 0xFF	; 255
    1bcc:	80 81       	ld	r24, Z
    1bce:	8f 5f       	subi	r24, 0xFF	; 255
    1bd0:	8c 93       	st	X, r24
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	e4 56       	subi	r30, 0x64	; 100
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	80 81       	ld	r24, Z
    1bda:	84 30       	cpi	r24, 0x04	; 4
    1bdc:	08 f4       	brcc	.+2      	; 0x1be0 <main+0xa7e>
    1bde:	19 cf       	rjmp	.-462    	; 0x1a12 <main+0x8b0>
    1be0:	dd ca       	rjmp	.-2630   	; 0x119c <main+0x3a>

										}
			}

		//Ping Pong effect every 250 ms
		else if (!(DIO_GetPinValue(PORTA,PIN5))){
    1be2:	80 e0       	ldi	r24, 0x00	; 0
    1be4:	65 e0       	ldi	r22, 0x05	; 5
    1be6:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_GetPinValue>
    1bea:	88 23       	and	r24, r24
    1bec:	09 f0       	breq	.+2      	; 0x1bf0 <main+0xa8e>
    1bee:	46 c1       	rjmp	.+652    	; 0x1e7c <main+0xd1a>

					for(i=0; i<8;i++){
    1bf0:	fe 01       	movw	r30, r28
    1bf2:	e4 56       	subi	r30, 0x64	; 100
    1bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf6:	10 82       	st	Z, r1
    1bf8:	a0 c0       	rjmp	.+320    	; 0x1d3a <main+0xbd8>
					DIO_SetPortValue     (PORTC, 1<< i);
    1bfa:	fe 01       	movw	r30, r28
    1bfc:	e4 56       	subi	r30, 0x64	; 100
    1bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1c00:	80 81       	ld	r24, Z
    1c02:	28 2f       	mov	r18, r24
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	02 c0       	rjmp	.+4      	; 0x1c10 <main+0xaae>
    1c0c:	88 0f       	add	r24, r24
    1c0e:	99 1f       	adc	r25, r25
    1c10:	2a 95       	dec	r18
    1c12:	e2 f7       	brpl	.-8      	; 0x1c0c <main+0xaaa>
    1c14:	98 2f       	mov	r25, r24
    1c16:	82 e0       	ldi	r24, 0x02	; 2
    1c18:	69 2f       	mov	r22, r25
    1c1a:	0e 94 70 08 	call	0x10e0	; 0x10e0 <DIO_SetPortValue>
    1c1e:	fe 01       	movw	r30, r28
    1c20:	ed 5b       	subi	r30, 0xBD	; 189
    1c22:	ff 4f       	sbci	r31, 0xFF	; 255
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	aa e7       	ldi	r26, 0x7A	; 122
    1c2a:	b3 e4       	ldi	r27, 0x43	; 67
    1c2c:	80 83       	st	Z, r24
    1c2e:	91 83       	std	Z+1, r25	; 0x01
    1c30:	a2 83       	std	Z+2, r26	; 0x02
    1c32:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c34:	8e 01       	movw	r16, r28
    1c36:	01 5c       	subi	r16, 0xC1	; 193
    1c38:	1f 4f       	sbci	r17, 0xFF	; 255
    1c3a:	fe 01       	movw	r30, r28
    1c3c:	ed 5b       	subi	r30, 0xBD	; 189
    1c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c40:	60 81       	ld	r22, Z
    1c42:	71 81       	ldd	r23, Z+1	; 0x01
    1c44:	82 81       	ldd	r24, Z+2	; 0x02
    1c46:	93 81       	ldd	r25, Z+3	; 0x03
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	4a e7       	ldi	r20, 0x7A	; 122
    1c4e:	53 e4       	ldi	r21, 0x43	; 67
    1c50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	f8 01       	movw	r30, r16
    1c5a:	80 83       	st	Z, r24
    1c5c:	91 83       	std	Z+1, r25	; 0x01
    1c5e:	a2 83       	std	Z+2, r26	; 0x02
    1c60:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c62:	fe 01       	movw	r30, r28
    1c64:	ff 96       	adiw	r30, 0x3f	; 63
    1c66:	60 81       	ld	r22, Z
    1c68:	71 81       	ldd	r23, Z+1	; 0x01
    1c6a:	82 81       	ldd	r24, Z+2	; 0x02
    1c6c:	93 81       	ldd	r25, Z+3	; 0x03
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	40 e8       	ldi	r20, 0x80	; 128
    1c74:	5f e3       	ldi	r21, 0x3F	; 63
    1c76:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c7a:	88 23       	and	r24, r24
    1c7c:	2c f4       	brge	.+10     	; 0x1c88 <main+0xb26>
		__ticks = 1;
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	9e af       	std	Y+62, r25	; 0x3e
    1c84:	8d af       	std	Y+61, r24	; 0x3d
    1c86:	46 c0       	rjmp	.+140    	; 0x1d14 <main+0xbb2>
	else if (__tmp > 65535)
    1c88:	fe 01       	movw	r30, r28
    1c8a:	ff 96       	adiw	r30, 0x3f	; 63
    1c8c:	60 81       	ld	r22, Z
    1c8e:	71 81       	ldd	r23, Z+1	; 0x01
    1c90:	82 81       	ldd	r24, Z+2	; 0x02
    1c92:	93 81       	ldd	r25, Z+3	; 0x03
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	3f ef       	ldi	r19, 0xFF	; 255
    1c98:	4f e7       	ldi	r20, 0x7F	; 127
    1c9a:	57 e4       	ldi	r21, 0x47	; 71
    1c9c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ca0:	18 16       	cp	r1, r24
    1ca2:	64 f5       	brge	.+88     	; 0x1cfc <main+0xb9a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca4:	fe 01       	movw	r30, r28
    1ca6:	ed 5b       	subi	r30, 0xBD	; 189
    1ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    1caa:	60 81       	ld	r22, Z
    1cac:	71 81       	ldd	r23, Z+1	; 0x01
    1cae:	82 81       	ldd	r24, Z+2	; 0x02
    1cb0:	93 81       	ldd	r25, Z+3	; 0x03
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	40 e2       	ldi	r20, 0x20	; 32
    1cb8:	51 e4       	ldi	r21, 0x41	; 65
    1cba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	bc 01       	movw	r22, r24
    1cc4:	cd 01       	movw	r24, r26
    1cc6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cca:	dc 01       	movw	r26, r24
    1ccc:	cb 01       	movw	r24, r22
    1cce:	9e af       	std	Y+62, r25	; 0x3e
    1cd0:	8d af       	std	Y+61, r24	; 0x3d
    1cd2:	0f c0       	rjmp	.+30     	; 0x1cf2 <main+0xb90>
    1cd4:	89 e1       	ldi	r24, 0x19	; 25
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	9c af       	std	Y+60, r25	; 0x3c
    1cda:	8b af       	std	Y+59, r24	; 0x3b
    1cdc:	8b ad       	ldd	r24, Y+59	; 0x3b
    1cde:	9c ad       	ldd	r25, Y+60	; 0x3c
    1ce0:	01 97       	sbiw	r24, 0x01	; 1
    1ce2:	f1 f7       	brne	.-4      	; 0x1ce0 <main+0xb7e>
    1ce4:	9c af       	std	Y+60, r25	; 0x3c
    1ce6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cea:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	9e af       	std	Y+62, r25	; 0x3e
    1cf0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cf4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cf6:	00 97       	sbiw	r24, 0x00	; 0
    1cf8:	69 f7       	brne	.-38     	; 0x1cd4 <main+0xb72>
    1cfa:	16 c0       	rjmp	.+44     	; 0x1d28 <main+0xbc6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cfc:	fe 01       	movw	r30, r28
    1cfe:	ff 96       	adiw	r30, 0x3f	; 63
    1d00:	60 81       	ld	r22, Z
    1d02:	71 81       	ldd	r23, Z+1	; 0x01
    1d04:	82 81       	ldd	r24, Z+2	; 0x02
    1d06:	93 81       	ldd	r25, Z+3	; 0x03
    1d08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	9e af       	std	Y+62, r25	; 0x3e
    1d12:	8d af       	std	Y+61, r24	; 0x3d
    1d14:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d16:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d18:	9a af       	std	Y+58, r25	; 0x3a
    1d1a:	89 af       	std	Y+57, r24	; 0x39
    1d1c:	89 ad       	ldd	r24, Y+57	; 0x39
    1d1e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	f1 f7       	brne	.-4      	; 0x1d20 <main+0xbbe>
    1d24:	9a af       	std	Y+58, r25	; 0x3a
    1d26:	89 af       	std	Y+57, r24	; 0x39
			}

		//Ping Pong effect every 250 ms
		else if (!(DIO_GetPinValue(PORTA,PIN5))){

					for(i=0; i<8;i++){
    1d28:	de 01       	movw	r26, r28
    1d2a:	a4 56       	subi	r26, 0x64	; 100
    1d2c:	bf 4f       	sbci	r27, 0xFF	; 255
    1d2e:	fe 01       	movw	r30, r28
    1d30:	e4 56       	subi	r30, 0x64	; 100
    1d32:	ff 4f       	sbci	r31, 0xFF	; 255
    1d34:	80 81       	ld	r24, Z
    1d36:	8f 5f       	subi	r24, 0xFF	; 255
    1d38:	8c 93       	st	X, r24
    1d3a:	fe 01       	movw	r30, r28
    1d3c:	e4 56       	subi	r30, 0x64	; 100
    1d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d40:	80 81       	ld	r24, Z
    1d42:	88 30       	cpi	r24, 0x08	; 8
    1d44:	08 f4       	brcc	.+2      	; 0x1d48 <main+0xbe6>
    1d46:	59 cf       	rjmp	.-334    	; 0x1bfa <main+0xa98>
					DIO_SetPortValue     (PORTC, 1<< i);
							_delay_ms(250);
				}

					for(j=0; j<8;j++){
    1d48:	fe 01       	movw	r30, r28
    1d4a:	e5 56       	subi	r30, 0x65	; 101
    1d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4e:	10 82       	st	Z, r1
    1d50:	8d c0       	rjmp	.+282    	; 0x1e6c <main+0xd0a>
						DIO_SetPortValue     (PORTC, 0x80 >> j);
    1d52:	fe 01       	movw	r30, r28
    1d54:	e5 56       	subi	r30, 0x65	; 101
    1d56:	ff 4f       	sbci	r31, 0xFF	; 255
    1d58:	80 81       	ld	r24, Z
    1d5a:	28 2f       	mov	r18, r24
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	80 e8       	ldi	r24, 0x80	; 128
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	02 c0       	rjmp	.+4      	; 0x1d68 <main+0xc06>
    1d64:	95 95       	asr	r25
    1d66:	87 95       	ror	r24
    1d68:	2a 95       	dec	r18
    1d6a:	e2 f7       	brpl	.-8      	; 0x1d64 <main+0xc02>
    1d6c:	98 2f       	mov	r25, r24
    1d6e:	82 e0       	ldi	r24, 0x02	; 2
    1d70:	69 2f       	mov	r22, r25
    1d72:	0e 94 70 08 	call	0x10e0	; 0x10e0 <DIO_SetPortValue>
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	aa e7       	ldi	r26, 0x7A	; 122
    1d7c:	b3 e4       	ldi	r27, 0x43	; 67
    1d7e:	8d ab       	std	Y+53, r24	; 0x35
    1d80:	9e ab       	std	Y+54, r25	; 0x36
    1d82:	af ab       	std	Y+55, r26	; 0x37
    1d84:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d86:	6d a9       	ldd	r22, Y+53	; 0x35
    1d88:	7e a9       	ldd	r23, Y+54	; 0x36
    1d8a:	8f a9       	ldd	r24, Y+55	; 0x37
    1d8c:	98 ad       	ldd	r25, Y+56	; 0x38
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	4a e7       	ldi	r20, 0x7A	; 122
    1d94:	53 e4       	ldi	r21, 0x43	; 67
    1d96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	89 ab       	std	Y+49, r24	; 0x31
    1da0:	9a ab       	std	Y+50, r25	; 0x32
    1da2:	ab ab       	std	Y+51, r26	; 0x33
    1da4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1da6:	69 a9       	ldd	r22, Y+49	; 0x31
    1da8:	7a a9       	ldd	r23, Y+50	; 0x32
    1daa:	8b a9       	ldd	r24, Y+51	; 0x33
    1dac:	9c a9       	ldd	r25, Y+52	; 0x34
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	40 e8       	ldi	r20, 0x80	; 128
    1db4:	5f e3       	ldi	r21, 0x3F	; 63
    1db6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dba:	88 23       	and	r24, r24
    1dbc:	2c f4       	brge	.+10     	; 0x1dc8 <main+0xc66>
		__ticks = 1;
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	98 ab       	std	Y+48, r25	; 0x30
    1dc4:	8f a7       	std	Y+47, r24	; 0x2f
    1dc6:	3f c0       	rjmp	.+126    	; 0x1e46 <main+0xce4>
	else if (__tmp > 65535)
    1dc8:	69 a9       	ldd	r22, Y+49	; 0x31
    1dca:	7a a9       	ldd	r23, Y+50	; 0x32
    1dcc:	8b a9       	ldd	r24, Y+51	; 0x33
    1dce:	9c a9       	ldd	r25, Y+52	; 0x34
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	3f ef       	ldi	r19, 0xFF	; 255
    1dd4:	4f e7       	ldi	r20, 0x7F	; 127
    1dd6:	57 e4       	ldi	r21, 0x47	; 71
    1dd8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ddc:	18 16       	cp	r1, r24
    1dde:	4c f5       	brge	.+82     	; 0x1e32 <main+0xcd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de0:	6d a9       	ldd	r22, Y+53	; 0x35
    1de2:	7e a9       	ldd	r23, Y+54	; 0x36
    1de4:	8f a9       	ldd	r24, Y+55	; 0x37
    1de6:	98 ad       	ldd	r25, Y+56	; 0x38
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	40 e2       	ldi	r20, 0x20	; 32
    1dee:	51 e4       	ldi	r21, 0x41	; 65
    1df0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	bc 01       	movw	r22, r24
    1dfa:	cd 01       	movw	r24, r26
    1dfc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	98 ab       	std	Y+48, r25	; 0x30
    1e06:	8f a7       	std	Y+47, r24	; 0x2f
    1e08:	0f c0       	rjmp	.+30     	; 0x1e28 <main+0xcc6>
    1e0a:	89 e1       	ldi	r24, 0x19	; 25
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	9e a7       	std	Y+46, r25	; 0x2e
    1e10:	8d a7       	std	Y+45, r24	; 0x2d
    1e12:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e14:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	f1 f7       	brne	.-4      	; 0x1e16 <main+0xcb4>
    1e1a:	9e a7       	std	Y+46, r25	; 0x2e
    1e1c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e20:	98 a9       	ldd	r25, Y+48	; 0x30
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	98 ab       	std	Y+48, r25	; 0x30
    1e26:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e28:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e2a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e2c:	00 97       	sbiw	r24, 0x00	; 0
    1e2e:	69 f7       	brne	.-38     	; 0x1e0a <main+0xca8>
    1e30:	14 c0       	rjmp	.+40     	; 0x1e5a <main+0xcf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e32:	69 a9       	ldd	r22, Y+49	; 0x31
    1e34:	7a a9       	ldd	r23, Y+50	; 0x32
    1e36:	8b a9       	ldd	r24, Y+51	; 0x33
    1e38:	9c a9       	ldd	r25, Y+52	; 0x34
    1e3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e3e:	dc 01       	movw	r26, r24
    1e40:	cb 01       	movw	r24, r22
    1e42:	98 ab       	std	Y+48, r25	; 0x30
    1e44:	8f a7       	std	Y+47, r24	; 0x2f
    1e46:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e48:	98 a9       	ldd	r25, Y+48	; 0x30
    1e4a:	9c a7       	std	Y+44, r25	; 0x2c
    1e4c:	8b a7       	std	Y+43, r24	; 0x2b
    1e4e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e50:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e52:	01 97       	sbiw	r24, 0x01	; 1
    1e54:	f1 f7       	brne	.-4      	; 0x1e52 <main+0xcf0>
    1e56:	9c a7       	std	Y+44, r25	; 0x2c
    1e58:	8b a7       	std	Y+43, r24	; 0x2b
					for(i=0; i<8;i++){
					DIO_SetPortValue     (PORTC, 1<< i);
							_delay_ms(250);
				}

					for(j=0; j<8;j++){
    1e5a:	de 01       	movw	r26, r28
    1e5c:	a5 56       	subi	r26, 0x65	; 101
    1e5e:	bf 4f       	sbci	r27, 0xFF	; 255
    1e60:	fe 01       	movw	r30, r28
    1e62:	e5 56       	subi	r30, 0x65	; 101
    1e64:	ff 4f       	sbci	r31, 0xFF	; 255
    1e66:	80 81       	ld	r24, Z
    1e68:	8f 5f       	subi	r24, 0xFF	; 255
    1e6a:	8c 93       	st	X, r24
    1e6c:	fe 01       	movw	r30, r28
    1e6e:	e5 56       	subi	r30, 0x65	; 101
    1e70:	ff 4f       	sbci	r31, 0xFF	; 255
    1e72:	80 81       	ld	r24, Z
    1e74:	88 30       	cpi	r24, 0x08	; 8
    1e76:	08 f4       	brcc	.+2      	; 0x1e7a <main+0xd18>
    1e78:	6c cf       	rjmp	.-296    	; 0x1d52 <main+0xbf0>
    1e7a:	90 c9       	rjmp	.-3296   	; 0x119c <main+0x3a>


				}

// Incrementing (Snake effect) every 300 ms
		else if (!(DIO_GetPinValue(PORTA,PIN6))){
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	66 e0       	ldi	r22, 0x06	; 6
    1e80:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_GetPinValue>
    1e84:	88 23       	and	r24, r24
    1e86:	09 f0       	breq	.+2      	; 0x1e8a <main+0xd28>
    1e88:	94 c0       	rjmp	.+296    	; 0x1fb2 <main+0xe50>
				for(i=0; i<8;i++){
    1e8a:	fe 01       	movw	r30, r28
    1e8c:	e4 56       	subi	r30, 0x64	; 100
    1e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e90:	10 82       	st	Z, r1
    1e92:	87 c0       	rjmp	.+270    	; 0x1fa2 <main+0xe40>
				DIO_SetPortValue     (PORTC, 0xFF);
    1e94:	82 e0       	ldi	r24, 0x02	; 2
    1e96:	6f ef       	ldi	r22, 0xFF	; 255
    1e98:	0e 94 70 08 	call	0x10e0	; 0x10e0 <DIO_SetPortValue>
				DIO_SetPinValue(PORTC , i, LOW);
    1e9c:	fe 01       	movw	r30, r28
    1e9e:	e4 56       	subi	r30, 0x64	; 100
    1ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea2:	82 e0       	ldi	r24, 0x02	; 2
    1ea4:	60 81       	ld	r22, Z
    1ea6:	40 e0       	ldi	r20, 0x00	; 0
    1ea8:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinValue>
    1eac:	80 e0       	ldi	r24, 0x00	; 0
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	aa ef       	ldi	r26, 0xFA	; 250
    1eb2:	b3 e4       	ldi	r27, 0x43	; 67
    1eb4:	8f a3       	std	Y+39, r24	; 0x27
    1eb6:	98 a7       	std	Y+40, r25	; 0x28
    1eb8:	a9 a7       	std	Y+41, r26	; 0x29
    1eba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ebc:	6f a1       	ldd	r22, Y+39	; 0x27
    1ebe:	78 a5       	ldd	r23, Y+40	; 0x28
    1ec0:	89 a5       	ldd	r24, Y+41	; 0x29
    1ec2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	4a e7       	ldi	r20, 0x7A	; 122
    1eca:	53 e4       	ldi	r21, 0x43	; 67
    1ecc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	8b a3       	std	Y+35, r24	; 0x23
    1ed6:	9c a3       	std	Y+36, r25	; 0x24
    1ed8:	ad a3       	std	Y+37, r26	; 0x25
    1eda:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1edc:	6b a1       	ldd	r22, Y+35	; 0x23
    1ede:	7c a1       	ldd	r23, Y+36	; 0x24
    1ee0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ee2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	40 e8       	ldi	r20, 0x80	; 128
    1eea:	5f e3       	ldi	r21, 0x3F	; 63
    1eec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ef0:	88 23       	and	r24, r24
    1ef2:	2c f4       	brge	.+10     	; 0x1efe <main+0xd9c>
		__ticks = 1;
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	9a a3       	std	Y+34, r25	; 0x22
    1efa:	89 a3       	std	Y+33, r24	; 0x21
    1efc:	3f c0       	rjmp	.+126    	; 0x1f7c <main+0xe1a>
	else if (__tmp > 65535)
    1efe:	6b a1       	ldd	r22, Y+35	; 0x23
    1f00:	7c a1       	ldd	r23, Y+36	; 0x24
    1f02:	8d a1       	ldd	r24, Y+37	; 0x25
    1f04:	9e a1       	ldd	r25, Y+38	; 0x26
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	3f ef       	ldi	r19, 0xFF	; 255
    1f0a:	4f e7       	ldi	r20, 0x7F	; 127
    1f0c:	57 e4       	ldi	r21, 0x47	; 71
    1f0e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f12:	18 16       	cp	r1, r24
    1f14:	4c f5       	brge	.+82     	; 0x1f68 <main+0xe06>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f16:	6f a1       	ldd	r22, Y+39	; 0x27
    1f18:	78 a5       	ldd	r23, Y+40	; 0x28
    1f1a:	89 a5       	ldd	r24, Y+41	; 0x29
    1f1c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	40 e2       	ldi	r20, 0x20	; 32
    1f24:	51 e4       	ldi	r21, 0x41	; 65
    1f26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	bc 01       	movw	r22, r24
    1f30:	cd 01       	movw	r24, r26
    1f32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	9a a3       	std	Y+34, r25	; 0x22
    1f3c:	89 a3       	std	Y+33, r24	; 0x21
    1f3e:	0f c0       	rjmp	.+30     	; 0x1f5e <main+0xdfc>
    1f40:	89 e1       	ldi	r24, 0x19	; 25
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	98 a3       	std	Y+32, r25	; 0x20
    1f46:	8f 8f       	std	Y+31, r24	; 0x1f
    1f48:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f4a:	98 a1       	ldd	r25, Y+32	; 0x20
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	f1 f7       	brne	.-4      	; 0x1f4c <main+0xdea>
    1f50:	98 a3       	std	Y+32, r25	; 0x20
    1f52:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f54:	89 a1       	ldd	r24, Y+33	; 0x21
    1f56:	9a a1       	ldd	r25, Y+34	; 0x22
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	9a a3       	std	Y+34, r25	; 0x22
    1f5c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f5e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f60:	9a a1       	ldd	r25, Y+34	; 0x22
    1f62:	00 97       	sbiw	r24, 0x00	; 0
    1f64:	69 f7       	brne	.-38     	; 0x1f40 <main+0xdde>
    1f66:	14 c0       	rjmp	.+40     	; 0x1f90 <main+0xe2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f68:	6b a1       	ldd	r22, Y+35	; 0x23
    1f6a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f6c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f6e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	9a a3       	std	Y+34, r25	; 0x22
    1f7a:	89 a3       	std	Y+33, r24	; 0x21
    1f7c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f7e:	9a a1       	ldd	r25, Y+34	; 0x22
    1f80:	9e 8f       	std	Y+30, r25	; 0x1e
    1f82:	8d 8f       	std	Y+29, r24	; 0x1d
    1f84:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f86:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f88:	01 97       	sbiw	r24, 0x01	; 1
    1f8a:	f1 f7       	brne	.-4      	; 0x1f88 <main+0xe26>
    1f8c:	9e 8f       	std	Y+30, r25	; 0x1e
    1f8e:	8d 8f       	std	Y+29, r24	; 0x1d

				}

// Incrementing (Snake effect) every 300 ms
		else if (!(DIO_GetPinValue(PORTA,PIN6))){
				for(i=0; i<8;i++){
    1f90:	de 01       	movw	r26, r28
    1f92:	a4 56       	subi	r26, 0x64	; 100
    1f94:	bf 4f       	sbci	r27, 0xFF	; 255
    1f96:	fe 01       	movw	r30, r28
    1f98:	e4 56       	subi	r30, 0x64	; 100
    1f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9c:	80 81       	ld	r24, Z
    1f9e:	8f 5f       	subi	r24, 0xFF	; 255
    1fa0:	8c 93       	st	X, r24
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	e4 56       	subi	r30, 0x64	; 100
    1fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa8:	80 81       	ld	r24, Z
    1faa:	88 30       	cpi	r24, 0x08	; 8
    1fac:	08 f4       	brcc	.+2      	; 0x1fb0 <main+0xe4e>
    1fae:	72 cf       	rjmp	.-284    	; 0x1e94 <main+0xd32>
    1fb0:	f5 c8       	rjmp	.-3606   	; 0x119c <main+0x3a>
		}



		//2-LEDs Converging/Diverging every 300 ms
		else if (!(DIO_GetPinValue(PORTA,PIN7))){
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	67 e0       	ldi	r22, 0x07	; 7
    1fb6:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_GetPinValue>
    1fba:	88 23       	and	r24, r24
    1fbc:	09 f0       	breq	.+2      	; 0x1fc0 <main+0xe5e>
    1fbe:	58 c1       	rjmp	.+688    	; 0x2270 <main+0x110e>

				for(i=0; i<4;i++){
    1fc0:	fe 01       	movw	r30, r28
    1fc2:	e4 56       	subi	r30, 0x64	; 100
    1fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc6:	10 82       	st	Z, r1
    1fc8:	9f c0       	rjmp	.+318    	; 0x2108 <main+0xfa6>
					DIO_SetPortValue     (PORTC, 0b00010000 << i);
    1fca:	fe 01       	movw	r30, r28
    1fcc:	e4 56       	subi	r30, 0x64	; 100
    1fce:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd0:	80 81       	ld	r24, Z
    1fd2:	28 2f       	mov	r18, r24
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	80 e1       	ldi	r24, 0x10	; 16
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	02 c0       	rjmp	.+4      	; 0x1fe0 <main+0xe7e>
    1fdc:	88 0f       	add	r24, r24
    1fde:	99 1f       	adc	r25, r25
    1fe0:	2a 95       	dec	r18
    1fe2:	e2 f7       	brpl	.-8      	; 0x1fdc <main+0xe7a>
    1fe4:	98 2f       	mov	r25, r24
    1fe6:	82 e0       	ldi	r24, 0x02	; 2
    1fe8:	69 2f       	mov	r22, r25
    1fea:	0e 94 70 08 	call	0x10e0	; 0x10e0 <DIO_SetPortValue>
					DIO_SetPortValue     (PORTD, 0b00001000>> i);
    1fee:	fe 01       	movw	r30, r28
    1ff0:	e4 56       	subi	r30, 0x64	; 100
    1ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff4:	80 81       	ld	r24, Z
    1ff6:	28 2f       	mov	r18, r24
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	88 e0       	ldi	r24, 0x08	; 8
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	02 c0       	rjmp	.+4      	; 0x2004 <main+0xea2>
    2000:	95 95       	asr	r25
    2002:	87 95       	ror	r24
    2004:	2a 95       	dec	r18
    2006:	e2 f7       	brpl	.-8      	; 0x2000 <main+0xe9e>
    2008:	98 2f       	mov	r25, r24
    200a:	83 e0       	ldi	r24, 0x03	; 3
    200c:	69 2f       	mov	r22, r25
    200e:	0e 94 70 08 	call	0x10e0	; 0x10e0 <DIO_SetPortValue>
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	a6 e9       	ldi	r26, 0x96	; 150
    2018:	b3 e4       	ldi	r27, 0x43	; 67
    201a:	89 8f       	std	Y+25, r24	; 0x19
    201c:	9a 8f       	std	Y+26, r25	; 0x1a
    201e:	ab 8f       	std	Y+27, r26	; 0x1b
    2020:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2022:	69 8d       	ldd	r22, Y+25	; 0x19
    2024:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2026:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2028:	9c 8d       	ldd	r25, Y+28	; 0x1c
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	4a e7       	ldi	r20, 0x7A	; 122
    2030:	53 e4       	ldi	r21, 0x43	; 67
    2032:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	8d 8b       	std	Y+21, r24	; 0x15
    203c:	9e 8b       	std	Y+22, r25	; 0x16
    203e:	af 8b       	std	Y+23, r26	; 0x17
    2040:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2042:	6d 89       	ldd	r22, Y+21	; 0x15
    2044:	7e 89       	ldd	r23, Y+22	; 0x16
    2046:	8f 89       	ldd	r24, Y+23	; 0x17
    2048:	98 8d       	ldd	r25, Y+24	; 0x18
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	40 e8       	ldi	r20, 0x80	; 128
    2050:	5f e3       	ldi	r21, 0x3F	; 63
    2052:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2056:	88 23       	and	r24, r24
    2058:	2c f4       	brge	.+10     	; 0x2064 <main+0xf02>
		__ticks = 1;
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	9c 8b       	std	Y+20, r25	; 0x14
    2060:	8b 8b       	std	Y+19, r24	; 0x13
    2062:	3f c0       	rjmp	.+126    	; 0x20e2 <main+0xf80>
	else if (__tmp > 65535)
    2064:	6d 89       	ldd	r22, Y+21	; 0x15
    2066:	7e 89       	ldd	r23, Y+22	; 0x16
    2068:	8f 89       	ldd	r24, Y+23	; 0x17
    206a:	98 8d       	ldd	r25, Y+24	; 0x18
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	3f ef       	ldi	r19, 0xFF	; 255
    2070:	4f e7       	ldi	r20, 0x7F	; 127
    2072:	57 e4       	ldi	r21, 0x47	; 71
    2074:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2078:	18 16       	cp	r1, r24
    207a:	4c f5       	brge	.+82     	; 0x20ce <main+0xf6c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    207c:	69 8d       	ldd	r22, Y+25	; 0x19
    207e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2080:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2082:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	40 e2       	ldi	r20, 0x20	; 32
    208a:	51 e4       	ldi	r21, 0x41	; 65
    208c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	bc 01       	movw	r22, r24
    2096:	cd 01       	movw	r24, r26
    2098:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	9c 8b       	std	Y+20, r25	; 0x14
    20a2:	8b 8b       	std	Y+19, r24	; 0x13
    20a4:	0f c0       	rjmp	.+30     	; 0x20c4 <main+0xf62>
    20a6:	89 e1       	ldi	r24, 0x19	; 25
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	9a 8b       	std	Y+18, r25	; 0x12
    20ac:	89 8b       	std	Y+17, r24	; 0x11
    20ae:	89 89       	ldd	r24, Y+17	; 0x11
    20b0:	9a 89       	ldd	r25, Y+18	; 0x12
    20b2:	01 97       	sbiw	r24, 0x01	; 1
    20b4:	f1 f7       	brne	.-4      	; 0x20b2 <main+0xf50>
    20b6:	9a 8b       	std	Y+18, r25	; 0x12
    20b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ba:	8b 89       	ldd	r24, Y+19	; 0x13
    20bc:	9c 89       	ldd	r25, Y+20	; 0x14
    20be:	01 97       	sbiw	r24, 0x01	; 1
    20c0:	9c 8b       	std	Y+20, r25	; 0x14
    20c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c4:	8b 89       	ldd	r24, Y+19	; 0x13
    20c6:	9c 89       	ldd	r25, Y+20	; 0x14
    20c8:	00 97       	sbiw	r24, 0x00	; 0
    20ca:	69 f7       	brne	.-38     	; 0x20a6 <main+0xf44>
    20cc:	14 c0       	rjmp	.+40     	; 0x20f6 <main+0xf94>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ce:	6d 89       	ldd	r22, Y+21	; 0x15
    20d0:	7e 89       	ldd	r23, Y+22	; 0x16
    20d2:	8f 89       	ldd	r24, Y+23	; 0x17
    20d4:	98 8d       	ldd	r25, Y+24	; 0x18
    20d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	9c 8b       	std	Y+20, r25	; 0x14
    20e0:	8b 8b       	std	Y+19, r24	; 0x13
    20e2:	8b 89       	ldd	r24, Y+19	; 0x13
    20e4:	9c 89       	ldd	r25, Y+20	; 0x14
    20e6:	98 8b       	std	Y+16, r25	; 0x10
    20e8:	8f 87       	std	Y+15, r24	; 0x0f
    20ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ec:	98 89       	ldd	r25, Y+16	; 0x10
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	f1 f7       	brne	.-4      	; 0x20ee <main+0xf8c>
    20f2:	98 8b       	std	Y+16, r25	; 0x10
    20f4:	8f 87       	std	Y+15, r24	; 0x0f


		//2-LEDs Converging/Diverging every 300 ms
		else if (!(DIO_GetPinValue(PORTA,PIN7))){

				for(i=0; i<4;i++){
    20f6:	de 01       	movw	r26, r28
    20f8:	a4 56       	subi	r26, 0x64	; 100
    20fa:	bf 4f       	sbci	r27, 0xFF	; 255
    20fc:	fe 01       	movw	r30, r28
    20fe:	e4 56       	subi	r30, 0x64	; 100
    2100:	ff 4f       	sbci	r31, 0xFF	; 255
    2102:	80 81       	ld	r24, Z
    2104:	8f 5f       	subi	r24, 0xFF	; 255
    2106:	8c 93       	st	X, r24
    2108:	fe 01       	movw	r30, r28
    210a:	e4 56       	subi	r30, 0x64	; 100
    210c:	ff 4f       	sbci	r31, 0xFF	; 255
    210e:	80 81       	ld	r24, Z
    2110:	84 30       	cpi	r24, 0x04	; 4
    2112:	08 f4       	brcc	.+2      	; 0x2116 <main+0xfb4>
    2114:	5a cf       	rjmp	.-332    	; 0x1fca <main+0xe68>

						_delay_ms(300);

				}

					for(i=0; i<4;i++){
    2116:	fe 01       	movw	r30, r28
    2118:	e4 56       	subi	r30, 0x64	; 100
    211a:	ff 4f       	sbci	r31, 0xFF	; 255
    211c:	10 82       	st	Z, r1
    211e:	9f c0       	rjmp	.+318    	; 0x225e <main+0x10fc>
						DIO_SetPortValue     (PORTC, 0b10000000 >>i);
    2120:	fe 01       	movw	r30, r28
    2122:	e4 56       	subi	r30, 0x64	; 100
    2124:	ff 4f       	sbci	r31, 0xFF	; 255
    2126:	80 81       	ld	r24, Z
    2128:	28 2f       	mov	r18, r24
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	80 e8       	ldi	r24, 0x80	; 128
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	02 c0       	rjmp	.+4      	; 0x2136 <main+0xfd4>
    2132:	95 95       	asr	r25
    2134:	87 95       	ror	r24
    2136:	2a 95       	dec	r18
    2138:	e2 f7       	brpl	.-8      	; 0x2132 <main+0xfd0>
    213a:	98 2f       	mov	r25, r24
    213c:	82 e0       	ldi	r24, 0x02	; 2
    213e:	69 2f       	mov	r22, r25
    2140:	0e 94 70 08 	call	0x10e0	; 0x10e0 <DIO_SetPortValue>
						DIO_SetPortValue     (PORTD, 0b00000001<< i);
    2144:	fe 01       	movw	r30, r28
    2146:	e4 56       	subi	r30, 0x64	; 100
    2148:	ff 4f       	sbci	r31, 0xFF	; 255
    214a:	80 81       	ld	r24, Z
    214c:	28 2f       	mov	r18, r24
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	02 c0       	rjmp	.+4      	; 0x215a <main+0xff8>
    2156:	88 0f       	add	r24, r24
    2158:	99 1f       	adc	r25, r25
    215a:	2a 95       	dec	r18
    215c:	e2 f7       	brpl	.-8      	; 0x2156 <main+0xff4>
    215e:	98 2f       	mov	r25, r24
    2160:	83 e0       	ldi	r24, 0x03	; 3
    2162:	69 2f       	mov	r22, r25
    2164:	0e 94 70 08 	call	0x10e0	; 0x10e0 <DIO_SetPortValue>
    2168:	80 e0       	ldi	r24, 0x00	; 0
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	a6 e9       	ldi	r26, 0x96	; 150
    216e:	b3 e4       	ldi	r27, 0x43	; 67
    2170:	8b 87       	std	Y+11, r24	; 0x0b
    2172:	9c 87       	std	Y+12, r25	; 0x0c
    2174:	ad 87       	std	Y+13, r26	; 0x0d
    2176:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2178:	6b 85       	ldd	r22, Y+11	; 0x0b
    217a:	7c 85       	ldd	r23, Y+12	; 0x0c
    217c:	8d 85       	ldd	r24, Y+13	; 0x0d
    217e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	4a e7       	ldi	r20, 0x7A	; 122
    2186:	53 e4       	ldi	r21, 0x43	; 67
    2188:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	8f 83       	std	Y+7, r24	; 0x07
    2192:	98 87       	std	Y+8, r25	; 0x08
    2194:	a9 87       	std	Y+9, r26	; 0x09
    2196:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2198:	6f 81       	ldd	r22, Y+7	; 0x07
    219a:	78 85       	ldd	r23, Y+8	; 0x08
    219c:	89 85       	ldd	r24, Y+9	; 0x09
    219e:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	40 e8       	ldi	r20, 0x80	; 128
    21a6:	5f e3       	ldi	r21, 0x3F	; 63
    21a8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21ac:	88 23       	and	r24, r24
    21ae:	2c f4       	brge	.+10     	; 0x21ba <main+0x1058>
		__ticks = 1;
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	9e 83       	std	Y+6, r25	; 0x06
    21b6:	8d 83       	std	Y+5, r24	; 0x05
    21b8:	3f c0       	rjmp	.+126    	; 0x2238 <main+0x10d6>
	else if (__tmp > 65535)
    21ba:	6f 81       	ldd	r22, Y+7	; 0x07
    21bc:	78 85       	ldd	r23, Y+8	; 0x08
    21be:	89 85       	ldd	r24, Y+9	; 0x09
    21c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	3f ef       	ldi	r19, 0xFF	; 255
    21c6:	4f e7       	ldi	r20, 0x7F	; 127
    21c8:	57 e4       	ldi	r21, 0x47	; 71
    21ca:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21ce:	18 16       	cp	r1, r24
    21d0:	4c f5       	brge	.+82     	; 0x2224 <main+0x10c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	40 e2       	ldi	r20, 0x20	; 32
    21e0:	51 e4       	ldi	r21, 0x41	; 65
    21e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21e6:	dc 01       	movw	r26, r24
    21e8:	cb 01       	movw	r24, r22
    21ea:	bc 01       	movw	r22, r24
    21ec:	cd 01       	movw	r24, r26
    21ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	9e 83       	std	Y+6, r25	; 0x06
    21f8:	8d 83       	std	Y+5, r24	; 0x05
    21fa:	0f c0       	rjmp	.+30     	; 0x221a <main+0x10b8>
    21fc:	89 e1       	ldi	r24, 0x19	; 25
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	9c 83       	std	Y+4, r25	; 0x04
    2202:	8b 83       	std	Y+3, r24	; 0x03
    2204:	8b 81       	ldd	r24, Y+3	; 0x03
    2206:	9c 81       	ldd	r25, Y+4	; 0x04
    2208:	01 97       	sbiw	r24, 0x01	; 1
    220a:	f1 f7       	brne	.-4      	; 0x2208 <main+0x10a6>
    220c:	9c 83       	std	Y+4, r25	; 0x04
    220e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2210:	8d 81       	ldd	r24, Y+5	; 0x05
    2212:	9e 81       	ldd	r25, Y+6	; 0x06
    2214:	01 97       	sbiw	r24, 0x01	; 1
    2216:	9e 83       	std	Y+6, r25	; 0x06
    2218:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    221a:	8d 81       	ldd	r24, Y+5	; 0x05
    221c:	9e 81       	ldd	r25, Y+6	; 0x06
    221e:	00 97       	sbiw	r24, 0x00	; 0
    2220:	69 f7       	brne	.-38     	; 0x21fc <main+0x109a>
    2222:	14 c0       	rjmp	.+40     	; 0x224c <main+0x10ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2224:	6f 81       	ldd	r22, Y+7	; 0x07
    2226:	78 85       	ldd	r23, Y+8	; 0x08
    2228:	89 85       	ldd	r24, Y+9	; 0x09
    222a:	9a 85       	ldd	r25, Y+10	; 0x0a
    222c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	9e 83       	std	Y+6, r25	; 0x06
    2236:	8d 83       	std	Y+5, r24	; 0x05
    2238:	8d 81       	ldd	r24, Y+5	; 0x05
    223a:	9e 81       	ldd	r25, Y+6	; 0x06
    223c:	9a 83       	std	Y+2, r25	; 0x02
    223e:	89 83       	std	Y+1, r24	; 0x01
    2240:	89 81       	ldd	r24, Y+1	; 0x01
    2242:	9a 81       	ldd	r25, Y+2	; 0x02
    2244:	01 97       	sbiw	r24, 0x01	; 1
    2246:	f1 f7       	brne	.-4      	; 0x2244 <main+0x10e2>
    2248:	9a 83       	std	Y+2, r25	; 0x02
    224a:	89 83       	std	Y+1, r24	; 0x01

						_delay_ms(300);

				}

					for(i=0; i<4;i++){
    224c:	de 01       	movw	r26, r28
    224e:	a4 56       	subi	r26, 0x64	; 100
    2250:	bf 4f       	sbci	r27, 0xFF	; 255
    2252:	fe 01       	movw	r30, r28
    2254:	e4 56       	subi	r30, 0x64	; 100
    2256:	ff 4f       	sbci	r31, 0xFF	; 255
    2258:	80 81       	ld	r24, Z
    225a:	8f 5f       	subi	r24, 0xFF	; 255
    225c:	8c 93       	st	X, r24
    225e:	fe 01       	movw	r30, r28
    2260:	e4 56       	subi	r30, 0x64	; 100
    2262:	ff 4f       	sbci	r31, 0xFF	; 255
    2264:	80 81       	ld	r24, Z
    2266:	84 30       	cpi	r24, 0x04	; 4
    2268:	08 f4       	brcc	.+2      	; 0x226c <main+0x110a>
    226a:	5a cf       	rjmp	.-332    	; 0x2120 <main+0xfbe>
    226c:	0c 94 ce 08 	jmp	0x119c	; 0x119c <main+0x3a>
				}


		else{

			DIO_SetPortValue     (PORTC, 0xff);
    2270:	82 e0       	ldi	r24, 0x02	; 2
    2272:	6f ef       	ldi	r22, 0xFF	; 255
    2274:	0e 94 70 08 	call	0x10e0	; 0x10e0 <DIO_SetPortValue>
			DIO_SetPortValue     (PORTD, 0xff);
    2278:	83 e0       	ldi	r24, 0x03	; 3
    227a:	6f ef       	ldi	r22, 0xFF	; 255
    227c:	0e 94 70 08 	call	0x10e0	; 0x10e0 <DIO_SetPortValue>
    2280:	0c 94 ce 08 	jmp	0x119c	; 0x119c <main+0x3a>

00002284 <__prologue_saves__>:
    2284:	2f 92       	push	r2
    2286:	3f 92       	push	r3
    2288:	4f 92       	push	r4
    228a:	5f 92       	push	r5
    228c:	6f 92       	push	r6
    228e:	7f 92       	push	r7
    2290:	8f 92       	push	r8
    2292:	9f 92       	push	r9
    2294:	af 92       	push	r10
    2296:	bf 92       	push	r11
    2298:	cf 92       	push	r12
    229a:	df 92       	push	r13
    229c:	ef 92       	push	r14
    229e:	ff 92       	push	r15
    22a0:	0f 93       	push	r16
    22a2:	1f 93       	push	r17
    22a4:	cf 93       	push	r28
    22a6:	df 93       	push	r29
    22a8:	cd b7       	in	r28, 0x3d	; 61
    22aa:	de b7       	in	r29, 0x3e	; 62
    22ac:	ca 1b       	sub	r28, r26
    22ae:	db 0b       	sbc	r29, r27
    22b0:	0f b6       	in	r0, 0x3f	; 63
    22b2:	f8 94       	cli
    22b4:	de bf       	out	0x3e, r29	; 62
    22b6:	0f be       	out	0x3f, r0	; 63
    22b8:	cd bf       	out	0x3d, r28	; 61
    22ba:	09 94       	ijmp

000022bc <__epilogue_restores__>:
    22bc:	2a 88       	ldd	r2, Y+18	; 0x12
    22be:	39 88       	ldd	r3, Y+17	; 0x11
    22c0:	48 88       	ldd	r4, Y+16	; 0x10
    22c2:	5f 84       	ldd	r5, Y+15	; 0x0f
    22c4:	6e 84       	ldd	r6, Y+14	; 0x0e
    22c6:	7d 84       	ldd	r7, Y+13	; 0x0d
    22c8:	8c 84       	ldd	r8, Y+12	; 0x0c
    22ca:	9b 84       	ldd	r9, Y+11	; 0x0b
    22cc:	aa 84       	ldd	r10, Y+10	; 0x0a
    22ce:	b9 84       	ldd	r11, Y+9	; 0x09
    22d0:	c8 84       	ldd	r12, Y+8	; 0x08
    22d2:	df 80       	ldd	r13, Y+7	; 0x07
    22d4:	ee 80       	ldd	r14, Y+6	; 0x06
    22d6:	fd 80       	ldd	r15, Y+5	; 0x05
    22d8:	0c 81       	ldd	r16, Y+4	; 0x04
    22da:	1b 81       	ldd	r17, Y+3	; 0x03
    22dc:	aa 81       	ldd	r26, Y+2	; 0x02
    22de:	b9 81       	ldd	r27, Y+1	; 0x01
    22e0:	ce 0f       	add	r28, r30
    22e2:	d1 1d       	adc	r29, r1
    22e4:	0f b6       	in	r0, 0x3f	; 63
    22e6:	f8 94       	cli
    22e8:	de bf       	out	0x3e, r29	; 62
    22ea:	0f be       	out	0x3f, r0	; 63
    22ec:	cd bf       	out	0x3d, r28	; 61
    22ee:	ed 01       	movw	r28, r26
    22f0:	08 95       	ret

000022f2 <_exit>:
    22f2:	f8 94       	cli

000022f4 <__stop_program>:
    22f4:	ff cf       	rjmp	.-2      	; 0x22f4 <__stop_program>
