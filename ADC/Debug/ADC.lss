
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002202  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00002202  00002276  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000016f8  00000000  00000000  00002294  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a99  00000000  00000000  0000398c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004425  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004565  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000046d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000631e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007209  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00007fb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008118  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000083a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00008b73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e0       	ldi	r30, 0x02	; 2
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <main>
      7a:	0c 94 ff 10 	jmp	0x21fe	; 0x21fe <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 c8 10 	jmp	0x2190	; 0x2190 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a3 e7       	ldi	r26, 0x73	; 115
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 e4 10 	jmp	0x21c8	; 0x21c8 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 d4 10 	jmp	0x21a8	; 0x21a8 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 d4 10 	jmp	0x21a8	; 0x21a8 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 c8 10 	jmp	0x2190	; 0x2190 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	83 e7       	ldi	r24, 0x73	; 115
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 e4 10 	jmp	0x21c8	; 0x21c8 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 d4 10 	jmp	0x21a8	; 0x21a8 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 d4 10 	jmp	0x21a8	; 0x21a8 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 d4 10 	jmp	0x21a8	; 0x21a8 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <ADC_Init>:

#include "ADC_int.h"
#include "ADC_private.h"


void ADC_Init (void){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62

	// ADC Enable
	// Prescalar I/P CLK   / 8
	ADCSRA= 0b10000011 ;
     b3e:	e6 e2       	ldi	r30, 0x26	; 38
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	83 e8       	ldi	r24, 0x83	; 131
     b44:	80 83       	st	Z, r24

	// Referance Voltage as AVCC with external capacitor
	// ADC Data Right Adjustment
	// ADC 0 sellected

	ADMUX = 0b01000000 ;
     b46:	e7 e2       	ldi	r30, 0x27	; 39
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	80 e4       	ldi	r24, 0x40	; 64
     b4c:	80 83       	st	Z, r24

}
     b4e:	cf 91       	pop	r28
     b50:	df 91       	pop	r29
     b52:	08 95       	ret

00000b54 <ADC_Read>:


/*********************************************************/

u16 ADC_Read (u8 channel) {
     b54:	df 93       	push	r29
     b56:	cf 93       	push	r28
     b58:	0f 92       	push	r0
     b5a:	cd b7       	in	r28, 0x3d	; 61
     b5c:	de b7       	in	r29, 0x3e	; 62
     b5e:	89 83       	std	Y+1, r24	; 0x01

	// ADC Channel Selection

		channel &= 0x07;  // channel from 0 : 7  ,& to neglect any bit more than 7
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	87 70       	andi	r24, 0x07	; 7
     b64:	89 83       	std	Y+1, r24	; 0x01
		ADMUX &= 0xE0;   // to save higher 3 bits as they are and set the rest to 0
     b66:	a7 e2       	ldi	r26, 0x27	; 39
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	e7 e2       	ldi	r30, 0x27	; 39
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	80 7e       	andi	r24, 0xE0	; 224
     b72:	8c 93       	st	X, r24
		ADMUX |= channel;
     b74:	a7 e2       	ldi	r26, 0x27	; 39
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	e7 e2       	ldi	r30, 0x27	; 39
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	90 81       	ld	r25, Z
     b7e:	89 81       	ldd	r24, Y+1	; 0x01
     b80:	89 2b       	or	r24, r25
     b82:	8c 93       	st	X, r24


	// Start Single Convertion
		SET_BIT(ADCSRA,ADSC)  ;
     b84:	a6 e2       	ldi	r26, 0x26	; 38
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	e6 e2       	ldi	r30, 0x26	; 38
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	80 64       	ori	r24, 0x40	; 64
     b90:	8c 93       	st	X, r24


	//wait for the conversion (ADIF bit is set when conversion is done )
		while(!GET_BIT(ADCSRA,4));
     b92:	e6 e2       	ldi	r30, 0x26	; 38
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	82 95       	swap	r24
     b9a:	8f 70       	andi	r24, 0x0F	; 15
     b9c:	88 2f       	mov	r24, r24
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	81 70       	andi	r24, 0x01	; 1
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	00 97       	sbiw	r24, 0x00	; 0
     ba6:	a9 f3       	breq	.-22     	; 0xb92 <ADC_Read+0x3e>


		return ADC;
     ba8:	e4 e2       	ldi	r30, 0x24	; 36
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	91 81       	ldd	r25, Z+1	; 0x01

}
     bb0:	0f 90       	pop	r0
     bb2:	cf 91       	pop	r28
     bb4:	df 91       	pop	r29
     bb6:	08 95       	ret

00000bb8 <DIO_SetPinValue>:
#include "DIO_int.h"
#include "DIO_reg.h"

/* IO Pins */
void DIO_SetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy)
{
     bb8:	df 93       	push	r29
     bba:	cf 93       	push	r28
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	27 97       	sbiw	r28, 0x07	; 7
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	f8 94       	cli
     bc6:	de bf       	out	0x3e, r29	; 62
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	cd bf       	out	0x3d, r28	; 61
     bcc:	89 83       	std	Y+1, r24	; 0x01
     bce:	6a 83       	std	Y+2, r22	; 0x02
     bd0:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
     bd2:	89 81       	ldd	r24, Y+1	; 0x01
     bd4:	84 30       	cpi	r24, 0x04	; 4
     bd6:	08 f0       	brcs	.+2      	; 0xbda <DIO_SetPinValue+0x22>
     bd8:	ee c0       	rjmp	.+476    	; 0xdb6 <DIO_SetPinValue+0x1fe>
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	88 30       	cpi	r24, 0x08	; 8
     bde:	08 f0       	brcs	.+2      	; 0xbe2 <DIO_SetPinValue+0x2a>
     be0:	ea c0       	rjmp	.+468    	; 0xdb6 <DIO_SetPinValue+0x1fe>
	{
		if (u8PinValCopy == HIGH)
     be2:	8b 81       	ldd	r24, Y+3	; 0x03
     be4:	81 30       	cpi	r24, 0x01	; 1
     be6:	09 f0       	breq	.+2      	; 0xbea <DIO_SetPinValue+0x32>
     be8:	6f c0       	rjmp	.+222    	; 0xcc8 <DIO_SetPinValue+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
     bea:	89 81       	ldd	r24, Y+1	; 0x01
     bec:	28 2f       	mov	r18, r24
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	3f 83       	std	Y+7, r19	; 0x07
     bf2:	2e 83       	std	Y+6, r18	; 0x06
     bf4:	8e 81       	ldd	r24, Y+6	; 0x06
     bf6:	9f 81       	ldd	r25, Y+7	; 0x07
     bf8:	81 30       	cpi	r24, 0x01	; 1
     bfa:	91 05       	cpc	r25, r1
     bfc:	49 f1       	breq	.+82     	; 0xc50 <DIO_SetPinValue+0x98>
     bfe:	2e 81       	ldd	r18, Y+6	; 0x06
     c00:	3f 81       	ldd	r19, Y+7	; 0x07
     c02:	22 30       	cpi	r18, 0x02	; 2
     c04:	31 05       	cpc	r19, r1
     c06:	2c f4       	brge	.+10     	; 0xc12 <DIO_SetPinValue+0x5a>
     c08:	8e 81       	ldd	r24, Y+6	; 0x06
     c0a:	9f 81       	ldd	r25, Y+7	; 0x07
     c0c:	00 97       	sbiw	r24, 0x00	; 0
     c0e:	61 f0       	breq	.+24     	; 0xc28 <DIO_SetPinValue+0x70>
     c10:	d2 c0       	rjmp	.+420    	; 0xdb6 <DIO_SetPinValue+0x1fe>
     c12:	2e 81       	ldd	r18, Y+6	; 0x06
     c14:	3f 81       	ldd	r19, Y+7	; 0x07
     c16:	22 30       	cpi	r18, 0x02	; 2
     c18:	31 05       	cpc	r19, r1
     c1a:	71 f1       	breq	.+92     	; 0xc78 <DIO_SetPinValue+0xc0>
     c1c:	8e 81       	ldd	r24, Y+6	; 0x06
     c1e:	9f 81       	ldd	r25, Y+7	; 0x07
     c20:	83 30       	cpi	r24, 0x03	; 3
     c22:	91 05       	cpc	r25, r1
     c24:	e9 f1       	breq	.+122    	; 0xca0 <DIO_SetPinValue+0xe8>
     c26:	c7 c0       	rjmp	.+398    	; 0xdb6 <DIO_SetPinValue+0x1fe>
			{
				case PORTA: SET_BIT(PORTA_Register,u8PinIdCopy); break;
     c28:	ab e3       	ldi	r26, 0x3B	; 59
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	eb e3       	ldi	r30, 0x3B	; 59
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	48 2f       	mov	r20, r24
     c34:	8a 81       	ldd	r24, Y+2	; 0x02
     c36:	28 2f       	mov	r18, r24
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	02 2e       	mov	r0, r18
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <DIO_SetPinValue+0x8e>
     c42:	88 0f       	add	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	0a 94       	dec	r0
     c48:	e2 f7       	brpl	.-8      	; 0xc42 <DIO_SetPinValue+0x8a>
     c4a:	84 2b       	or	r24, r20
     c4c:	8c 93       	st	X, r24
     c4e:	b3 c0       	rjmp	.+358    	; 0xdb6 <DIO_SetPinValue+0x1fe>
				case PORTB: SET_BIT(PORTB_Register,u8PinIdCopy); break;
     c50:	a8 e3       	ldi	r26, 0x38	; 56
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	e8 e3       	ldi	r30, 0x38	; 56
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	48 2f       	mov	r20, r24
     c5c:	8a 81       	ldd	r24, Y+2	; 0x02
     c5e:	28 2f       	mov	r18, r24
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	02 2e       	mov	r0, r18
     c68:	02 c0       	rjmp	.+4      	; 0xc6e <DIO_SetPinValue+0xb6>
     c6a:	88 0f       	add	r24, r24
     c6c:	99 1f       	adc	r25, r25
     c6e:	0a 94       	dec	r0
     c70:	e2 f7       	brpl	.-8      	; 0xc6a <DIO_SetPinValue+0xb2>
     c72:	84 2b       	or	r24, r20
     c74:	8c 93       	st	X, r24
     c76:	9f c0       	rjmp	.+318    	; 0xdb6 <DIO_SetPinValue+0x1fe>
				case PORTC: SET_BIT(PORTC_Register,u8PinIdCopy); break;
     c78:	a5 e3       	ldi	r26, 0x35	; 53
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	e5 e3       	ldi	r30, 0x35	; 53
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	48 2f       	mov	r20, r24
     c84:	8a 81       	ldd	r24, Y+2	; 0x02
     c86:	28 2f       	mov	r18, r24
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	02 2e       	mov	r0, r18
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <DIO_SetPinValue+0xde>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	0a 94       	dec	r0
     c98:	e2 f7       	brpl	.-8      	; 0xc92 <DIO_SetPinValue+0xda>
     c9a:	84 2b       	or	r24, r20
     c9c:	8c 93       	st	X, r24
     c9e:	8b c0       	rjmp	.+278    	; 0xdb6 <DIO_SetPinValue+0x1fe>
				case PORTD: SET_BIT(PORTD_Register,u8PinIdCopy); break;
     ca0:	a2 e3       	ldi	r26, 0x32	; 50
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	e2 e3       	ldi	r30, 0x32	; 50
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	48 2f       	mov	r20, r24
     cac:	8a 81       	ldd	r24, Y+2	; 0x02
     cae:	28 2f       	mov	r18, r24
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	02 2e       	mov	r0, r18
     cb8:	02 c0       	rjmp	.+4      	; 0xcbe <DIO_SetPinValue+0x106>
     cba:	88 0f       	add	r24, r24
     cbc:	99 1f       	adc	r25, r25
     cbe:	0a 94       	dec	r0
     cc0:	e2 f7       	brpl	.-8      	; 0xcba <DIO_SetPinValue+0x102>
     cc2:	84 2b       	or	r24, r20
     cc4:	8c 93       	st	X, r24
     cc6:	77 c0       	rjmp	.+238    	; 0xdb6 <DIO_SetPinValue+0x1fe>
			}
		
		}
		
		else if (u8PinValCopy == LOW)
     cc8:	8b 81       	ldd	r24, Y+3	; 0x03
     cca:	88 23       	and	r24, r24
     ccc:	09 f0       	breq	.+2      	; 0xcd0 <DIO_SetPinValue+0x118>
     cce:	73 c0       	rjmp	.+230    	; 0xdb6 <DIO_SetPinValue+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
     cd0:	89 81       	ldd	r24, Y+1	; 0x01
     cd2:	28 2f       	mov	r18, r24
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	3d 83       	std	Y+5, r19	; 0x05
     cd8:	2c 83       	std	Y+4, r18	; 0x04
     cda:	8c 81       	ldd	r24, Y+4	; 0x04
     cdc:	9d 81       	ldd	r25, Y+5	; 0x05
     cde:	81 30       	cpi	r24, 0x01	; 1
     ce0:	91 05       	cpc	r25, r1
     ce2:	59 f1       	breq	.+86     	; 0xd3a <DIO_SetPinValue+0x182>
     ce4:	2c 81       	ldd	r18, Y+4	; 0x04
     ce6:	3d 81       	ldd	r19, Y+5	; 0x05
     ce8:	22 30       	cpi	r18, 0x02	; 2
     cea:	31 05       	cpc	r19, r1
     cec:	2c f4       	brge	.+10     	; 0xcf8 <DIO_SetPinValue+0x140>
     cee:	8c 81       	ldd	r24, Y+4	; 0x04
     cf0:	9d 81       	ldd	r25, Y+5	; 0x05
     cf2:	00 97       	sbiw	r24, 0x00	; 0
     cf4:	69 f0       	breq	.+26     	; 0xd10 <DIO_SetPinValue+0x158>
     cf6:	5f c0       	rjmp	.+190    	; 0xdb6 <DIO_SetPinValue+0x1fe>
     cf8:	2c 81       	ldd	r18, Y+4	; 0x04
     cfa:	3d 81       	ldd	r19, Y+5	; 0x05
     cfc:	22 30       	cpi	r18, 0x02	; 2
     cfe:	31 05       	cpc	r19, r1
     d00:	89 f1       	breq	.+98     	; 0xd64 <DIO_SetPinValue+0x1ac>
     d02:	8c 81       	ldd	r24, Y+4	; 0x04
     d04:	9d 81       	ldd	r25, Y+5	; 0x05
     d06:	83 30       	cpi	r24, 0x03	; 3
     d08:	91 05       	cpc	r25, r1
     d0a:	09 f4       	brne	.+2      	; 0xd0e <DIO_SetPinValue+0x156>
     d0c:	40 c0       	rjmp	.+128    	; 0xd8e <DIO_SetPinValue+0x1d6>
     d0e:	53 c0       	rjmp	.+166    	; 0xdb6 <DIO_SetPinValue+0x1fe>
			{
				case PORTA: CLR_BIT(PORTA_Register,u8PinIdCopy); break;
     d10:	ab e3       	ldi	r26, 0x3B	; 59
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	eb e3       	ldi	r30, 0x3B	; 59
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	48 2f       	mov	r20, r24
     d1c:	8a 81       	ldd	r24, Y+2	; 0x02
     d1e:	28 2f       	mov	r18, r24
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	02 2e       	mov	r0, r18
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <DIO_SetPinValue+0x176>
     d2a:	88 0f       	add	r24, r24
     d2c:	99 1f       	adc	r25, r25
     d2e:	0a 94       	dec	r0
     d30:	e2 f7       	brpl	.-8      	; 0xd2a <DIO_SetPinValue+0x172>
     d32:	80 95       	com	r24
     d34:	84 23       	and	r24, r20
     d36:	8c 93       	st	X, r24
     d38:	3e c0       	rjmp	.+124    	; 0xdb6 <DIO_SetPinValue+0x1fe>
				case PORTB: CLR_BIT(PORTB_Register,u8PinIdCopy); break;
     d3a:	a8 e3       	ldi	r26, 0x38	; 56
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e8 e3       	ldi	r30, 0x38	; 56
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	48 2f       	mov	r20, r24
     d46:	8a 81       	ldd	r24, Y+2	; 0x02
     d48:	28 2f       	mov	r18, r24
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	02 2e       	mov	r0, r18
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <DIO_SetPinValue+0x1a0>
     d54:	88 0f       	add	r24, r24
     d56:	99 1f       	adc	r25, r25
     d58:	0a 94       	dec	r0
     d5a:	e2 f7       	brpl	.-8      	; 0xd54 <DIO_SetPinValue+0x19c>
     d5c:	80 95       	com	r24
     d5e:	84 23       	and	r24, r20
     d60:	8c 93       	st	X, r24
     d62:	29 c0       	rjmp	.+82     	; 0xdb6 <DIO_SetPinValue+0x1fe>
				case PORTC: CLR_BIT(PORTC_Register,u8PinIdCopy); break;
     d64:	a5 e3       	ldi	r26, 0x35	; 53
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e5 e3       	ldi	r30, 0x35	; 53
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	48 2f       	mov	r20, r24
     d70:	8a 81       	ldd	r24, Y+2	; 0x02
     d72:	28 2f       	mov	r18, r24
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	02 2e       	mov	r0, r18
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <DIO_SetPinValue+0x1ca>
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	0a 94       	dec	r0
     d84:	e2 f7       	brpl	.-8      	; 0xd7e <DIO_SetPinValue+0x1c6>
     d86:	80 95       	com	r24
     d88:	84 23       	and	r24, r20
     d8a:	8c 93       	st	X, r24
     d8c:	14 c0       	rjmp	.+40     	; 0xdb6 <DIO_SetPinValue+0x1fe>
				case PORTD: CLR_BIT(PORTD_Register,u8PinIdCopy); break;
     d8e:	a2 e3       	ldi	r26, 0x32	; 50
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e2 e3       	ldi	r30, 0x32	; 50
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	48 2f       	mov	r20, r24
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	28 2f       	mov	r18, r24
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	02 2e       	mov	r0, r18
     da6:	02 c0       	rjmp	.+4      	; 0xdac <DIO_SetPinValue+0x1f4>
     da8:	88 0f       	add	r24, r24
     daa:	99 1f       	adc	r25, r25
     dac:	0a 94       	dec	r0
     dae:	e2 f7       	brpl	.-8      	; 0xda8 <DIO_SetPinValue+0x1f0>
     db0:	80 95       	com	r24
     db2:	84 23       	and	r24, r20
     db4:	8c 93       	st	X, r24
	
	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
     db6:	27 96       	adiw	r28, 0x07	; 7
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	f8 94       	cli
     dbc:	de bf       	out	0x3e, r29	; 62
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	cd bf       	out	0x3d, r28	; 61
     dc2:	cf 91       	pop	r28
     dc4:	df 91       	pop	r29
     dc6:	08 95       	ret

00000dc8 <DIO_GetPinValue>:

u8 DIO_GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy)
{
     dc8:	df 93       	push	r29
     dca:	cf 93       	push	r28
     dcc:	00 d0       	rcall	.+0      	; 0xdce <DIO_GetPinValue+0x6>
     dce:	00 d0       	rcall	.+0      	; 0xdd0 <DIO_GetPinValue+0x8>
     dd0:	0f 92       	push	r0
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
     dd6:	8a 83       	std	Y+2, r24	; 0x02
     dd8:	6b 83       	std	Y+3, r22	; 0x03
	/* Define Local Variable to get the BIT Value */
	u8 u8ResultLocal;
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
     dda:	8a 81       	ldd	r24, Y+2	; 0x02
     ddc:	84 30       	cpi	r24, 0x04	; 4
     dde:	08 f0       	brcs	.+2      	; 0xde2 <DIO_GetPinValue+0x1a>
     de0:	6c c0       	rjmp	.+216    	; 0xeba <DIO_GetPinValue+0xf2>
     de2:	8b 81       	ldd	r24, Y+3	; 0x03
     de4:	88 30       	cpi	r24, 0x08	; 8
     de6:	08 f0       	brcs	.+2      	; 0xdea <DIO_GetPinValue+0x22>
     de8:	68 c0       	rjmp	.+208    	; 0xeba <DIO_GetPinValue+0xf2>
	{
		/* Check on the Required PORT Number */
		switch (u8PortIdCopy)
     dea:	8a 81       	ldd	r24, Y+2	; 0x02
     dec:	28 2f       	mov	r18, r24
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	3d 83       	std	Y+5, r19	; 0x05
     df2:	2c 83       	std	Y+4, r18	; 0x04
     df4:	4c 81       	ldd	r20, Y+4	; 0x04
     df6:	5d 81       	ldd	r21, Y+5	; 0x05
     df8:	41 30       	cpi	r20, 0x01	; 1
     dfa:	51 05       	cpc	r21, r1
     dfc:	41 f1       	breq	.+80     	; 0xe4e <DIO_GetPinValue+0x86>
     dfe:	8c 81       	ldd	r24, Y+4	; 0x04
     e00:	9d 81       	ldd	r25, Y+5	; 0x05
     e02:	82 30       	cpi	r24, 0x02	; 2
     e04:	91 05       	cpc	r25, r1
     e06:	34 f4       	brge	.+12     	; 0xe14 <DIO_GetPinValue+0x4c>
     e08:	2c 81       	ldd	r18, Y+4	; 0x04
     e0a:	3d 81       	ldd	r19, Y+5	; 0x05
     e0c:	21 15       	cp	r18, r1
     e0e:	31 05       	cpc	r19, r1
     e10:	61 f0       	breq	.+24     	; 0xe2a <DIO_GetPinValue+0x62>
     e12:	55 c0       	rjmp	.+170    	; 0xebe <DIO_GetPinValue+0xf6>
     e14:	4c 81       	ldd	r20, Y+4	; 0x04
     e16:	5d 81       	ldd	r21, Y+5	; 0x05
     e18:	42 30       	cpi	r20, 0x02	; 2
     e1a:	51 05       	cpc	r21, r1
     e1c:	51 f1       	breq	.+84     	; 0xe72 <DIO_GetPinValue+0xaa>
     e1e:	8c 81       	ldd	r24, Y+4	; 0x04
     e20:	9d 81       	ldd	r25, Y+5	; 0x05
     e22:	83 30       	cpi	r24, 0x03	; 3
     e24:	91 05       	cpc	r25, r1
     e26:	b9 f1       	breq	.+110    	; 0xe96 <DIO_GetPinValue+0xce>
     e28:	4a c0       	rjmp	.+148    	; 0xebe <DIO_GetPinValue+0xf6>
		{
			case PORTA: u8ResultLocal= GET_BIT(PINA_Register,u8PinIdCopy); break;
     e2a:	e9 e3       	ldi	r30, 0x39	; 57
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	28 2f       	mov	r18, r24
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	88 2f       	mov	r24, r24
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	a9 01       	movw	r20, r18
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <DIO_GetPinValue+0x7a>
     e3e:	55 95       	asr	r21
     e40:	47 95       	ror	r20
     e42:	8a 95       	dec	r24
     e44:	e2 f7       	brpl	.-8      	; 0xe3e <DIO_GetPinValue+0x76>
     e46:	ca 01       	movw	r24, r20
     e48:	81 70       	andi	r24, 0x01	; 1
     e4a:	89 83       	std	Y+1, r24	; 0x01
     e4c:	38 c0       	rjmp	.+112    	; 0xebe <DIO_GetPinValue+0xf6>
			case PORTB: u8ResultLocal= GET_BIT(PINB_Register,u8PinIdCopy); break;
     e4e:	e6 e3       	ldi	r30, 0x36	; 54
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	88 2f       	mov	r24, r24
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	a9 01       	movw	r20, r18
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <DIO_GetPinValue+0x9e>
     e62:	55 95       	asr	r21
     e64:	47 95       	ror	r20
     e66:	8a 95       	dec	r24
     e68:	e2 f7       	brpl	.-8      	; 0xe62 <DIO_GetPinValue+0x9a>
     e6a:	ca 01       	movw	r24, r20
     e6c:	81 70       	andi	r24, 0x01	; 1
     e6e:	89 83       	std	Y+1, r24	; 0x01
     e70:	26 c0       	rjmp	.+76     	; 0xebe <DIO_GetPinValue+0xf6>
			case PORTC: u8ResultLocal= GET_BIT(PINC_Register,u8PinIdCopy); break;
     e72:	e3 e3       	ldi	r30, 0x33	; 51
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	28 2f       	mov	r18, r24
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	8b 81       	ldd	r24, Y+3	; 0x03
     e7e:	88 2f       	mov	r24, r24
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	a9 01       	movw	r20, r18
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <DIO_GetPinValue+0xc2>
     e86:	55 95       	asr	r21
     e88:	47 95       	ror	r20
     e8a:	8a 95       	dec	r24
     e8c:	e2 f7       	brpl	.-8      	; 0xe86 <DIO_GetPinValue+0xbe>
     e8e:	ca 01       	movw	r24, r20
     e90:	81 70       	andi	r24, 0x01	; 1
     e92:	89 83       	std	Y+1, r24	; 0x01
     e94:	14 c0       	rjmp	.+40     	; 0xebe <DIO_GetPinValue+0xf6>
			case PORTD: u8ResultLocal= GET_BIT(PIND_Register,u8PinIdCopy); break;
     e96:	e0 e3       	ldi	r30, 0x30	; 48
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
     ea2:	88 2f       	mov	r24, r24
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	a9 01       	movw	r20, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <DIO_GetPinValue+0xe6>
     eaa:	55 95       	asr	r21
     eac:	47 95       	ror	r20
     eae:	8a 95       	dec	r24
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <DIO_GetPinValue+0xe2>
     eb2:	ca 01       	movw	r24, r20
     eb4:	81 70       	andi	r24, 0x01	; 1
     eb6:	89 83       	std	Y+1, r24	; 0x01
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <DIO_GetPinValue+0xf6>
	}
	
	else
	{
		/* return 0xff in case of error in the Pin ID or PORT ID */
		u8ResultLocal = 0xFF;
     eba:	8f ef       	ldi	r24, 0xFF	; 255
     ebc:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return u8ResultLocal;
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
}
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	cf 91       	pop	r28
     ecc:	df 91       	pop	r29
     ece:	08 95       	ret

00000ed0 <DIO_SetPinDirection>:

void DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
     ed0:	df 93       	push	r29
     ed2:	cf 93       	push	r28
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
     ed8:	27 97       	sbiw	r28, 0x07	; 7
     eda:	0f b6       	in	r0, 0x3f	; 63
     edc:	f8 94       	cli
     ede:	de bf       	out	0x3e, r29	; 62
     ee0:	0f be       	out	0x3f, r0	; 63
     ee2:	cd bf       	out	0x3d, r28	; 61
     ee4:	89 83       	std	Y+1, r24	; 0x01
     ee6:	6a 83       	std	Y+2, r22	; 0x02
     ee8:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
     eea:	89 81       	ldd	r24, Y+1	; 0x01
     eec:	84 30       	cpi	r24, 0x04	; 4
     eee:	08 f0       	brcs	.+2      	; 0xef2 <DIO_SetPinDirection+0x22>
     ef0:	ee c0       	rjmp	.+476    	; 0x10ce <DIO_SetPinDirection+0x1fe>
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	88 30       	cpi	r24, 0x08	; 8
     ef6:	08 f0       	brcs	.+2      	; 0xefa <DIO_SetPinDirection+0x2a>
     ef8:	ea c0       	rjmp	.+468    	; 0x10ce <DIO_SetPinDirection+0x1fe>
	{
		if ( u8PinDirCopy == OUTPUT )
     efa:	8b 81       	ldd	r24, Y+3	; 0x03
     efc:	81 30       	cpi	r24, 0x01	; 1
     efe:	09 f0       	breq	.+2      	; 0xf02 <DIO_SetPinDirection+0x32>
     f00:	6f c0       	rjmp	.+222    	; 0xfe0 <DIO_SetPinDirection+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	28 2f       	mov	r18, r24
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	3f 83       	std	Y+7, r19	; 0x07
     f0a:	2e 83       	std	Y+6, r18	; 0x06
     f0c:	8e 81       	ldd	r24, Y+6	; 0x06
     f0e:	9f 81       	ldd	r25, Y+7	; 0x07
     f10:	81 30       	cpi	r24, 0x01	; 1
     f12:	91 05       	cpc	r25, r1
     f14:	49 f1       	breq	.+82     	; 0xf68 <DIO_SetPinDirection+0x98>
     f16:	2e 81       	ldd	r18, Y+6	; 0x06
     f18:	3f 81       	ldd	r19, Y+7	; 0x07
     f1a:	22 30       	cpi	r18, 0x02	; 2
     f1c:	31 05       	cpc	r19, r1
     f1e:	2c f4       	brge	.+10     	; 0xf2a <DIO_SetPinDirection+0x5a>
     f20:	8e 81       	ldd	r24, Y+6	; 0x06
     f22:	9f 81       	ldd	r25, Y+7	; 0x07
     f24:	00 97       	sbiw	r24, 0x00	; 0
     f26:	61 f0       	breq	.+24     	; 0xf40 <DIO_SetPinDirection+0x70>
     f28:	d2 c0       	rjmp	.+420    	; 0x10ce <DIO_SetPinDirection+0x1fe>
     f2a:	2e 81       	ldd	r18, Y+6	; 0x06
     f2c:	3f 81       	ldd	r19, Y+7	; 0x07
     f2e:	22 30       	cpi	r18, 0x02	; 2
     f30:	31 05       	cpc	r19, r1
     f32:	71 f1       	breq	.+92     	; 0xf90 <DIO_SetPinDirection+0xc0>
     f34:	8e 81       	ldd	r24, Y+6	; 0x06
     f36:	9f 81       	ldd	r25, Y+7	; 0x07
     f38:	83 30       	cpi	r24, 0x03	; 3
     f3a:	91 05       	cpc	r25, r1
     f3c:	e9 f1       	breq	.+122    	; 0xfb8 <DIO_SetPinDirection+0xe8>
     f3e:	c7 c0       	rjmp	.+398    	; 0x10ce <DIO_SetPinDirection+0x1fe>
			{
				case PORTA: SET_BIT(DDRA_Register,u8PinIdCopy); break;
     f40:	aa e3       	ldi	r26, 0x3A	; 58
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	ea e3       	ldi	r30, 0x3A	; 58
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	48 2f       	mov	r20, r24
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	02 2e       	mov	r0, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <DIO_SetPinDirection+0x8e>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	0a 94       	dec	r0
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <DIO_SetPinDirection+0x8a>
     f62:	84 2b       	or	r24, r20
     f64:	8c 93       	st	X, r24
     f66:	b3 c0       	rjmp	.+358    	; 0x10ce <DIO_SetPinDirection+0x1fe>
				case PORTB: SET_BIT(DDRB_Register,u8PinIdCopy); break;
     f68:	a7 e3       	ldi	r26, 0x37	; 55
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e7 e3       	ldi	r30, 0x37	; 55
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	48 2f       	mov	r20, r24
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	02 2e       	mov	r0, r18
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <DIO_SetPinDirection+0xb6>
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	0a 94       	dec	r0
     f88:	e2 f7       	brpl	.-8      	; 0xf82 <DIO_SetPinDirection+0xb2>
     f8a:	84 2b       	or	r24, r20
     f8c:	8c 93       	st	X, r24
     f8e:	9f c0       	rjmp	.+318    	; 0x10ce <DIO_SetPinDirection+0x1fe>
				case PORTC: SET_BIT(DDRC_Register,u8PinIdCopy); break;
     f90:	a4 e3       	ldi	r26, 0x34	; 52
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e4 e3       	ldi	r30, 0x34	; 52
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	48 2f       	mov	r20, r24
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	02 2e       	mov	r0, r18
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <DIO_SetPinDirection+0xde>
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	0a 94       	dec	r0
     fb0:	e2 f7       	brpl	.-8      	; 0xfaa <DIO_SetPinDirection+0xda>
     fb2:	84 2b       	or	r24, r20
     fb4:	8c 93       	st	X, r24
     fb6:	8b c0       	rjmp	.+278    	; 0x10ce <DIO_SetPinDirection+0x1fe>
				case PORTD: SET_BIT(DDRD_Register,u8PinIdCopy); break;
     fb8:	a1 e3       	ldi	r26, 0x31	; 49
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e1 e3       	ldi	r30, 0x31	; 49
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	48 2f       	mov	r20, r24
     fc4:	8a 81       	ldd	r24, Y+2	; 0x02
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	02 2e       	mov	r0, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <DIO_SetPinDirection+0x106>
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	0a 94       	dec	r0
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <DIO_SetPinDirection+0x102>
     fda:	84 2b       	or	r24, r20
     fdc:	8c 93       	st	X, r24
     fde:	77 c0       	rjmp	.+238    	; 0x10ce <DIO_SetPinDirection+0x1fe>
			}
		}
		
		else if ( u8PinDirCopy == INPUT )
     fe0:	8b 81       	ldd	r24, Y+3	; 0x03
     fe2:	88 23       	and	r24, r24
     fe4:	09 f0       	breq	.+2      	; 0xfe8 <DIO_SetPinDirection+0x118>
     fe6:	73 c0       	rjmp	.+230    	; 0x10ce <DIO_SetPinDirection+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	3d 83       	std	Y+5, r19	; 0x05
     ff0:	2c 83       	std	Y+4, r18	; 0x04
     ff2:	8c 81       	ldd	r24, Y+4	; 0x04
     ff4:	9d 81       	ldd	r25, Y+5	; 0x05
     ff6:	81 30       	cpi	r24, 0x01	; 1
     ff8:	91 05       	cpc	r25, r1
     ffa:	59 f1       	breq	.+86     	; 0x1052 <DIO_SetPinDirection+0x182>
     ffc:	2c 81       	ldd	r18, Y+4	; 0x04
     ffe:	3d 81       	ldd	r19, Y+5	; 0x05
    1000:	22 30       	cpi	r18, 0x02	; 2
    1002:	31 05       	cpc	r19, r1
    1004:	2c f4       	brge	.+10     	; 0x1010 <DIO_SetPinDirection+0x140>
    1006:	8c 81       	ldd	r24, Y+4	; 0x04
    1008:	9d 81       	ldd	r25, Y+5	; 0x05
    100a:	00 97       	sbiw	r24, 0x00	; 0
    100c:	69 f0       	breq	.+26     	; 0x1028 <DIO_SetPinDirection+0x158>
    100e:	5f c0       	rjmp	.+190    	; 0x10ce <DIO_SetPinDirection+0x1fe>
    1010:	2c 81       	ldd	r18, Y+4	; 0x04
    1012:	3d 81       	ldd	r19, Y+5	; 0x05
    1014:	22 30       	cpi	r18, 0x02	; 2
    1016:	31 05       	cpc	r19, r1
    1018:	89 f1       	breq	.+98     	; 0x107c <DIO_SetPinDirection+0x1ac>
    101a:	8c 81       	ldd	r24, Y+4	; 0x04
    101c:	9d 81       	ldd	r25, Y+5	; 0x05
    101e:	83 30       	cpi	r24, 0x03	; 3
    1020:	91 05       	cpc	r25, r1
    1022:	09 f4       	brne	.+2      	; 0x1026 <DIO_SetPinDirection+0x156>
    1024:	40 c0       	rjmp	.+128    	; 0x10a6 <DIO_SetPinDirection+0x1d6>
    1026:	53 c0       	rjmp	.+166    	; 0x10ce <DIO_SetPinDirection+0x1fe>
			{
				case PORTA: CLR_BIT(DDRA_Register,u8PinIdCopy); break;
    1028:	aa e3       	ldi	r26, 0x3A	; 58
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	ea e3       	ldi	r30, 0x3A	; 58
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	48 2f       	mov	r20, r24
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	02 2e       	mov	r0, r18
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <DIO_SetPinDirection+0x176>
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	0a 94       	dec	r0
    1048:	e2 f7       	brpl	.-8      	; 0x1042 <DIO_SetPinDirection+0x172>
    104a:	80 95       	com	r24
    104c:	84 23       	and	r24, r20
    104e:	8c 93       	st	X, r24
    1050:	3e c0       	rjmp	.+124    	; 0x10ce <DIO_SetPinDirection+0x1fe>
				case PORTB: CLR_BIT(DDRB_Register,u8PinIdCopy); break;
    1052:	a7 e3       	ldi	r26, 0x37	; 55
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e7 e3       	ldi	r30, 0x37	; 55
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	48 2f       	mov	r20, r24
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	02 2e       	mov	r0, r18
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <DIO_SetPinDirection+0x1a0>
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	0a 94       	dec	r0
    1072:	e2 f7       	brpl	.-8      	; 0x106c <DIO_SetPinDirection+0x19c>
    1074:	80 95       	com	r24
    1076:	84 23       	and	r24, r20
    1078:	8c 93       	st	X, r24
    107a:	29 c0       	rjmp	.+82     	; 0x10ce <DIO_SetPinDirection+0x1fe>
				case PORTC: CLR_BIT(DDRC_Register,u8PinIdCopy); break;
    107c:	a4 e3       	ldi	r26, 0x34	; 52
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e4 e3       	ldi	r30, 0x34	; 52
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	48 2f       	mov	r20, r24
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	02 2e       	mov	r0, r18
    1094:	02 c0       	rjmp	.+4      	; 0x109a <DIO_SetPinDirection+0x1ca>
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	0a 94       	dec	r0
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <DIO_SetPinDirection+0x1c6>
    109e:	80 95       	com	r24
    10a0:	84 23       	and	r24, r20
    10a2:	8c 93       	st	X, r24
    10a4:	14 c0       	rjmp	.+40     	; 0x10ce <DIO_SetPinDirection+0x1fe>
				case PORTD: CLR_BIT(DDRD_Register,u8PinIdCopy); break;
    10a6:	a1 e3       	ldi	r26, 0x31	; 49
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e1 e3       	ldi	r30, 0x31	; 49
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	48 2f       	mov	r20, r24
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	02 2e       	mov	r0, r18
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <DIO_SetPinDirection+0x1f4>
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	0a 94       	dec	r0
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <DIO_SetPinDirection+0x1f0>
    10c8:	80 95       	com	r24
    10ca:	84 23       	and	r24, r20
    10cc:	8c 93       	st	X, r24
	
	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
    10ce:	27 96       	adiw	r28, 0x07	; 7
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	f8 94       	cli
    10d4:	de bf       	out	0x3e, r29	; 62
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	cd bf       	out	0x3d, r28	; 61
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	08 95       	ret

000010e0 <DIO_SetPortDirection>:


/* IO Ports */
void DIO_SetPortDirection (u8 u8PortId, u8 u8PortDir)
{
    10e0:	df 93       	push	r29
    10e2:	cf 93       	push	r28
    10e4:	00 d0       	rcall	.+0      	; 0x10e6 <DIO_SetPortDirection+0x6>
    10e6:	00 d0       	rcall	.+0      	; 0x10e8 <DIO_SetPortDirection+0x8>
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	89 83       	std	Y+1, r24	; 0x01
    10ee:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (u8PortId)
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	3c 83       	std	Y+4, r19	; 0x04
    10f8:	2b 83       	std	Y+3, r18	; 0x03
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	9c 81       	ldd	r25, Y+4	; 0x04
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	91 05       	cpc	r25, r1
    1102:	d1 f0       	breq	.+52     	; 0x1138 <DIO_SetPortDirection+0x58>
    1104:	2b 81       	ldd	r18, Y+3	; 0x03
    1106:	3c 81       	ldd	r19, Y+4	; 0x04
    1108:	22 30       	cpi	r18, 0x02	; 2
    110a:	31 05       	cpc	r19, r1
    110c:	2c f4       	brge	.+10     	; 0x1118 <DIO_SetPortDirection+0x38>
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	9c 81       	ldd	r25, Y+4	; 0x04
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	61 f0       	breq	.+24     	; 0x112e <DIO_SetPortDirection+0x4e>
    1116:	1e c0       	rjmp	.+60     	; 0x1154 <DIO_SetPortDirection+0x74>
    1118:	2b 81       	ldd	r18, Y+3	; 0x03
    111a:	3c 81       	ldd	r19, Y+4	; 0x04
    111c:	22 30       	cpi	r18, 0x02	; 2
    111e:	31 05       	cpc	r19, r1
    1120:	81 f0       	breq	.+32     	; 0x1142 <DIO_SetPortDirection+0x62>
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	9c 81       	ldd	r25, Y+4	; 0x04
    1126:	83 30       	cpi	r24, 0x03	; 3
    1128:	91 05       	cpc	r25, r1
    112a:	81 f0       	breq	.+32     	; 0x114c <DIO_SetPortDirection+0x6c>
    112c:	13 c0       	rjmp	.+38     	; 0x1154 <DIO_SetPortDirection+0x74>
	{
		case     PORTA: DDRA_Register = u8PortDir; break;
    112e:	ea e3       	ldi	r30, 0x3A	; 58
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	80 83       	st	Z, r24
    1136:	0e c0       	rjmp	.+28     	; 0x1154 <DIO_SetPortDirection+0x74>
		case     PORTB: DDRB_Register = u8PortDir; break;
    1138:	e7 e3       	ldi	r30, 0x37	; 55
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	80 83       	st	Z, r24
    1140:	09 c0       	rjmp	.+18     	; 0x1154 <DIO_SetPortDirection+0x74>
		case     PORTC: DDRC_Register = u8PortDir; break;
    1142:	e4 e3       	ldi	r30, 0x34	; 52
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	80 83       	st	Z, r24
    114a:	04 c0       	rjmp	.+8      	; 0x1154 <DIO_SetPortDirection+0x74>
		case     PORTD: DDRD_Register = u8PortDir; break;
    114c:	e1 e3       	ldi	r30, 0x31	; 49
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	80 83       	st	Z, r24
		default: /* Wrong Port ID */       break;
	}
}
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	08 95       	ret

00001162 <DIO_SetPortValue>:

void DIO_SetPortValue (u8 u8PortId, u8 u8PortVal)
{
    1162:	df 93       	push	r29
    1164:	cf 93       	push	r28
    1166:	00 d0       	rcall	.+0      	; 0x1168 <DIO_SetPortValue+0x6>
    1168:	00 d0       	rcall	.+0      	; 0x116a <DIO_SetPortValue+0x8>
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	89 83       	std	Y+1, r24	; 0x01
    1170:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (u8PortId)
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	3c 83       	std	Y+4, r19	; 0x04
    117a:	2b 83       	std	Y+3, r18	; 0x03
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	9c 81       	ldd	r25, Y+4	; 0x04
    1180:	81 30       	cpi	r24, 0x01	; 1
    1182:	91 05       	cpc	r25, r1
    1184:	d1 f0       	breq	.+52     	; 0x11ba <DIO_SetPortValue+0x58>
    1186:	2b 81       	ldd	r18, Y+3	; 0x03
    1188:	3c 81       	ldd	r19, Y+4	; 0x04
    118a:	22 30       	cpi	r18, 0x02	; 2
    118c:	31 05       	cpc	r19, r1
    118e:	2c f4       	brge	.+10     	; 0x119a <DIO_SetPortValue+0x38>
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	9c 81       	ldd	r25, Y+4	; 0x04
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	61 f0       	breq	.+24     	; 0x11b0 <DIO_SetPortValue+0x4e>
    1198:	1e c0       	rjmp	.+60     	; 0x11d6 <DIO_SetPortValue+0x74>
    119a:	2b 81       	ldd	r18, Y+3	; 0x03
    119c:	3c 81       	ldd	r19, Y+4	; 0x04
    119e:	22 30       	cpi	r18, 0x02	; 2
    11a0:	31 05       	cpc	r19, r1
    11a2:	81 f0       	breq	.+32     	; 0x11c4 <DIO_SetPortValue+0x62>
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	9c 81       	ldd	r25, Y+4	; 0x04
    11a8:	83 30       	cpi	r24, 0x03	; 3
    11aa:	91 05       	cpc	r25, r1
    11ac:	81 f0       	breq	.+32     	; 0x11ce <DIO_SetPortValue+0x6c>
    11ae:	13 c0       	rjmp	.+38     	; 0x11d6 <DIO_SetPortValue+0x74>
	{
		case     PORTA: PORTA_Register = u8PortVal; break;
    11b0:	eb e3       	ldi	r30, 0x3B	; 59
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	80 83       	st	Z, r24
    11b8:	0e c0       	rjmp	.+28     	; 0x11d6 <DIO_SetPortValue+0x74>
		case     PORTB: PORTB_Register = u8PortVal; break;
    11ba:	e8 e3       	ldi	r30, 0x38	; 56
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	80 83       	st	Z, r24
    11c2:	09 c0       	rjmp	.+18     	; 0x11d6 <DIO_SetPortValue+0x74>
		case     PORTC: PORTC_Register = u8PortVal; break;
    11c4:	e5 e3       	ldi	r30, 0x35	; 53
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	80 83       	st	Z, r24
    11cc:	04 c0       	rjmp	.+8      	; 0x11d6 <DIO_SetPortValue+0x74>
		case     PORTD: PORTD_Register = u8PortVal; break;
    11ce:	e2 e3       	ldi	r30, 0x32	; 50
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	80 83       	st	Z, r24
		default: /* Wrong Port ID */        break;
	}
}
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	cf 91       	pop	r28
    11e0:	df 91       	pop	r29
    11e2:	08 95       	ret

000011e4 <LCD_vidWriteCommand>:

#include "LCD_int.h"


/****************************************************************/
void LCD_vidWriteCommand (u8 u8CmdCpy) {
    11e4:	df 93       	push	r29
    11e6:	cf 93       	push	r28
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
    11ec:	2f 97       	sbiw	r28, 0x0f	; 15
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	f8 94       	cli
    11f2:	de bf       	out	0x3e, r29	; 62
    11f4:	0f be       	out	0x3f, r0	; 63
    11f6:	cd bf       	out	0x3d, r28	; 61
    11f8:	8f 87       	std	Y+15, r24	; 0x0f
	  // Set RS = 0
	  DIO_SetPinValue(PORTD , PIN1, LOW);
    11fa:	83 e0       	ldi	r24, 0x03	; 3
    11fc:	61 e0       	ldi	r22, 0x01	; 1
    11fe:	40 e0       	ldi	r20, 0x00	; 0
    1200:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <DIO_SetPinValue>

	  // Set R/W = 0
	  DIO_SetPinValue(PORTD , PIN2, LOW);
    1204:	83 e0       	ldi	r24, 0x03	; 3
    1206:	62 e0       	ldi	r22, 0x02	; 2
    1208:	40 e0       	ldi	r20, 0x00	; 0
    120a:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <DIO_SetPinValue>

	  // Set EN = 0
	  DIO_SetPinValue(PORTD , PIN3, HIGH);
    120e:	83 e0       	ldi	r24, 0x03	; 3
    1210:	63 e0       	ldi	r22, 0x03	; 3
    1212:	41 e0       	ldi	r20, 0x01	; 1
    1214:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <DIO_SetPinValue>

	  DIO_SetPortValue (PORTC,u8CmdCpy);
    1218:	82 e0       	ldi	r24, 0x02	; 2
    121a:	6f 85       	ldd	r22, Y+15	; 0x0f
    121c:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_SetPortValue>

	  // set EN to 1 after settting command
	  // pulse
	  DIO_SetPinValue(PORTD , PIN3, LOW);
    1220:	83 e0       	ldi	r24, 0x03	; 3
    1222:	63 e0       	ldi	r22, 0x03	; 3
    1224:	40 e0       	ldi	r20, 0x00	; 0
    1226:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <DIO_SetPinValue>
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	a0 e2       	ldi	r26, 0x20	; 32
    1230:	b1 e4       	ldi	r27, 0x41	; 65
    1232:	8b 87       	std	Y+11, r24	; 0x0b
    1234:	9c 87       	std	Y+12, r25	; 0x0c
    1236:	ad 87       	std	Y+13, r26	; 0x0d
    1238:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    123a:	6b 85       	ldd	r22, Y+11	; 0x0b
    123c:	7c 85       	ldd	r23, Y+12	; 0x0c
    123e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1240:	9e 85       	ldd	r25, Y+14	; 0x0e
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	4a ef       	ldi	r20, 0xFA	; 250
    1248:	54 e4       	ldi	r21, 0x44	; 68
    124a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    124e:	dc 01       	movw	r26, r24
    1250:	cb 01       	movw	r24, r22
    1252:	8f 83       	std	Y+7, r24	; 0x07
    1254:	98 87       	std	Y+8, r25	; 0x08
    1256:	a9 87       	std	Y+9, r26	; 0x09
    1258:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    125a:	6f 81       	ldd	r22, Y+7	; 0x07
    125c:	78 85       	ldd	r23, Y+8	; 0x08
    125e:	89 85       	ldd	r24, Y+9	; 0x09
    1260:	9a 85       	ldd	r25, Y+10	; 0x0a
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	40 e8       	ldi	r20, 0x80	; 128
    1268:	5f e3       	ldi	r21, 0x3F	; 63
    126a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    126e:	88 23       	and	r24, r24
    1270:	2c f4       	brge	.+10     	; 0x127c <LCD_vidWriteCommand+0x98>
		__ticks = 1;
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	9e 83       	std	Y+6, r25	; 0x06
    1278:	8d 83       	std	Y+5, r24	; 0x05
    127a:	3f c0       	rjmp	.+126    	; 0x12fa <LCD_vidWriteCommand+0x116>
	else if (__tmp > 65535)
    127c:	6f 81       	ldd	r22, Y+7	; 0x07
    127e:	78 85       	ldd	r23, Y+8	; 0x08
    1280:	89 85       	ldd	r24, Y+9	; 0x09
    1282:	9a 85       	ldd	r25, Y+10	; 0x0a
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	3f ef       	ldi	r19, 0xFF	; 255
    1288:	4f e7       	ldi	r20, 0x7F	; 127
    128a:	57 e4       	ldi	r21, 0x47	; 71
    128c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1290:	18 16       	cp	r1, r24
    1292:	4c f5       	brge	.+82     	; 0x12e6 <LCD_vidWriteCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1294:	6b 85       	ldd	r22, Y+11	; 0x0b
    1296:	7c 85       	ldd	r23, Y+12	; 0x0c
    1298:	8d 85       	ldd	r24, Y+13	; 0x0d
    129a:	9e 85       	ldd	r25, Y+14	; 0x0e
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	40 e2       	ldi	r20, 0x20	; 32
    12a2:	51 e4       	ldi	r21, 0x41	; 65
    12a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	bc 01       	movw	r22, r24
    12ae:	cd 01       	movw	r24, r26
    12b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	9e 83       	std	Y+6, r25	; 0x06
    12ba:	8d 83       	std	Y+5, r24	; 0x05
    12bc:	0f c0       	rjmp	.+30     	; 0x12dc <LCD_vidWriteCommand+0xf8>
    12be:	88 ec       	ldi	r24, 0xC8	; 200
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	9c 83       	std	Y+4, r25	; 0x04
    12c4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	f1 f7       	brne	.-4      	; 0x12ca <LCD_vidWriteCommand+0xe6>
    12ce:	9c 83       	std	Y+4, r25	; 0x04
    12d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12d2:	8d 81       	ldd	r24, Y+5	; 0x05
    12d4:	9e 81       	ldd	r25, Y+6	; 0x06
    12d6:	01 97       	sbiw	r24, 0x01	; 1
    12d8:	9e 83       	std	Y+6, r25	; 0x06
    12da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12dc:	8d 81       	ldd	r24, Y+5	; 0x05
    12de:	9e 81       	ldd	r25, Y+6	; 0x06
    12e0:	00 97       	sbiw	r24, 0x00	; 0
    12e2:	69 f7       	brne	.-38     	; 0x12be <LCD_vidWriteCommand+0xda>
    12e4:	14 c0       	rjmp	.+40     	; 0x130e <LCD_vidWriteCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12e6:	6f 81       	ldd	r22, Y+7	; 0x07
    12e8:	78 85       	ldd	r23, Y+8	; 0x08
    12ea:	89 85       	ldd	r24, Y+9	; 0x09
    12ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	9e 83       	std	Y+6, r25	; 0x06
    12f8:	8d 83       	std	Y+5, r24	; 0x05
    12fa:	8d 81       	ldd	r24, Y+5	; 0x05
    12fc:	9e 81       	ldd	r25, Y+6	; 0x06
    12fe:	9a 83       	std	Y+2, r25	; 0x02
    1300:	89 83       	std	Y+1, r24	; 0x01
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	9a 81       	ldd	r25, Y+2	; 0x02
    1306:	01 97       	sbiw	r24, 0x01	; 1
    1308:	f1 f7       	brne	.-4      	; 0x1306 <LCD_vidWriteCommand+0x122>
    130a:	9a 83       	std	Y+2, r25	; 0x02
    130c:	89 83       	std	Y+1, r24	; 0x01
	  _delay_ms(10);
	  DIO_SetPinValue(PORTD , PIN3, HIGH);
    130e:	83 e0       	ldi	r24, 0x03	; 3
    1310:	63 e0       	ldi	r22, 0x03	; 3
    1312:	41 e0       	ldi	r20, 0x01	; 1
    1314:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <DIO_SetPinValue>

  }
    1318:	2f 96       	adiw	r28, 0x0f	; 15
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	f8 94       	cli
    131e:	de bf       	out	0x3e, r29	; 62
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	cd bf       	out	0x3d, r28	; 61
    1324:	cf 91       	pop	r28
    1326:	df 91       	pop	r29
    1328:	08 95       	ret

0000132a <LCD_vidInitialize>:


/****************************************************************/


void LCD_vidInitialize(void){
    132a:	0f 93       	push	r16
    132c:	1f 93       	push	r17
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
    1336:	c6 54       	subi	r28, 0x46	; 70
    1338:	d0 40       	sbci	r29, 0x00	; 0
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	f8 94       	cli
    133e:	de bf       	out	0x3e, r29	; 62
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	cd bf       	out	0x3d, r28	; 61


	 // set VDD @ A0 to 5 volt
	  DIO_SetPinValue(PORTD , PIN0, HIGH);
    1344:	83 e0       	ldi	r24, 0x03	; 3
    1346:	60 e0       	ldi	r22, 0x00	; 0
    1348:	41 e0       	ldi	r20, 0x01	; 1
    134a:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <DIO_SetPinValue>
    134e:	fe 01       	movw	r30, r28
    1350:	ed 5b       	subi	r30, 0xBD	; 189
    1352:	ff 4f       	sbci	r31, 0xFF	; 255
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	a8 e4       	ldi	r26, 0x48	; 72
    135a:	b2 e4       	ldi	r27, 0x42	; 66
    135c:	80 83       	st	Z, r24
    135e:	91 83       	std	Z+1, r25	; 0x01
    1360:	a2 83       	std	Z+2, r26	; 0x02
    1362:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1364:	8e 01       	movw	r16, r28
    1366:	01 5c       	subi	r16, 0xC1	; 193
    1368:	1f 4f       	sbci	r17, 0xFF	; 255
    136a:	fe 01       	movw	r30, r28
    136c:	ed 5b       	subi	r30, 0xBD	; 189
    136e:	ff 4f       	sbci	r31, 0xFF	; 255
    1370:	60 81       	ld	r22, Z
    1372:	71 81       	ldd	r23, Z+1	; 0x01
    1374:	82 81       	ldd	r24, Z+2	; 0x02
    1376:	93 81       	ldd	r25, Z+3	; 0x03
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	4a ef       	ldi	r20, 0xFA	; 250
    137e:	54 e4       	ldi	r21, 0x44	; 68
    1380:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1384:	dc 01       	movw	r26, r24
    1386:	cb 01       	movw	r24, r22
    1388:	f8 01       	movw	r30, r16
    138a:	80 83       	st	Z, r24
    138c:	91 83       	std	Z+1, r25	; 0x01
    138e:	a2 83       	std	Z+2, r26	; 0x02
    1390:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1392:	fe 01       	movw	r30, r28
    1394:	ff 96       	adiw	r30, 0x3f	; 63
    1396:	60 81       	ld	r22, Z
    1398:	71 81       	ldd	r23, Z+1	; 0x01
    139a:	82 81       	ldd	r24, Z+2	; 0x02
    139c:	93 81       	ldd	r25, Z+3	; 0x03
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	40 e8       	ldi	r20, 0x80	; 128
    13a4:	5f e3       	ldi	r21, 0x3F	; 63
    13a6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    13aa:	88 23       	and	r24, r24
    13ac:	2c f4       	brge	.+10     	; 0x13b8 <LCD_vidInitialize+0x8e>
		__ticks = 1;
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	9e af       	std	Y+62, r25	; 0x3e
    13b4:	8d af       	std	Y+61, r24	; 0x3d
    13b6:	46 c0       	rjmp	.+140    	; 0x1444 <LCD_vidInitialize+0x11a>
	else if (__tmp > 65535)
    13b8:	fe 01       	movw	r30, r28
    13ba:	ff 96       	adiw	r30, 0x3f	; 63
    13bc:	60 81       	ld	r22, Z
    13be:	71 81       	ldd	r23, Z+1	; 0x01
    13c0:	82 81       	ldd	r24, Z+2	; 0x02
    13c2:	93 81       	ldd	r25, Z+3	; 0x03
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	3f ef       	ldi	r19, 0xFF	; 255
    13c8:	4f e7       	ldi	r20, 0x7F	; 127
    13ca:	57 e4       	ldi	r21, 0x47	; 71
    13cc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    13d0:	18 16       	cp	r1, r24
    13d2:	64 f5       	brge	.+88     	; 0x142c <LCD_vidInitialize+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13d4:	fe 01       	movw	r30, r28
    13d6:	ed 5b       	subi	r30, 0xBD	; 189
    13d8:	ff 4f       	sbci	r31, 0xFF	; 255
    13da:	60 81       	ld	r22, Z
    13dc:	71 81       	ldd	r23, Z+1	; 0x01
    13de:	82 81       	ldd	r24, Z+2	; 0x02
    13e0:	93 81       	ldd	r25, Z+3	; 0x03
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	40 e2       	ldi	r20, 0x20	; 32
    13e8:	51 e4       	ldi	r21, 0x41	; 65
    13ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13ee:	dc 01       	movw	r26, r24
    13f0:	cb 01       	movw	r24, r22
    13f2:	bc 01       	movw	r22, r24
    13f4:	cd 01       	movw	r24, r26
    13f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13fa:	dc 01       	movw	r26, r24
    13fc:	cb 01       	movw	r24, r22
    13fe:	9e af       	std	Y+62, r25	; 0x3e
    1400:	8d af       	std	Y+61, r24	; 0x3d
    1402:	0f c0       	rjmp	.+30     	; 0x1422 <LCD_vidInitialize+0xf8>
    1404:	88 ec       	ldi	r24, 0xC8	; 200
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	9c af       	std	Y+60, r25	; 0x3c
    140a:	8b af       	std	Y+59, r24	; 0x3b
    140c:	8b ad       	ldd	r24, Y+59	; 0x3b
    140e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1410:	01 97       	sbiw	r24, 0x01	; 1
    1412:	f1 f7       	brne	.-4      	; 0x1410 <LCD_vidInitialize+0xe6>
    1414:	9c af       	std	Y+60, r25	; 0x3c
    1416:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1418:	8d ad       	ldd	r24, Y+61	; 0x3d
    141a:	9e ad       	ldd	r25, Y+62	; 0x3e
    141c:	01 97       	sbiw	r24, 0x01	; 1
    141e:	9e af       	std	Y+62, r25	; 0x3e
    1420:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1422:	8d ad       	ldd	r24, Y+61	; 0x3d
    1424:	9e ad       	ldd	r25, Y+62	; 0x3e
    1426:	00 97       	sbiw	r24, 0x00	; 0
    1428:	69 f7       	brne	.-38     	; 0x1404 <LCD_vidInitialize+0xda>
    142a:	16 c0       	rjmp	.+44     	; 0x1458 <LCD_vidInitialize+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    142c:	fe 01       	movw	r30, r28
    142e:	ff 96       	adiw	r30, 0x3f	; 63
    1430:	60 81       	ld	r22, Z
    1432:	71 81       	ldd	r23, Z+1	; 0x01
    1434:	82 81       	ldd	r24, Z+2	; 0x02
    1436:	93 81       	ldd	r25, Z+3	; 0x03
    1438:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    143c:	dc 01       	movw	r26, r24
    143e:	cb 01       	movw	r24, r22
    1440:	9e af       	std	Y+62, r25	; 0x3e
    1442:	8d af       	std	Y+61, r24	; 0x3d
    1444:	8d ad       	ldd	r24, Y+61	; 0x3d
    1446:	9e ad       	ldd	r25, Y+62	; 0x3e
    1448:	9a af       	std	Y+58, r25	; 0x3a
    144a:	89 af       	std	Y+57, r24	; 0x39
    144c:	89 ad       	ldd	r24, Y+57	; 0x39
    144e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1450:	01 97       	sbiw	r24, 0x01	; 1
    1452:	f1 f7       	brne	.-4      	; 0x1450 <LCD_vidInitialize+0x126>
    1454:	9a af       	std	Y+58, r25	; 0x3a
    1456:	89 af       	std	Y+57, r24	; 0x39
	  //Return Home
	  	// LCD_vidWriteCommand (0b00000010);//0X02
	  	// _delay_ms (10000);

	//FUNCTION SET
	  LCD_vidWriteCommand (0b00111000);//0X38  // N=0 1 line 0b00110000
    1458:	88 e3       	ldi	r24, 0x38	; 56
    145a:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <LCD_vidWriteCommand>
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	a0 e2       	ldi	r26, 0x20	; 32
    1464:	b1 e4       	ldi	r27, 0x41	; 65
    1466:	8d ab       	std	Y+53, r24	; 0x35
    1468:	9e ab       	std	Y+54, r25	; 0x36
    146a:	af ab       	std	Y+55, r26	; 0x37
    146c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    146e:	6d a9       	ldd	r22, Y+53	; 0x35
    1470:	7e a9       	ldd	r23, Y+54	; 0x36
    1472:	8f a9       	ldd	r24, Y+55	; 0x37
    1474:	98 ad       	ldd	r25, Y+56	; 0x38
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	4a ef       	ldi	r20, 0xFA	; 250
    147c:	54 e4       	ldi	r21, 0x44	; 68
    147e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1482:	dc 01       	movw	r26, r24
    1484:	cb 01       	movw	r24, r22
    1486:	89 ab       	std	Y+49, r24	; 0x31
    1488:	9a ab       	std	Y+50, r25	; 0x32
    148a:	ab ab       	std	Y+51, r26	; 0x33
    148c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    148e:	69 a9       	ldd	r22, Y+49	; 0x31
    1490:	7a a9       	ldd	r23, Y+50	; 0x32
    1492:	8b a9       	ldd	r24, Y+51	; 0x33
    1494:	9c a9       	ldd	r25, Y+52	; 0x34
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	40 e8       	ldi	r20, 0x80	; 128
    149c:	5f e3       	ldi	r21, 0x3F	; 63
    149e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    14a2:	88 23       	and	r24, r24
    14a4:	2c f4       	brge	.+10     	; 0x14b0 <LCD_vidInitialize+0x186>
		__ticks = 1;
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	98 ab       	std	Y+48, r25	; 0x30
    14ac:	8f a7       	std	Y+47, r24	; 0x2f
    14ae:	3f c0       	rjmp	.+126    	; 0x152e <LCD_vidInitialize+0x204>
	else if (__tmp > 65535)
    14b0:	69 a9       	ldd	r22, Y+49	; 0x31
    14b2:	7a a9       	ldd	r23, Y+50	; 0x32
    14b4:	8b a9       	ldd	r24, Y+51	; 0x33
    14b6:	9c a9       	ldd	r25, Y+52	; 0x34
    14b8:	20 e0       	ldi	r18, 0x00	; 0
    14ba:	3f ef       	ldi	r19, 0xFF	; 255
    14bc:	4f e7       	ldi	r20, 0x7F	; 127
    14be:	57 e4       	ldi	r21, 0x47	; 71
    14c0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    14c4:	18 16       	cp	r1, r24
    14c6:	4c f5       	brge	.+82     	; 0x151a <LCD_vidInitialize+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14c8:	6d a9       	ldd	r22, Y+53	; 0x35
    14ca:	7e a9       	ldd	r23, Y+54	; 0x36
    14cc:	8f a9       	ldd	r24, Y+55	; 0x37
    14ce:	98 ad       	ldd	r25, Y+56	; 0x38
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	40 e2       	ldi	r20, 0x20	; 32
    14d6:	51 e4       	ldi	r21, 0x41	; 65
    14d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14dc:	dc 01       	movw	r26, r24
    14de:	cb 01       	movw	r24, r22
    14e0:	bc 01       	movw	r22, r24
    14e2:	cd 01       	movw	r24, r26
    14e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14e8:	dc 01       	movw	r26, r24
    14ea:	cb 01       	movw	r24, r22
    14ec:	98 ab       	std	Y+48, r25	; 0x30
    14ee:	8f a7       	std	Y+47, r24	; 0x2f
    14f0:	0f c0       	rjmp	.+30     	; 0x1510 <LCD_vidInitialize+0x1e6>
    14f2:	88 ec       	ldi	r24, 0xC8	; 200
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	9e a7       	std	Y+46, r25	; 0x2e
    14f8:	8d a7       	std	Y+45, r24	; 0x2d
    14fa:	8d a5       	ldd	r24, Y+45	; 0x2d
    14fc:	9e a5       	ldd	r25, Y+46	; 0x2e
    14fe:	01 97       	sbiw	r24, 0x01	; 1
    1500:	f1 f7       	brne	.-4      	; 0x14fe <LCD_vidInitialize+0x1d4>
    1502:	9e a7       	std	Y+46, r25	; 0x2e
    1504:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1506:	8f a5       	ldd	r24, Y+47	; 0x2f
    1508:	98 a9       	ldd	r25, Y+48	; 0x30
    150a:	01 97       	sbiw	r24, 0x01	; 1
    150c:	98 ab       	std	Y+48, r25	; 0x30
    150e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1510:	8f a5       	ldd	r24, Y+47	; 0x2f
    1512:	98 a9       	ldd	r25, Y+48	; 0x30
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	69 f7       	brne	.-38     	; 0x14f2 <LCD_vidInitialize+0x1c8>
    1518:	14 c0       	rjmp	.+40     	; 0x1542 <LCD_vidInitialize+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    151a:	69 a9       	ldd	r22, Y+49	; 0x31
    151c:	7a a9       	ldd	r23, Y+50	; 0x32
    151e:	8b a9       	ldd	r24, Y+51	; 0x33
    1520:	9c a9       	ldd	r25, Y+52	; 0x34
    1522:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1526:	dc 01       	movw	r26, r24
    1528:	cb 01       	movw	r24, r22
    152a:	98 ab       	std	Y+48, r25	; 0x30
    152c:	8f a7       	std	Y+47, r24	; 0x2f
    152e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1530:	98 a9       	ldd	r25, Y+48	; 0x30
    1532:	9c a7       	std	Y+44, r25	; 0x2c
    1534:	8b a7       	std	Y+43, r24	; 0x2b
    1536:	8b a5       	ldd	r24, Y+43	; 0x2b
    1538:	9c a5       	ldd	r25, Y+44	; 0x2c
    153a:	01 97       	sbiw	r24, 0x01	; 1
    153c:	f1 f7       	brne	.-4      	; 0x153a <LCD_vidInitialize+0x210>
    153e:	9c a7       	std	Y+44, r25	; 0x2c
    1540:	8b a7       	std	Y+43, r24	; 0x2b
	  _delay_ms (10);


	  // DISPLAY ON/OFF CONTROL
	  LCD_vidWriteCommand (0b00001111);
    1542:	8f e0       	ldi	r24, 0x0F	; 15
    1544:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <LCD_vidWriteCommand>
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	a0 e2       	ldi	r26, 0x20	; 32
    154e:	b1 e4       	ldi	r27, 0x41	; 65
    1550:	8f a3       	std	Y+39, r24	; 0x27
    1552:	98 a7       	std	Y+40, r25	; 0x28
    1554:	a9 a7       	std	Y+41, r26	; 0x29
    1556:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1558:	6f a1       	ldd	r22, Y+39	; 0x27
    155a:	78 a5       	ldd	r23, Y+40	; 0x28
    155c:	89 a5       	ldd	r24, Y+41	; 0x29
    155e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	4a ef       	ldi	r20, 0xFA	; 250
    1566:	54 e4       	ldi	r21, 0x44	; 68
    1568:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	8b a3       	std	Y+35, r24	; 0x23
    1572:	9c a3       	std	Y+36, r25	; 0x24
    1574:	ad a3       	std	Y+37, r26	; 0x25
    1576:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1578:	6b a1       	ldd	r22, Y+35	; 0x23
    157a:	7c a1       	ldd	r23, Y+36	; 0x24
    157c:	8d a1       	ldd	r24, Y+37	; 0x25
    157e:	9e a1       	ldd	r25, Y+38	; 0x26
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	40 e8       	ldi	r20, 0x80	; 128
    1586:	5f e3       	ldi	r21, 0x3F	; 63
    1588:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    158c:	88 23       	and	r24, r24
    158e:	2c f4       	brge	.+10     	; 0x159a <LCD_vidInitialize+0x270>
		__ticks = 1;
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	9a a3       	std	Y+34, r25	; 0x22
    1596:	89 a3       	std	Y+33, r24	; 0x21
    1598:	3f c0       	rjmp	.+126    	; 0x1618 <LCD_vidInitialize+0x2ee>
	else if (__tmp > 65535)
    159a:	6b a1       	ldd	r22, Y+35	; 0x23
    159c:	7c a1       	ldd	r23, Y+36	; 0x24
    159e:	8d a1       	ldd	r24, Y+37	; 0x25
    15a0:	9e a1       	ldd	r25, Y+38	; 0x26
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	3f ef       	ldi	r19, 0xFF	; 255
    15a6:	4f e7       	ldi	r20, 0x7F	; 127
    15a8:	57 e4       	ldi	r21, 0x47	; 71
    15aa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    15ae:	18 16       	cp	r1, r24
    15b0:	4c f5       	brge	.+82     	; 0x1604 <LCD_vidInitialize+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b2:	6f a1       	ldd	r22, Y+39	; 0x27
    15b4:	78 a5       	ldd	r23, Y+40	; 0x28
    15b6:	89 a5       	ldd	r24, Y+41	; 0x29
    15b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	40 e2       	ldi	r20, 0x20	; 32
    15c0:	51 e4       	ldi	r21, 0x41	; 65
    15c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15c6:	dc 01       	movw	r26, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	bc 01       	movw	r22, r24
    15cc:	cd 01       	movw	r24, r26
    15ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15d2:	dc 01       	movw	r26, r24
    15d4:	cb 01       	movw	r24, r22
    15d6:	9a a3       	std	Y+34, r25	; 0x22
    15d8:	89 a3       	std	Y+33, r24	; 0x21
    15da:	0f c0       	rjmp	.+30     	; 0x15fa <LCD_vidInitialize+0x2d0>
    15dc:	88 ec       	ldi	r24, 0xC8	; 200
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	98 a3       	std	Y+32, r25	; 0x20
    15e2:	8f 8f       	std	Y+31, r24	; 0x1f
    15e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15e6:	98 a1       	ldd	r25, Y+32	; 0x20
    15e8:	01 97       	sbiw	r24, 0x01	; 1
    15ea:	f1 f7       	brne	.-4      	; 0x15e8 <LCD_vidInitialize+0x2be>
    15ec:	98 a3       	std	Y+32, r25	; 0x20
    15ee:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f0:	89 a1       	ldd	r24, Y+33	; 0x21
    15f2:	9a a1       	ldd	r25, Y+34	; 0x22
    15f4:	01 97       	sbiw	r24, 0x01	; 1
    15f6:	9a a3       	std	Y+34, r25	; 0x22
    15f8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15fa:	89 a1       	ldd	r24, Y+33	; 0x21
    15fc:	9a a1       	ldd	r25, Y+34	; 0x22
    15fe:	00 97       	sbiw	r24, 0x00	; 0
    1600:	69 f7       	brne	.-38     	; 0x15dc <LCD_vidInitialize+0x2b2>
    1602:	14 c0       	rjmp	.+40     	; 0x162c <LCD_vidInitialize+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1604:	6b a1       	ldd	r22, Y+35	; 0x23
    1606:	7c a1       	ldd	r23, Y+36	; 0x24
    1608:	8d a1       	ldd	r24, Y+37	; 0x25
    160a:	9e a1       	ldd	r25, Y+38	; 0x26
    160c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1610:	dc 01       	movw	r26, r24
    1612:	cb 01       	movw	r24, r22
    1614:	9a a3       	std	Y+34, r25	; 0x22
    1616:	89 a3       	std	Y+33, r24	; 0x21
    1618:	89 a1       	ldd	r24, Y+33	; 0x21
    161a:	9a a1       	ldd	r25, Y+34	; 0x22
    161c:	9e 8f       	std	Y+30, r25	; 0x1e
    161e:	8d 8f       	std	Y+29, r24	; 0x1d
    1620:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1622:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1624:	01 97       	sbiw	r24, 0x01	; 1
    1626:	f1 f7       	brne	.-4      	; 0x1624 <LCD_vidInitialize+0x2fa>
    1628:	9e 8f       	std	Y+30, r25	; 0x1e
    162a:	8d 8f       	std	Y+29, r24	; 0x1d
	//  LCD_vidWriteCommand (0b00001100); //0X0C
	  _delay_ms (10);

	  // DISPLAY CLEAR
	 	  LCD_vidWriteCommand (0b00000001);
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <LCD_vidWriteCommand>
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	a0 e2       	ldi	r26, 0x20	; 32
    1638:	b1 e4       	ldi	r27, 0x41	; 65
    163a:	89 8f       	std	Y+25, r24	; 0x19
    163c:	9a 8f       	std	Y+26, r25	; 0x1a
    163e:	ab 8f       	std	Y+27, r26	; 0x1b
    1640:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1642:	69 8d       	ldd	r22, Y+25	; 0x19
    1644:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1646:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1648:	9c 8d       	ldd	r25, Y+28	; 0x1c
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	4a ef       	ldi	r20, 0xFA	; 250
    1650:	54 e4       	ldi	r21, 0x44	; 68
    1652:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	8d 8b       	std	Y+21, r24	; 0x15
    165c:	9e 8b       	std	Y+22, r25	; 0x16
    165e:	af 8b       	std	Y+23, r26	; 0x17
    1660:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1662:	6d 89       	ldd	r22, Y+21	; 0x15
    1664:	7e 89       	ldd	r23, Y+22	; 0x16
    1666:	8f 89       	ldd	r24, Y+23	; 0x17
    1668:	98 8d       	ldd	r25, Y+24	; 0x18
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	40 e8       	ldi	r20, 0x80	; 128
    1670:	5f e3       	ldi	r21, 0x3F	; 63
    1672:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1676:	88 23       	and	r24, r24
    1678:	2c f4       	brge	.+10     	; 0x1684 <LCD_vidInitialize+0x35a>
		__ticks = 1;
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	9c 8b       	std	Y+20, r25	; 0x14
    1680:	8b 8b       	std	Y+19, r24	; 0x13
    1682:	3f c0       	rjmp	.+126    	; 0x1702 <LCD_vidInitialize+0x3d8>
	else if (__tmp > 65535)
    1684:	6d 89       	ldd	r22, Y+21	; 0x15
    1686:	7e 89       	ldd	r23, Y+22	; 0x16
    1688:	8f 89       	ldd	r24, Y+23	; 0x17
    168a:	98 8d       	ldd	r25, Y+24	; 0x18
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	3f ef       	ldi	r19, 0xFF	; 255
    1690:	4f e7       	ldi	r20, 0x7F	; 127
    1692:	57 e4       	ldi	r21, 0x47	; 71
    1694:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1698:	18 16       	cp	r1, r24
    169a:	4c f5       	brge	.+82     	; 0x16ee <LCD_vidInitialize+0x3c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    169c:	69 8d       	ldd	r22, Y+25	; 0x19
    169e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	40 e2       	ldi	r20, 0x20	; 32
    16aa:	51 e4       	ldi	r21, 0x41	; 65
    16ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	bc 01       	movw	r22, r24
    16b6:	cd 01       	movw	r24, r26
    16b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	9c 8b       	std	Y+20, r25	; 0x14
    16c2:	8b 8b       	std	Y+19, r24	; 0x13
    16c4:	0f c0       	rjmp	.+30     	; 0x16e4 <LCD_vidInitialize+0x3ba>
    16c6:	88 ec       	ldi	r24, 0xC8	; 200
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	9a 8b       	std	Y+18, r25	; 0x12
    16cc:	89 8b       	std	Y+17, r24	; 0x11
    16ce:	89 89       	ldd	r24, Y+17	; 0x11
    16d0:	9a 89       	ldd	r25, Y+18	; 0x12
    16d2:	01 97       	sbiw	r24, 0x01	; 1
    16d4:	f1 f7       	brne	.-4      	; 0x16d2 <LCD_vidInitialize+0x3a8>
    16d6:	9a 8b       	std	Y+18, r25	; 0x12
    16d8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16da:	8b 89       	ldd	r24, Y+19	; 0x13
    16dc:	9c 89       	ldd	r25, Y+20	; 0x14
    16de:	01 97       	sbiw	r24, 0x01	; 1
    16e0:	9c 8b       	std	Y+20, r25	; 0x14
    16e2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e4:	8b 89       	ldd	r24, Y+19	; 0x13
    16e6:	9c 89       	ldd	r25, Y+20	; 0x14
    16e8:	00 97       	sbiw	r24, 0x00	; 0
    16ea:	69 f7       	brne	.-38     	; 0x16c6 <LCD_vidInitialize+0x39c>
    16ec:	14 c0       	rjmp	.+40     	; 0x1716 <LCD_vidInitialize+0x3ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ee:	6d 89       	ldd	r22, Y+21	; 0x15
    16f0:	7e 89       	ldd	r23, Y+22	; 0x16
    16f2:	8f 89       	ldd	r24, Y+23	; 0x17
    16f4:	98 8d       	ldd	r25, Y+24	; 0x18
    16f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	9c 8b       	std	Y+20, r25	; 0x14
    1700:	8b 8b       	std	Y+19, r24	; 0x13
    1702:	8b 89       	ldd	r24, Y+19	; 0x13
    1704:	9c 89       	ldd	r25, Y+20	; 0x14
    1706:	98 8b       	std	Y+16, r25	; 0x10
    1708:	8f 87       	std	Y+15, r24	; 0x0f
    170a:	8f 85       	ldd	r24, Y+15	; 0x0f
    170c:	98 89       	ldd	r25, Y+16	; 0x10
    170e:	01 97       	sbiw	r24, 0x01	; 1
    1710:	f1 f7       	brne	.-4      	; 0x170e <LCD_vidInitialize+0x3e4>
    1712:	98 8b       	std	Y+16, r25	; 0x10
    1714:	8f 87       	std	Y+15, r24	; 0x0f
	 	  _delay_ms (10);


	  // Entry mode set
	  LCD_vidWriteCommand (0b00000110);//0X06
    1716:	86 e0       	ldi	r24, 0x06	; 6
    1718:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <LCD_vidWriteCommand>
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	a0 ea       	ldi	r26, 0xA0	; 160
    1722:	b1 e4       	ldi	r27, 0x41	; 65
    1724:	8b 87       	std	Y+11, r24	; 0x0b
    1726:	9c 87       	std	Y+12, r25	; 0x0c
    1728:	ad 87       	std	Y+13, r26	; 0x0d
    172a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    172c:	6b 85       	ldd	r22, Y+11	; 0x0b
    172e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1730:	8d 85       	ldd	r24, Y+13	; 0x0d
    1732:	9e 85       	ldd	r25, Y+14	; 0x0e
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	4a ef       	ldi	r20, 0xFA	; 250
    173a:	54 e4       	ldi	r21, 0x44	; 68
    173c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	8f 83       	std	Y+7, r24	; 0x07
    1746:	98 87       	std	Y+8, r25	; 0x08
    1748:	a9 87       	std	Y+9, r26	; 0x09
    174a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    174c:	6f 81       	ldd	r22, Y+7	; 0x07
    174e:	78 85       	ldd	r23, Y+8	; 0x08
    1750:	89 85       	ldd	r24, Y+9	; 0x09
    1752:	9a 85       	ldd	r25, Y+10	; 0x0a
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	40 e8       	ldi	r20, 0x80	; 128
    175a:	5f e3       	ldi	r21, 0x3F	; 63
    175c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1760:	88 23       	and	r24, r24
    1762:	2c f4       	brge	.+10     	; 0x176e <LCD_vidInitialize+0x444>
		__ticks = 1;
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	9e 83       	std	Y+6, r25	; 0x06
    176a:	8d 83       	std	Y+5, r24	; 0x05
    176c:	3f c0       	rjmp	.+126    	; 0x17ec <LCD_vidInitialize+0x4c2>
	else if (__tmp > 65535)
    176e:	6f 81       	ldd	r22, Y+7	; 0x07
    1770:	78 85       	ldd	r23, Y+8	; 0x08
    1772:	89 85       	ldd	r24, Y+9	; 0x09
    1774:	9a 85       	ldd	r25, Y+10	; 0x0a
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	3f ef       	ldi	r19, 0xFF	; 255
    177a:	4f e7       	ldi	r20, 0x7F	; 127
    177c:	57 e4       	ldi	r21, 0x47	; 71
    177e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1782:	18 16       	cp	r1, r24
    1784:	4c f5       	brge	.+82     	; 0x17d8 <LCD_vidInitialize+0x4ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1786:	6b 85       	ldd	r22, Y+11	; 0x0b
    1788:	7c 85       	ldd	r23, Y+12	; 0x0c
    178a:	8d 85       	ldd	r24, Y+13	; 0x0d
    178c:	9e 85       	ldd	r25, Y+14	; 0x0e
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	40 e2       	ldi	r20, 0x20	; 32
    1794:	51 e4       	ldi	r21, 0x41	; 65
    1796:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	bc 01       	movw	r22, r24
    17a0:	cd 01       	movw	r24, r26
    17a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17a6:	dc 01       	movw	r26, r24
    17a8:	cb 01       	movw	r24, r22
    17aa:	9e 83       	std	Y+6, r25	; 0x06
    17ac:	8d 83       	std	Y+5, r24	; 0x05
    17ae:	0f c0       	rjmp	.+30     	; 0x17ce <LCD_vidInitialize+0x4a4>
    17b0:	88 ec       	ldi	r24, 0xC8	; 200
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	9c 83       	std	Y+4, r25	; 0x04
    17b6:	8b 83       	std	Y+3, r24	; 0x03
    17b8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ba:	9c 81       	ldd	r25, Y+4	; 0x04
    17bc:	01 97       	sbiw	r24, 0x01	; 1
    17be:	f1 f7       	brne	.-4      	; 0x17bc <LCD_vidInitialize+0x492>
    17c0:	9c 83       	std	Y+4, r25	; 0x04
    17c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17c4:	8d 81       	ldd	r24, Y+5	; 0x05
    17c6:	9e 81       	ldd	r25, Y+6	; 0x06
    17c8:	01 97       	sbiw	r24, 0x01	; 1
    17ca:	9e 83       	std	Y+6, r25	; 0x06
    17cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ce:	8d 81       	ldd	r24, Y+5	; 0x05
    17d0:	9e 81       	ldd	r25, Y+6	; 0x06
    17d2:	00 97       	sbiw	r24, 0x00	; 0
    17d4:	69 f7       	brne	.-38     	; 0x17b0 <LCD_vidInitialize+0x486>
    17d6:	14 c0       	rjmp	.+40     	; 0x1800 <LCD_vidInitialize+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d8:	6f 81       	ldd	r22, Y+7	; 0x07
    17da:	78 85       	ldd	r23, Y+8	; 0x08
    17dc:	89 85       	ldd	r24, Y+9	; 0x09
    17de:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	9e 83       	std	Y+6, r25	; 0x06
    17ea:	8d 83       	std	Y+5, r24	; 0x05
    17ec:	8d 81       	ldd	r24, Y+5	; 0x05
    17ee:	9e 81       	ldd	r25, Y+6	; 0x06
    17f0:	9a 83       	std	Y+2, r25	; 0x02
    17f2:	89 83       	std	Y+1, r24	; 0x01
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	9a 81       	ldd	r25, Y+2	; 0x02
    17f8:	01 97       	sbiw	r24, 0x01	; 1
    17fa:	f1 f7       	brne	.-4      	; 0x17f8 <LCD_vidInitialize+0x4ce>
    17fc:	9a 83       	std	Y+2, r25	; 0x02
    17fe:	89 83       	std	Y+1, r24	; 0x01
	  _delay_ms (20);

}
    1800:	ca 5b       	subi	r28, 0xBA	; 186
    1802:	df 4f       	sbci	r29, 0xFF	; 255
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	f8 94       	cli
    1808:	de bf       	out	0x3e, r29	; 62
    180a:	0f be       	out	0x3f, r0	; 63
    180c:	cd bf       	out	0x3d, r28	; 61
    180e:	cf 91       	pop	r28
    1810:	df 91       	pop	r29
    1812:	1f 91       	pop	r17
    1814:	0f 91       	pop	r16
    1816:	08 95       	ret

00001818 <LCD_vidWriteCharacter>:



/****************************************************************/

void LCD_vidWriteCharacter(u8 u8DataCpy){
    1818:	df 93       	push	r29
    181a:	cf 93       	push	r28
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
    1820:	6d 97       	sbiw	r28, 0x1d	; 29
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	f8 94       	cli
    1826:	de bf       	out	0x3e, r29	; 62
    1828:	0f be       	out	0x3f, r0	; 63
    182a:	cd bf       	out	0x3d, r28	; 61
    182c:	8d 8f       	std	Y+29, r24	; 0x1d
	 // Set RS to HIGH
		DIO_SetPinValue(PORTD, 1 , HIGH);
    182e:	83 e0       	ldi	r24, 0x03	; 3
    1830:	61 e0       	ldi	r22, 0x01	; 1
    1832:	41 e0       	ldi	r20, 0x01	; 1
    1834:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <DIO_SetPinValue>

		// Set R/W to LOW
		DIO_SetPinValue(PORTD, 2 , LOW);
    1838:	83 e0       	ldi	r24, 0x03	; 3
    183a:	62 e0       	ldi	r22, 0x02	; 2
    183c:	40 e0       	ldi	r20, 0x00	; 0
    183e:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <DIO_SetPinValue>

		// Set E to HIGH
		DIO_SetPinValue(PORTD, 3 , HIGH);
    1842:	83 e0       	ldi	r24, 0x03	; 3
    1844:	63 e0       	ldi	r22, 0x03	; 3
    1846:	41 e0       	ldi	r20, 0x01	; 1
    1848:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <DIO_SetPinValue>

		// Load Command on Data bus
		DIO_SetPortValue(PORTC, u8DataCpy);
    184c:	82 e0       	ldi	r24, 0x02	; 2
    184e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1850:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_SetPortValue>

		// Set E to LOW
		DIO_SetPinValue(PORTD, 3, LOW);
    1854:	83 e0       	ldi	r24, 0x03	; 3
    1856:	63 e0       	ldi	r22, 0x03	; 3
    1858:	40 e0       	ldi	r20, 0x00	; 0
    185a:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <DIO_SetPinValue>
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	a0 e2       	ldi	r26, 0x20	; 32
    1864:	b1 e4       	ldi	r27, 0x41	; 65
    1866:	89 8f       	std	Y+25, r24	; 0x19
    1868:	9a 8f       	std	Y+26, r25	; 0x1a
    186a:	ab 8f       	std	Y+27, r26	; 0x1b
    186c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    186e:	69 8d       	ldd	r22, Y+25	; 0x19
    1870:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1872:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1874:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	4a ef       	ldi	r20, 0xFA	; 250
    187c:	54 e4       	ldi	r21, 0x44	; 68
    187e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	8d 8b       	std	Y+21, r24	; 0x15
    1888:	9e 8b       	std	Y+22, r25	; 0x16
    188a:	af 8b       	std	Y+23, r26	; 0x17
    188c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    188e:	6d 89       	ldd	r22, Y+21	; 0x15
    1890:	7e 89       	ldd	r23, Y+22	; 0x16
    1892:	8f 89       	ldd	r24, Y+23	; 0x17
    1894:	98 8d       	ldd	r25, Y+24	; 0x18
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	40 e8       	ldi	r20, 0x80	; 128
    189c:	5f e3       	ldi	r21, 0x3F	; 63
    189e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18a2:	88 23       	and	r24, r24
    18a4:	2c f4       	brge	.+10     	; 0x18b0 <LCD_vidWriteCharacter+0x98>
		__ticks = 1;
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	9c 8b       	std	Y+20, r25	; 0x14
    18ac:	8b 8b       	std	Y+19, r24	; 0x13
    18ae:	3f c0       	rjmp	.+126    	; 0x192e <LCD_vidWriteCharacter+0x116>
	else if (__tmp > 65535)
    18b0:	6d 89       	ldd	r22, Y+21	; 0x15
    18b2:	7e 89       	ldd	r23, Y+22	; 0x16
    18b4:	8f 89       	ldd	r24, Y+23	; 0x17
    18b6:	98 8d       	ldd	r25, Y+24	; 0x18
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	3f ef       	ldi	r19, 0xFF	; 255
    18bc:	4f e7       	ldi	r20, 0x7F	; 127
    18be:	57 e4       	ldi	r21, 0x47	; 71
    18c0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18c4:	18 16       	cp	r1, r24
    18c6:	4c f5       	brge	.+82     	; 0x191a <LCD_vidWriteCharacter+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18c8:	69 8d       	ldd	r22, Y+25	; 0x19
    18ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	40 e2       	ldi	r20, 0x20	; 32
    18d6:	51 e4       	ldi	r21, 0x41	; 65
    18d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	bc 01       	movw	r22, r24
    18e2:	cd 01       	movw	r24, r26
    18e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	9c 8b       	std	Y+20, r25	; 0x14
    18ee:	8b 8b       	std	Y+19, r24	; 0x13
    18f0:	0f c0       	rjmp	.+30     	; 0x1910 <LCD_vidWriteCharacter+0xf8>
    18f2:	88 ec       	ldi	r24, 0xC8	; 200
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	9a 8b       	std	Y+18, r25	; 0x12
    18f8:	89 8b       	std	Y+17, r24	; 0x11
    18fa:	89 89       	ldd	r24, Y+17	; 0x11
    18fc:	9a 89       	ldd	r25, Y+18	; 0x12
    18fe:	01 97       	sbiw	r24, 0x01	; 1
    1900:	f1 f7       	brne	.-4      	; 0x18fe <LCD_vidWriteCharacter+0xe6>
    1902:	9a 8b       	std	Y+18, r25	; 0x12
    1904:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1906:	8b 89       	ldd	r24, Y+19	; 0x13
    1908:	9c 89       	ldd	r25, Y+20	; 0x14
    190a:	01 97       	sbiw	r24, 0x01	; 1
    190c:	9c 8b       	std	Y+20, r25	; 0x14
    190e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1910:	8b 89       	ldd	r24, Y+19	; 0x13
    1912:	9c 89       	ldd	r25, Y+20	; 0x14
    1914:	00 97       	sbiw	r24, 0x00	; 0
    1916:	69 f7       	brne	.-38     	; 0x18f2 <LCD_vidWriteCharacter+0xda>
    1918:	14 c0       	rjmp	.+40     	; 0x1942 <LCD_vidWriteCharacter+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    191a:	6d 89       	ldd	r22, Y+21	; 0x15
    191c:	7e 89       	ldd	r23, Y+22	; 0x16
    191e:	8f 89       	ldd	r24, Y+23	; 0x17
    1920:	98 8d       	ldd	r25, Y+24	; 0x18
    1922:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	9c 8b       	std	Y+20, r25	; 0x14
    192c:	8b 8b       	std	Y+19, r24	; 0x13
    192e:	8b 89       	ldd	r24, Y+19	; 0x13
    1930:	9c 89       	ldd	r25, Y+20	; 0x14
    1932:	98 8b       	std	Y+16, r25	; 0x10
    1934:	8f 87       	std	Y+15, r24	; 0x0f
    1936:	8f 85       	ldd	r24, Y+15	; 0x0f
    1938:	98 89       	ldd	r25, Y+16	; 0x10
    193a:	01 97       	sbiw	r24, 0x01	; 1
    193c:	f1 f7       	brne	.-4      	; 0x193a <LCD_vidWriteCharacter+0x122>
    193e:	98 8b       	std	Y+16, r25	; 0x10
    1940:	8f 87       	std	Y+15, r24	; 0x0f

		// Wait for E to settle
		_delay_ms(10);

		// Set E to HIGH
		DIO_SetPinValue(PORTD, 2, HIGH);
    1942:	83 e0       	ldi	r24, 0x03	; 3
    1944:	62 e0       	ldi	r22, 0x02	; 2
    1946:	41 e0       	ldi	r20, 0x01	; 1
    1948:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <DIO_SetPinValue>
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	a0 e2       	ldi	r26, 0x20	; 32
    1952:	b1 e4       	ldi	r27, 0x41	; 65
    1954:	8b 87       	std	Y+11, r24	; 0x0b
    1956:	9c 87       	std	Y+12, r25	; 0x0c
    1958:	ad 87       	std	Y+13, r26	; 0x0d
    195a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    195c:	6b 85       	ldd	r22, Y+11	; 0x0b
    195e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1960:	8d 85       	ldd	r24, Y+13	; 0x0d
    1962:	9e 85       	ldd	r25, Y+14	; 0x0e
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	4a ef       	ldi	r20, 0xFA	; 250
    196a:	54 e4       	ldi	r21, 0x44	; 68
    196c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	8f 83       	std	Y+7, r24	; 0x07
    1976:	98 87       	std	Y+8, r25	; 0x08
    1978:	a9 87       	std	Y+9, r26	; 0x09
    197a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    197c:	6f 81       	ldd	r22, Y+7	; 0x07
    197e:	78 85       	ldd	r23, Y+8	; 0x08
    1980:	89 85       	ldd	r24, Y+9	; 0x09
    1982:	9a 85       	ldd	r25, Y+10	; 0x0a
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	40 e8       	ldi	r20, 0x80	; 128
    198a:	5f e3       	ldi	r21, 0x3F	; 63
    198c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1990:	88 23       	and	r24, r24
    1992:	2c f4       	brge	.+10     	; 0x199e <LCD_vidWriteCharacter+0x186>
		__ticks = 1;
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	9e 83       	std	Y+6, r25	; 0x06
    199a:	8d 83       	std	Y+5, r24	; 0x05
    199c:	3f c0       	rjmp	.+126    	; 0x1a1c <LCD_vidWriteCharacter+0x204>
	else if (__tmp > 65535)
    199e:	6f 81       	ldd	r22, Y+7	; 0x07
    19a0:	78 85       	ldd	r23, Y+8	; 0x08
    19a2:	89 85       	ldd	r24, Y+9	; 0x09
    19a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	3f ef       	ldi	r19, 0xFF	; 255
    19aa:	4f e7       	ldi	r20, 0x7F	; 127
    19ac:	57 e4       	ldi	r21, 0x47	; 71
    19ae:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19b2:	18 16       	cp	r1, r24
    19b4:	4c f5       	brge	.+82     	; 0x1a08 <LCD_vidWriteCharacter+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    19b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    19bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	40 e2       	ldi	r20, 0x20	; 32
    19c4:	51 e4       	ldi	r21, 0x41	; 65
    19c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	bc 01       	movw	r22, r24
    19d0:	cd 01       	movw	r24, r26
    19d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	9e 83       	std	Y+6, r25	; 0x06
    19dc:	8d 83       	std	Y+5, r24	; 0x05
    19de:	0f c0       	rjmp	.+30     	; 0x19fe <LCD_vidWriteCharacter+0x1e6>
    19e0:	88 ec       	ldi	r24, 0xC8	; 200
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	9c 83       	std	Y+4, r25	; 0x04
    19e6:	8b 83       	std	Y+3, r24	; 0x03
    19e8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ea:	9c 81       	ldd	r25, Y+4	; 0x04
    19ec:	01 97       	sbiw	r24, 0x01	; 1
    19ee:	f1 f7       	brne	.-4      	; 0x19ec <LCD_vidWriteCharacter+0x1d4>
    19f0:	9c 83       	std	Y+4, r25	; 0x04
    19f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f4:	8d 81       	ldd	r24, Y+5	; 0x05
    19f6:	9e 81       	ldd	r25, Y+6	; 0x06
    19f8:	01 97       	sbiw	r24, 0x01	; 1
    19fa:	9e 83       	std	Y+6, r25	; 0x06
    19fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1a00:	9e 81       	ldd	r25, Y+6	; 0x06
    1a02:	00 97       	sbiw	r24, 0x00	; 0
    1a04:	69 f7       	brne	.-38     	; 0x19e0 <LCD_vidWriteCharacter+0x1c8>
    1a06:	14 c0       	rjmp	.+40     	; 0x1a30 <LCD_vidWriteCharacter+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a08:	6f 81       	ldd	r22, Y+7	; 0x07
    1a0a:	78 85       	ldd	r23, Y+8	; 0x08
    1a0c:	89 85       	ldd	r24, Y+9	; 0x09
    1a0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	9e 83       	std	Y+6, r25	; 0x06
    1a1a:	8d 83       	std	Y+5, r24	; 0x05
    1a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a20:	9a 83       	std	Y+2, r25	; 0x02
    1a22:	89 83       	std	Y+1, r24	; 0x01
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	9a 81       	ldd	r25, Y+2	; 0x02
    1a28:	01 97       	sbiw	r24, 0x01	; 1
    1a2a:	f1 f7       	brne	.-4      	; 0x1a28 <LCD_vidWriteCharacter+0x210>
    1a2c:	9a 83       	std	Y+2, r25	; 0x02
    1a2e:	89 83       	std	Y+1, r24	; 0x01

		// Delay to let the LCD Display the character
		_delay_ms(10);

}
    1a30:	6d 96       	adiw	r28, 0x1d	; 29
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	f8 94       	cli
    1a36:	de bf       	out	0x3e, r29	; 62
    1a38:	0f be       	out	0x3f, r0	; 63
    1a3a:	cd bf       	out	0x3d, r28	; 61
    1a3c:	cf 91       	pop	r28
    1a3e:	df 91       	pop	r29
    1a40:	08 95       	ret

00001a42 <LCD_vidWriteString>:


/****************************************************************/

void LCD_vidWriteString (u8* pu8StringCpy, u8 u8Index){
    1a42:	df 93       	push	r29
    1a44:	cf 93       	push	r28
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
    1a4a:	62 97       	sbiw	r28, 0x12	; 18
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	f8 94       	cli
    1a50:	de bf       	out	0x3e, r29	; 62
    1a52:	0f be       	out	0x3f, r0	; 63
    1a54:	cd bf       	out	0x3d, r28	; 61
    1a56:	99 8b       	std	Y+17, r25	; 0x11
    1a58:	88 8b       	std	Y+16, r24	; 0x10
    1a5a:	6a 8b       	std	Y+18, r22	; 0x12


	//	/* Local loop index */
	//	u8 u8Index = 0;
		u8 iteration=0;
    1a5c:	1f 86       	std	Y+15, r1	; 0x0f
	//	while (pu8StringCpy[u8Index] != '\0')
		for (iteration=0; ((iteration<u8Index)&&(pu8StringCpy[iteration] != '\0')) ; iteration++)
    1a5e:	1f 86       	std	Y+15, r1	; 0x0f
    1a60:	80 c0       	rjmp	.+256    	; 0x1b62 <LCD_vidWriteString+0x120>
		{

			/* Write Character on LCD */
			LCD_vidWriteCharacter(pu8StringCpy[iteration]);
    1a62:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a64:	28 2f       	mov	r18, r24
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	88 89       	ldd	r24, Y+16	; 0x10
    1a6a:	99 89       	ldd	r25, Y+17	; 0x11
    1a6c:	fc 01       	movw	r30, r24
    1a6e:	e2 0f       	add	r30, r18
    1a70:	f3 1f       	adc	r31, r19
    1a72:	80 81       	ld	r24, Z
    1a74:	0e 94 0c 0c 	call	0x1818	; 0x1818 <LCD_vidWriteCharacter>
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	a0 e2       	ldi	r26, 0x20	; 32
    1a7e:	b1 e4       	ldi	r27, 0x41	; 65
    1a80:	8b 87       	std	Y+11, r24	; 0x0b
    1a82:	9c 87       	std	Y+12, r25	; 0x0c
    1a84:	ad 87       	std	Y+13, r26	; 0x0d
    1a86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a88:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	4a ef       	ldi	r20, 0xFA	; 250
    1a96:	54 e4       	ldi	r21, 0x44	; 68
    1a98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	8f 83       	std	Y+7, r24	; 0x07
    1aa2:	98 87       	std	Y+8, r25	; 0x08
    1aa4:	a9 87       	std	Y+9, r26	; 0x09
    1aa6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aa8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aaa:	78 85       	ldd	r23, Y+8	; 0x08
    1aac:	89 85       	ldd	r24, Y+9	; 0x09
    1aae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	40 e8       	ldi	r20, 0x80	; 128
    1ab6:	5f e3       	ldi	r21, 0x3F	; 63
    1ab8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1abc:	88 23       	and	r24, r24
    1abe:	2c f4       	brge	.+10     	; 0x1aca <LCD_vidWriteString+0x88>
		__ticks = 1;
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	9e 83       	std	Y+6, r25	; 0x06
    1ac6:	8d 83       	std	Y+5, r24	; 0x05
    1ac8:	3f c0       	rjmp	.+126    	; 0x1b48 <LCD_vidWriteString+0x106>
	else if (__tmp > 65535)
    1aca:	6f 81       	ldd	r22, Y+7	; 0x07
    1acc:	78 85       	ldd	r23, Y+8	; 0x08
    1ace:	89 85       	ldd	r24, Y+9	; 0x09
    1ad0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	3f ef       	ldi	r19, 0xFF	; 255
    1ad6:	4f e7       	ldi	r20, 0x7F	; 127
    1ad8:	57 e4       	ldi	r21, 0x47	; 71
    1ada:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ade:	18 16       	cp	r1, r24
    1ae0:	4c f5       	brge	.+82     	; 0x1b34 <LCD_vidWriteString+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ae4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ae6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ae8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	40 e2       	ldi	r20, 0x20	; 32
    1af0:	51 e4       	ldi	r21, 0x41	; 65
    1af2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	bc 01       	movw	r22, r24
    1afc:	cd 01       	movw	r24, r26
    1afe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	9e 83       	std	Y+6, r25	; 0x06
    1b08:	8d 83       	std	Y+5, r24	; 0x05
    1b0a:	0f c0       	rjmp	.+30     	; 0x1b2a <LCD_vidWriteString+0xe8>
    1b0c:	88 ec       	ldi	r24, 0xC8	; 200
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	9c 83       	std	Y+4, r25	; 0x04
    1b12:	8b 83       	std	Y+3, r24	; 0x03
    1b14:	8b 81       	ldd	r24, Y+3	; 0x03
    1b16:	9c 81       	ldd	r25, Y+4	; 0x04
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	f1 f7       	brne	.-4      	; 0x1b18 <LCD_vidWriteString+0xd6>
    1b1c:	9c 83       	std	Y+4, r25	; 0x04
    1b1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b20:	8d 81       	ldd	r24, Y+5	; 0x05
    1b22:	9e 81       	ldd	r25, Y+6	; 0x06
    1b24:	01 97       	sbiw	r24, 0x01	; 1
    1b26:	9e 83       	std	Y+6, r25	; 0x06
    1b28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b2e:	00 97       	sbiw	r24, 0x00	; 0
    1b30:	69 f7       	brne	.-38     	; 0x1b0c <LCD_vidWriteString+0xca>
    1b32:	14 c0       	rjmp	.+40     	; 0x1b5c <LCD_vidWriteString+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b34:	6f 81       	ldd	r22, Y+7	; 0x07
    1b36:	78 85       	ldd	r23, Y+8	; 0x08
    1b38:	89 85       	ldd	r24, Y+9	; 0x09
    1b3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	9e 83       	std	Y+6, r25	; 0x06
    1b46:	8d 83       	std	Y+5, r24	; 0x05
    1b48:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4c:	9a 83       	std	Y+2, r25	; 0x02
    1b4e:	89 83       	std	Y+1, r24	; 0x01
    1b50:	89 81       	ldd	r24, Y+1	; 0x01
    1b52:	9a 81       	ldd	r25, Y+2	; 0x02
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	f1 f7       	brne	.-4      	; 0x1b54 <LCD_vidWriteString+0x112>
    1b58:	9a 83       	std	Y+2, r25	; 0x02
    1b5a:	89 83       	std	Y+1, r24	; 0x01

	//	/* Local loop index */
	//	u8 u8Index = 0;
		u8 iteration=0;
	//	while (pu8StringCpy[u8Index] != '\0')
		for (iteration=0; ((iteration<u8Index)&&(pu8StringCpy[iteration] != '\0')) ; iteration++)
    1b5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b5e:	8f 5f       	subi	r24, 0xFF	; 255
    1b60:	8f 87       	std	Y+15, r24	; 0x0f
    1b62:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b64:	8a 89       	ldd	r24, Y+18	; 0x12
    1b66:	98 17       	cp	r25, r24
    1b68:	60 f4       	brcc	.+24     	; 0x1b82 <LCD_vidWriteString+0x140>
    1b6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b6c:	28 2f       	mov	r18, r24
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	88 89       	ldd	r24, Y+16	; 0x10
    1b72:	99 89       	ldd	r25, Y+17	; 0x11
    1b74:	fc 01       	movw	r30, r24
    1b76:	e2 0f       	add	r30, r18
    1b78:	f3 1f       	adc	r31, r19
    1b7a:	80 81       	ld	r24, Z
    1b7c:	88 23       	and	r24, r24
    1b7e:	09 f0       	breq	.+2      	; 0x1b82 <LCD_vidWriteString+0x140>
    1b80:	70 cf       	rjmp	.-288    	; 0x1a62 <LCD_vidWriteString+0x20>
			/* Delay to let the LCD show the character */
			_delay_ms(10);
		}


}
    1b82:	62 96       	adiw	r28, 0x12	; 18
    1b84:	0f b6       	in	r0, 0x3f	; 63
    1b86:	f8 94       	cli
    1b88:	de bf       	out	0x3e, r29	; 62
    1b8a:	0f be       	out	0x3f, r0	; 63
    1b8c:	cd bf       	out	0x3d, r28	; 61
    1b8e:	cf 91       	pop	r28
    1b90:	df 91       	pop	r29
    1b92:	08 95       	ret

00001b94 <Gotoxy>:

/****************************************************************/

void Gotoxy (u8 X,u8 Y){
    1b94:	df 93       	push	r29
    1b96:	cf 93       	push	r28
    1b98:	00 d0       	rcall	.+0      	; 0x1b9a <Gotoxy+0x6>
    1b9a:	00 d0       	rcall	.+0      	; 0x1b9c <Gotoxy+0x8>
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
    1ba0:	89 83       	std	Y+1, r24	; 0x01
    1ba2:	6a 83       	std	Y+2, r22	; 0x02
	if (X>0 && X<=16)
    1ba4:	89 81       	ldd	r24, Y+1	; 0x01
    1ba6:	88 23       	and	r24, r24
    1ba8:	e1 f0       	breq	.+56     	; 0x1be2 <Gotoxy+0x4e>
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
    1bac:	81 31       	cpi	r24, 0x11	; 17
    1bae:	c8 f4       	brcc	.+50     	; 0x1be2 <Gotoxy+0x4e>
		{
		    switch(Y)
    1bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb2:	28 2f       	mov	r18, r24
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	3c 83       	std	Y+4, r19	; 0x04
    1bb8:	2b 83       	std	Y+3, r18	; 0x03
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbe:	81 30       	cpi	r24, 0x01	; 1
    1bc0:	91 05       	cpc	r25, r1
    1bc2:	31 f0       	breq	.+12     	; 0x1bd0 <Gotoxy+0x3c>
    1bc4:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc6:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc8:	22 30       	cpi	r18, 0x02	; 2
    1bca:	31 05       	cpc	r19, r1
    1bcc:	31 f0       	breq	.+12     	; 0x1bda <Gotoxy+0x46>
    1bce:	09 c0       	rjmp	.+18     	; 0x1be2 <Gotoxy+0x4e>
		    {
			    case 1:
			    	LCD_vidWriteCommand(X+127);
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
    1bd2:	81 58       	subi	r24, 0x81	; 129
    1bd4:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <LCD_vidWriteCommand>
    1bd8:	04 c0       	rjmp	.+8      	; 0x1be2 <Gotoxy+0x4e>
			    break;
			    case 2:
			    	LCD_vidWriteCommand(X+191);
    1bda:	89 81       	ldd	r24, Y+1	; 0x01
    1bdc:	81 54       	subi	r24, 0x41	; 65
    1bde:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <LCD_vidWriteCommand>
			    default:
			    break;
		    }
		}

}
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	0f 90       	pop	r0
    1bea:	cf 91       	pop	r28
    1bec:	df 91       	pop	r29
    1bee:	08 95       	ret

00001bf0 <LCDWriteInteger>:

/****************************************************************/

void LCDWriteInteger(u16 val , u16 field_length)
{
    1bf0:	df 93       	push	r29
    1bf2:	cf 93       	push	r28
    1bf4:	cd b7       	in	r28, 0x3d	; 61
    1bf6:	de b7       	in	r29, 0x3e	; 62
    1bf8:	62 97       	sbiw	r28, 0x12	; 18
    1bfa:	0f b6       	in	r0, 0x3f	; 63
    1bfc:	f8 94       	cli
    1bfe:	de bf       	out	0x3e, r29	; 62
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	cd bf       	out	0x3d, r28	; 61
    1c04:	98 8b       	std	Y+16, r25	; 0x10
    1c06:	8f 87       	std	Y+15, r24	; 0x0f
    1c08:	7a 8b       	std	Y+18, r23	; 0x12
    1c0a:	69 8b       	std	Y+17, r22	; 0x11
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	u16 str[5]={0,0,0,0,0};
    1c0c:	8a e0       	ldi	r24, 0x0A	; 10
    1c0e:	fe 01       	movw	r30, r28
    1c10:	35 96       	adiw	r30, 0x05	; 5
    1c12:	df 01       	movw	r26, r30
    1c14:	28 2f       	mov	r18, r24
    1c16:	1d 92       	st	X+, r1
    1c18:	2a 95       	dec	r18
    1c1a:	e9 f7       	brne	.-6      	; 0x1c16 <LCDWriteInteger+0x26>
	u16 i=4,j=0;
    1c1c:	84 e0       	ldi	r24, 0x04	; 4
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	9c 83       	std	Y+4, r25	; 0x04
    1c22:	8b 83       	std	Y+3, r24	; 0x03
    1c24:	1a 82       	std	Y+2, r1	; 0x02
    1c26:	19 82       	std	Y+1, r1	; 0x01
		LCD_vidWriteCharacter('-');   //Write Negative sign
		val=val*(-1);     //convert to positive
	}
	else
	{
		LCD_vidWriteCharacter(' ');
    1c28:	80 e2       	ldi	r24, 0x20	; 32
    1c2a:	0e 94 0c 0c 	call	0x1818	; 0x1818 <LCD_vidWriteCharacter>
    1c2e:	24 c0       	rjmp	.+72     	; 0x1c78 <LCDWriteInteger+0x88>
	}

	while(val)
	{
		str[i]=val%10;
    1c30:	eb 81       	ldd	r30, Y+3	; 0x03
    1c32:	fc 81       	ldd	r31, Y+4	; 0x04
    1c34:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c36:	98 89       	ldd	r25, Y+16	; 0x10
    1c38:	2a e0       	ldi	r18, 0x0A	; 10
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	b9 01       	movw	r22, r18
    1c3e:	0e 94 92 10 	call	0x2124	; 0x2124 <__udivmodhi4>
    1c42:	ac 01       	movw	r20, r24
    1c44:	9f 01       	movw	r18, r30
    1c46:	22 0f       	add	r18, r18
    1c48:	33 1f       	adc	r19, r19
    1c4a:	ce 01       	movw	r24, r28
    1c4c:	01 96       	adiw	r24, 0x01	; 1
    1c4e:	82 0f       	add	r24, r18
    1c50:	93 1f       	adc	r25, r19
    1c52:	fc 01       	movw	r30, r24
    1c54:	34 96       	adiw	r30, 0x04	; 4
    1c56:	51 83       	std	Z+1, r21	; 0x01
    1c58:	40 83       	st	Z, r20
		val=val/10;
    1c5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c5c:	98 89       	ldd	r25, Y+16	; 0x10
    1c5e:	2a e0       	ldi	r18, 0x0A	; 10
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	b9 01       	movw	r22, r18
    1c64:	0e 94 92 10 	call	0x2124	; 0x2124 <__udivmodhi4>
    1c68:	cb 01       	movw	r24, r22
    1c6a:	98 8b       	std	Y+16, r25	; 0x10
    1c6c:	8f 87       	std	Y+15, r24	; 0x0f
		i--;
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	9c 81       	ldd	r25, Y+4	; 0x04
    1c72:	01 97       	sbiw	r24, 0x01	; 1
    1c74:	9c 83       	std	Y+4, r25	; 0x04
    1c76:	8b 83       	std	Y+3, r24	; 0x03
	else
	{
		LCD_vidWriteCharacter(' ');
	}

	while(val)
    1c78:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c7a:	98 89       	ldd	r25, Y+16	; 0x10
    1c7c:	00 97       	sbiw	r24, 0x00	; 0
    1c7e:	c1 f6       	brne	.-80     	; 0x1c30 <LCDWriteInteger+0x40>
		str[i]=val%10;
		val=val/10;
		i--;
	}

	if(field_length==-1)
    1c80:	89 89       	ldd	r24, Y+17	; 0x11
    1c82:	9a 89       	ldd	r25, Y+18	; 0x12
    1c84:	af ef       	ldi	r26, 0xFF	; 255
    1c86:	8f 3f       	cpi	r24, 0xFF	; 255
    1c88:	9a 07       	cpc	r25, r26
    1c8a:	b1 f4       	brne	.+44     	; 0x1cb8 <LCDWriteInteger+0xc8>
    1c8c:	05 c0       	rjmp	.+10     	; 0x1c98 <LCDWriteInteger+0xa8>
		while(str[j]==0) j++;
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
    1c90:	9a 81       	ldd	r25, Y+2	; 0x02
    1c92:	01 96       	adiw	r24, 0x01	; 1
    1c94:	9a 83       	std	Y+2, r25	; 0x02
    1c96:	89 83       	std	Y+1, r24	; 0x01
    1c98:	89 81       	ldd	r24, Y+1	; 0x01
    1c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c9c:	9c 01       	movw	r18, r24
    1c9e:	22 0f       	add	r18, r18
    1ca0:	33 1f       	adc	r19, r19
    1ca2:	ce 01       	movw	r24, r28
    1ca4:	01 96       	adiw	r24, 0x01	; 1
    1ca6:	82 0f       	add	r24, r18
    1ca8:	93 1f       	adc	r25, r19
    1caa:	fc 01       	movw	r30, r24
    1cac:	34 96       	adiw	r30, 0x04	; 4
    1cae:	80 81       	ld	r24, Z
    1cb0:	91 81       	ldd	r25, Z+1	; 0x01
    1cb2:	00 97       	sbiw	r24, 0x00	; 0
    1cb4:	61 f3       	breq	.-40     	; 0x1c8e <LCDWriteInteger+0x9e>
    1cb6:	08 c0       	rjmp	.+16     	; 0x1cc8 <LCDWriteInteger+0xd8>
	else
		j=5-field_length;
    1cb8:	85 e0       	ldi	r24, 0x05	; 5
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	29 89       	ldd	r18, Y+17	; 0x11
    1cbe:	3a 89       	ldd	r19, Y+18	; 0x12
    1cc0:	82 1b       	sub	r24, r18
    1cc2:	93 0b       	sbc	r25, r19
    1cc4:	9a 83       	std	Y+2, r25	; 0x02
    1cc6:	89 83       	std	Y+1, r24	; 0x01

	for(i=j;i<5;i++)
    1cc8:	89 81       	ldd	r24, Y+1	; 0x01
    1cca:	9a 81       	ldd	r25, Y+2	; 0x02
    1ccc:	9c 83       	std	Y+4, r25	; 0x04
    1cce:	8b 83       	std	Y+3, r24	; 0x03
    1cd0:	15 c0       	rjmp	.+42     	; 0x1cfc <LCDWriteInteger+0x10c>
	{
		LCD_vidWriteCharacter('0'+str[i]);
    1cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd6:	9c 01       	movw	r18, r24
    1cd8:	22 0f       	add	r18, r18
    1cda:	33 1f       	adc	r19, r19
    1cdc:	ce 01       	movw	r24, r28
    1cde:	01 96       	adiw	r24, 0x01	; 1
    1ce0:	82 0f       	add	r24, r18
    1ce2:	93 1f       	adc	r25, r19
    1ce4:	fc 01       	movw	r30, r24
    1ce6:	34 96       	adiw	r30, 0x04	; 4
    1ce8:	80 81       	ld	r24, Z
    1cea:	91 81       	ldd	r25, Z+1	; 0x01
    1cec:	80 5d       	subi	r24, 0xD0	; 208
    1cee:	0e 94 0c 0c 	call	0x1818	; 0x1818 <LCD_vidWriteCharacter>
	if(field_length==-1)
		while(str[j]==0) j++;
	else
		j=5-field_length;

	for(i=j;i<5;i++)
    1cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf6:	01 96       	adiw	r24, 0x01	; 1
    1cf8:	9c 83       	std	Y+4, r25	; 0x04
    1cfa:	8b 83       	std	Y+3, r24	; 0x03
    1cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1d00:	85 30       	cpi	r24, 0x05	; 5
    1d02:	91 05       	cpc	r25, r1
    1d04:	30 f3       	brcs	.-52     	; 0x1cd2 <LCDWriteInteger+0xe2>
	{
		LCD_vidWriteCharacter('0'+str[i]);
	}
}
    1d06:	62 96       	adiw	r28, 0x12	; 18
    1d08:	0f b6       	in	r0, 0x3f	; 63
    1d0a:	f8 94       	cli
    1d0c:	de bf       	out	0x3e, r29	; 62
    1d0e:	0f be       	out	0x3f, r0	; 63
    1d10:	cd bf       	out	0x3d, r28	; 61
    1d12:	cf 91       	pop	r28
    1d14:	df 91       	pop	r29
    1d16:	08 95       	ret

00001d18 <vid_SeparateResult>:
/********************************************************/

void vid_SeparateResult(u32 u32Result , u8 * u8ArrayResult) {
    1d18:	0f 93       	push	r16
    1d1a:	1f 93       	push	r17
    1d1c:	df 93       	push	r29
    1d1e:	cf 93       	push	r28
    1d20:	00 d0       	rcall	.+0      	; 0x1d22 <vid_SeparateResult+0xa>
    1d22:	00 d0       	rcall	.+0      	; 0x1d24 <vid_SeparateResult+0xc>
    1d24:	00 d0       	rcall	.+0      	; 0x1d26 <vid_SeparateResult+0xe>
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
    1d2a:	69 83       	std	Y+1, r22	; 0x01
    1d2c:	7a 83       	std	Y+2, r23	; 0x02
    1d2e:	8b 83       	std	Y+3, r24	; 0x03
    1d30:	9c 83       	std	Y+4, r25	; 0x04
    1d32:	5e 83       	std	Y+6, r21	; 0x06
    1d34:	4d 83       	std	Y+5, r20	; 0x05

	u8ArrayResult[0]= ( (u32Result / 10000) % 10 ) + 48 ;
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3a:	ab 81       	ldd	r26, Y+3	; 0x03
    1d3c:	bc 81       	ldd	r27, Y+4	; 0x04
    1d3e:	20 e1       	ldi	r18, 0x10	; 16
    1d40:	37 e2       	ldi	r19, 0x27	; 39
    1d42:	40 e0       	ldi	r20, 0x00	; 0
    1d44:	50 e0       	ldi	r21, 0x00	; 0
    1d46:	bc 01       	movw	r22, r24
    1d48:	cd 01       	movw	r24, r26
    1d4a:	0e 94 a6 10 	call	0x214c	; 0x214c <__udivmodsi4>
    1d4e:	da 01       	movw	r26, r20
    1d50:	c9 01       	movw	r24, r18
    1d52:	2a e0       	ldi	r18, 0x0A	; 10
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	40 e0       	ldi	r20, 0x00	; 0
    1d58:	50 e0       	ldi	r21, 0x00	; 0
    1d5a:	bc 01       	movw	r22, r24
    1d5c:	cd 01       	movw	r24, r26
    1d5e:	0e 94 a6 10 	call	0x214c	; 0x214c <__udivmodsi4>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	80 5d       	subi	r24, 0xD0	; 208
    1d68:	ed 81       	ldd	r30, Y+5	; 0x05
    1d6a:	fe 81       	ldd	r31, Y+6	; 0x06
    1d6c:	80 83       	st	Z, r24
	u8ArrayResult[1]= ( (u32Result / 1000) % 10 ) + 48 ;
    1d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d70:	9e 81       	ldd	r25, Y+6	; 0x06
    1d72:	8c 01       	movw	r16, r24
    1d74:	0f 5f       	subi	r16, 0xFF	; 255
    1d76:	1f 4f       	sbci	r17, 0xFF	; 255
    1d78:	89 81       	ldd	r24, Y+1	; 0x01
    1d7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7c:	ab 81       	ldd	r26, Y+3	; 0x03
    1d7e:	bc 81       	ldd	r27, Y+4	; 0x04
    1d80:	28 ee       	ldi	r18, 0xE8	; 232
    1d82:	33 e0       	ldi	r19, 0x03	; 3
    1d84:	40 e0       	ldi	r20, 0x00	; 0
    1d86:	50 e0       	ldi	r21, 0x00	; 0
    1d88:	bc 01       	movw	r22, r24
    1d8a:	cd 01       	movw	r24, r26
    1d8c:	0e 94 a6 10 	call	0x214c	; 0x214c <__udivmodsi4>
    1d90:	da 01       	movw	r26, r20
    1d92:	c9 01       	movw	r24, r18
    1d94:	2a e0       	ldi	r18, 0x0A	; 10
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	40 e0       	ldi	r20, 0x00	; 0
    1d9a:	50 e0       	ldi	r21, 0x00	; 0
    1d9c:	bc 01       	movw	r22, r24
    1d9e:	cd 01       	movw	r24, r26
    1da0:	0e 94 a6 10 	call	0x214c	; 0x214c <__udivmodsi4>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	80 5d       	subi	r24, 0xD0	; 208
    1daa:	f8 01       	movw	r30, r16
    1dac:	80 83       	st	Z, r24
	u8ArrayResult[2]= ( (u32Result / 100) % 10 ) + 48 ;
    1dae:	8d 81       	ldd	r24, Y+5	; 0x05
    1db0:	9e 81       	ldd	r25, Y+6	; 0x06
    1db2:	8c 01       	movw	r16, r24
    1db4:	0e 5f       	subi	r16, 0xFE	; 254
    1db6:	1f 4f       	sbci	r17, 0xFF	; 255
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	9a 81       	ldd	r25, Y+2	; 0x02
    1dbc:	ab 81       	ldd	r26, Y+3	; 0x03
    1dbe:	bc 81       	ldd	r27, Y+4	; 0x04
    1dc0:	24 e6       	ldi	r18, 0x64	; 100
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	40 e0       	ldi	r20, 0x00	; 0
    1dc6:	50 e0       	ldi	r21, 0x00	; 0
    1dc8:	bc 01       	movw	r22, r24
    1dca:	cd 01       	movw	r24, r26
    1dcc:	0e 94 a6 10 	call	0x214c	; 0x214c <__udivmodsi4>
    1dd0:	da 01       	movw	r26, r20
    1dd2:	c9 01       	movw	r24, r18
    1dd4:	2a e0       	ldi	r18, 0x0A	; 10
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	40 e0       	ldi	r20, 0x00	; 0
    1dda:	50 e0       	ldi	r21, 0x00	; 0
    1ddc:	bc 01       	movw	r22, r24
    1dde:	cd 01       	movw	r24, r26
    1de0:	0e 94 a6 10 	call	0x214c	; 0x214c <__udivmodsi4>
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	80 5d       	subi	r24, 0xD0	; 208
    1dea:	f8 01       	movw	r30, r16
    1dec:	80 83       	st	Z, r24
	u8ArrayResult[3]= ( (u32Result / 10) % 10 ) + 48 ;
    1dee:	8d 81       	ldd	r24, Y+5	; 0x05
    1df0:	9e 81       	ldd	r25, Y+6	; 0x06
    1df2:	8c 01       	movw	r16, r24
    1df4:	0d 5f       	subi	r16, 0xFD	; 253
    1df6:	1f 4f       	sbci	r17, 0xFF	; 255
    1df8:	89 81       	ldd	r24, Y+1	; 0x01
    1dfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfc:	ab 81       	ldd	r26, Y+3	; 0x03
    1dfe:	bc 81       	ldd	r27, Y+4	; 0x04
    1e00:	2a e0       	ldi	r18, 0x0A	; 10
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	40 e0       	ldi	r20, 0x00	; 0
    1e06:	50 e0       	ldi	r21, 0x00	; 0
    1e08:	bc 01       	movw	r22, r24
    1e0a:	cd 01       	movw	r24, r26
    1e0c:	0e 94 a6 10 	call	0x214c	; 0x214c <__udivmodsi4>
    1e10:	da 01       	movw	r26, r20
    1e12:	c9 01       	movw	r24, r18
    1e14:	2a e0       	ldi	r18, 0x0A	; 10
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	40 e0       	ldi	r20, 0x00	; 0
    1e1a:	50 e0       	ldi	r21, 0x00	; 0
    1e1c:	bc 01       	movw	r22, r24
    1e1e:	cd 01       	movw	r24, r26
    1e20:	0e 94 a6 10 	call	0x214c	; 0x214c <__udivmodsi4>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	80 5d       	subi	r24, 0xD0	; 208
    1e2a:	f8 01       	movw	r30, r16
    1e2c:	80 83       	st	Z, r24
	u8ArrayResult[4]=   (u32Result  % 10 ) + 48 ;
    1e2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e30:	9e 81       	ldd	r25, Y+6	; 0x06
    1e32:	8c 01       	movw	r16, r24
    1e34:	0c 5f       	subi	r16, 0xFC	; 252
    1e36:	1f 4f       	sbci	r17, 0xFF	; 255
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
    1e3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3c:	ab 81       	ldd	r26, Y+3	; 0x03
    1e3e:	bc 81       	ldd	r27, Y+4	; 0x04
    1e40:	2a e0       	ldi	r18, 0x0A	; 10
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	40 e0       	ldi	r20, 0x00	; 0
    1e46:	50 e0       	ldi	r21, 0x00	; 0
    1e48:	bc 01       	movw	r22, r24
    1e4a:	cd 01       	movw	r24, r26
    1e4c:	0e 94 a6 10 	call	0x214c	; 0x214c <__udivmodsi4>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	80 5d       	subi	r24, 0xD0	; 208
    1e56:	f8 01       	movw	r30, r16
    1e58:	80 83       	st	Z, r24

}
    1e5a:	26 96       	adiw	r28, 0x06	; 6
    1e5c:	0f b6       	in	r0, 0x3f	; 63
    1e5e:	f8 94       	cli
    1e60:	de bf       	out	0x3e, r29	; 62
    1e62:	0f be       	out	0x3f, r0	; 63
    1e64:	cd bf       	out	0x3d, r28	; 61
    1e66:	cf 91       	pop	r28
    1e68:	df 91       	pop	r29
    1e6a:	1f 91       	pop	r17
    1e6c:	0f 91       	pop	r16
    1e6e:	08 95       	ret

00001e70 <main>:

#include "LCD_int.h"
#include "ADC_int.h"


void main (void) {
    1e70:	df 93       	push	r29
    1e72:	cf 93       	push	r28
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62
    1e78:	e6 97       	sbiw	r28, 0x36	; 54
    1e7a:	0f b6       	in	r0, 0x3f	; 63
    1e7c:	f8 94       	cli
    1e7e:	de bf       	out	0x3e, r29	; 62
    1e80:	0f be       	out	0x3f, r0	; 63
    1e82:	cd bf       	out	0x3d, r28	; 61

	u8 s[9] ="ADC_VAL=";
    1e84:	ce 01       	movw	r24, r28
    1e86:	45 96       	adiw	r24, 0x15	; 21
    1e88:	9e a7       	std	Y+46, r25	; 0x2e
    1e8a:	8d a7       	std	Y+45, r24	; 0x2d
    1e8c:	e0 e6       	ldi	r30, 0x60	; 96
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	f8 ab       	std	Y+48, r31	; 0x30
    1e92:	ef a7       	std	Y+47, r30	; 0x2f
    1e94:	f9 e0       	ldi	r31, 0x09	; 9
    1e96:	f9 ab       	std	Y+49, r31	; 0x31
    1e98:	ef a5       	ldd	r30, Y+47	; 0x2f
    1e9a:	f8 a9       	ldd	r31, Y+48	; 0x30
    1e9c:	00 80       	ld	r0, Z
    1e9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ea0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ea2:	01 96       	adiw	r24, 0x01	; 1
    1ea4:	98 ab       	std	Y+48, r25	; 0x30
    1ea6:	8f a7       	std	Y+47, r24	; 0x2f
    1ea8:	ed a5       	ldd	r30, Y+45	; 0x2d
    1eaa:	fe a5       	ldd	r31, Y+46	; 0x2e
    1eac:	00 82       	st	Z, r0
    1eae:	8d a5       	ldd	r24, Y+45	; 0x2d
    1eb0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1eb2:	01 96       	adiw	r24, 0x01	; 1
    1eb4:	9e a7       	std	Y+46, r25	; 0x2e
    1eb6:	8d a7       	std	Y+45, r24	; 0x2d
    1eb8:	99 a9       	ldd	r25, Y+49	; 0x31
    1eba:	91 50       	subi	r25, 0x01	; 1
    1ebc:	99 ab       	std	Y+49, r25	; 0x31
    1ebe:	e9 a9       	ldd	r30, Y+49	; 0x31
    1ec0:	ee 23       	and	r30, r30
    1ec2:	51 f7       	brne	.-44     	; 0x1e98 <main+0x28>
	u8 x[8] ="TEMP = ";
    1ec4:	ce 01       	movw	r24, r28
    1ec6:	4e 96       	adiw	r24, 0x1e	; 30
    1ec8:	9b ab       	std	Y+51, r25	; 0x33
    1eca:	8a ab       	std	Y+50, r24	; 0x32
    1ecc:	e9 e6       	ldi	r30, 0x69	; 105
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	fd ab       	std	Y+53, r31	; 0x35
    1ed2:	ec ab       	std	Y+52, r30	; 0x34
    1ed4:	f8 e0       	ldi	r31, 0x08	; 8
    1ed6:	fe ab       	std	Y+54, r31	; 0x36
    1ed8:	ec a9       	ldd	r30, Y+52	; 0x34
    1eda:	fd a9       	ldd	r31, Y+53	; 0x35
    1edc:	00 80       	ld	r0, Z
    1ede:	8c a9       	ldd	r24, Y+52	; 0x34
    1ee0:	9d a9       	ldd	r25, Y+53	; 0x35
    1ee2:	01 96       	adiw	r24, 0x01	; 1
    1ee4:	9d ab       	std	Y+53, r25	; 0x35
    1ee6:	8c ab       	std	Y+52, r24	; 0x34
    1ee8:	ea a9       	ldd	r30, Y+50	; 0x32
    1eea:	fb a9       	ldd	r31, Y+51	; 0x33
    1eec:	00 82       	st	Z, r0
    1eee:	8a a9       	ldd	r24, Y+50	; 0x32
    1ef0:	9b a9       	ldd	r25, Y+51	; 0x33
    1ef2:	01 96       	adiw	r24, 0x01	; 1
    1ef4:	9b ab       	std	Y+51, r25	; 0x33
    1ef6:	8a ab       	std	Y+50, r24	; 0x32
    1ef8:	9e a9       	ldd	r25, Y+54	; 0x36
    1efa:	91 50       	subi	r25, 0x01	; 1
    1efc:	9e ab       	std	Y+54, r25	; 0x36
    1efe:	ee a9       	ldd	r30, Y+54	; 0x36
    1f00:	ee 23       	and	r30, r30
    1f02:	51 f7       	brne	.-44     	; 0x1ed8 <main+0x68>
	u8 m[2] ="C";
    1f04:	80 91 71 00 	lds	r24, 0x0071
    1f08:	90 91 72 00 	lds	r25, 0x0072
    1f0c:	9f a3       	std	Y+39, r25	; 0x27
    1f0e:	8e a3       	std	Y+38, r24	; 0x26
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	a8 e4       	ldi	r26, 0x48	; 72
    1f16:	b2 e4       	ldi	r27, 0x42	; 66
    1f18:	8b 87       	std	Y+11, r24	; 0x0b
    1f1a:	9c 87       	std	Y+12, r25	; 0x0c
    1f1c:	ad 87       	std	Y+13, r26	; 0x0d
    1f1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f22:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	4a ef       	ldi	r20, 0xFA	; 250
    1f2e:	54 e4       	ldi	r21, 0x44	; 68
    1f30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	8f 83       	std	Y+7, r24	; 0x07
    1f3a:	98 87       	std	Y+8, r25	; 0x08
    1f3c:	a9 87       	std	Y+9, r26	; 0x09
    1f3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f40:	6f 81       	ldd	r22, Y+7	; 0x07
    1f42:	78 85       	ldd	r23, Y+8	; 0x08
    1f44:	89 85       	ldd	r24, Y+9	; 0x09
    1f46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	40 e8       	ldi	r20, 0x80	; 128
    1f4e:	5f e3       	ldi	r21, 0x3F	; 63
    1f50:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f54:	88 23       	and	r24, r24
    1f56:	2c f4       	brge	.+10     	; 0x1f62 <main+0xf2>
		__ticks = 1;
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	9e 83       	std	Y+6, r25	; 0x06
    1f5e:	8d 83       	std	Y+5, r24	; 0x05
    1f60:	3f c0       	rjmp	.+126    	; 0x1fe0 <main+0x170>
	else if (__tmp > 65535)
    1f62:	6f 81       	ldd	r22, Y+7	; 0x07
    1f64:	78 85       	ldd	r23, Y+8	; 0x08
    1f66:	89 85       	ldd	r24, Y+9	; 0x09
    1f68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	3f ef       	ldi	r19, 0xFF	; 255
    1f6e:	4f e7       	ldi	r20, 0x7F	; 127
    1f70:	57 e4       	ldi	r21, 0x47	; 71
    1f72:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f76:	18 16       	cp	r1, r24
    1f78:	4c f5       	brge	.+82     	; 0x1fcc <main+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	40 e2       	ldi	r20, 0x20	; 32
    1f88:	51 e4       	ldi	r21, 0x41	; 65
    1f8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	bc 01       	movw	r22, r24
    1f94:	cd 01       	movw	r24, r26
    1f96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	9e 83       	std	Y+6, r25	; 0x06
    1fa0:	8d 83       	std	Y+5, r24	; 0x05
    1fa2:	0f c0       	rjmp	.+30     	; 0x1fc2 <main+0x152>
    1fa4:	88 ec       	ldi	r24, 0xC8	; 200
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	9c 83       	std	Y+4, r25	; 0x04
    1faa:	8b 83       	std	Y+3, r24	; 0x03
    1fac:	8b 81       	ldd	r24, Y+3	; 0x03
    1fae:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb0:	01 97       	sbiw	r24, 0x01	; 1
    1fb2:	f1 f7       	brne	.-4      	; 0x1fb0 <main+0x140>
    1fb4:	9c 83       	std	Y+4, r25	; 0x04
    1fb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fba:	9e 81       	ldd	r25, Y+6	; 0x06
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	9e 83       	std	Y+6, r25	; 0x06
    1fc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc6:	00 97       	sbiw	r24, 0x00	; 0
    1fc8:	69 f7       	brne	.-38     	; 0x1fa4 <main+0x134>
    1fca:	14 c0       	rjmp	.+40     	; 0x1ff4 <main+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fcc:	6f 81       	ldd	r22, Y+7	; 0x07
    1fce:	78 85       	ldd	r23, Y+8	; 0x08
    1fd0:	89 85       	ldd	r24, Y+9	; 0x09
    1fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	9e 83       	std	Y+6, r25	; 0x06
    1fde:	8d 83       	std	Y+5, r24	; 0x05
    1fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe4:	9a 83       	std	Y+2, r25	; 0x02
    1fe6:	89 83       	std	Y+1, r24	; 0x01
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
    1fea:	9a 81       	ldd	r25, Y+2	; 0x02
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	f1 f7       	brne	.-4      	; 0x1fec <main+0x17c>
    1ff0:	9a 83       	std	Y+2, r25	; 0x02
    1ff2:	89 83       	std	Y+1, r24	; 0x01
	/****************  LCD Configuration  *****************/

		     _delay_ms(50);

			  // SET VDD TO D0   5 Volt (D0 >> VDD)
			  DIO_SetPinDirection (PORTD, PIN0, HIGH);
    1ff4:	83 e0       	ldi	r24, 0x03	; 3
    1ff6:	60 e0       	ldi	r22, 0x00	; 0
    1ff8:	41 e0       	ldi	r20, 0x01	; 1
    1ffa:	0e 94 68 07 	call	0xed0	; 0xed0 <DIO_SetPinDirection>

			  //  RS >> D1
			  DIO_SetPinDirection (PORTD, PIN1, HIGH);
    1ffe:	83 e0       	ldi	r24, 0x03	; 3
    2000:	61 e0       	ldi	r22, 0x01	; 1
    2002:	41 e0       	ldi	r20, 0x01	; 1
    2004:	0e 94 68 07 	call	0xed0	; 0xed0 <DIO_SetPinDirection>

			  //  R/W >> D2
			  DIO_SetPinDirection (PORTD, PIN2, HIGH);
    2008:	83 e0       	ldi	r24, 0x03	; 3
    200a:	62 e0       	ldi	r22, 0x02	; 2
    200c:	41 e0       	ldi	r20, 0x01	; 1
    200e:	0e 94 68 07 	call	0xed0	; 0xed0 <DIO_SetPinDirection>

			  //  Enable >> D3
			   DIO_SetPinDirection (PORTD, PIN3, HIGH);
    2012:	83 e0       	ldi	r24, 0x03	; 3
    2014:	63 e0       	ldi	r22, 0x03	; 3
    2016:	41 e0       	ldi	r20, 0x01	; 1
    2018:	0e 94 68 07 	call	0xed0	; 0xed0 <DIO_SetPinDirection>


			  //SET PORTC AS OUTPUT (PORTC >> DB0...DB7)
			  DIO_SetPortDirection (PORTC, 0XFF);
    201c:	82 e0       	ldi	r24, 0x02	; 2
    201e:	6f ef       	ldi	r22, 0xFF	; 255
    2020:	0e 94 70 08 	call	0x10e0	; 0x10e0 <DIO_SetPortDirection>


	/****************  ADC Configuration  *****************/

	DIO_SetPortDirection (PORTA, 0x00);
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	60 e0       	ldi	r22, 0x00	; 0
    2028:	0e 94 70 08 	call	0x10e0	; 0x10e0 <DIO_SetPortDirection>
	DIO_SetPortValue     (PORTA, 0X01);
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	61 e0       	ldi	r22, 0x01	; 1
    2030:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_SetPortValue>

	/******************************************************/


	ADC_Init ();
    2034:	0e 94 9b 05 	call	0xb36	; 0xb36 <ADC_Init>
	LCD_vidInitialize();
    2038:	0e 94 95 09 	call	0x132a	; 0x132a <LCD_vidInitialize>


	while (1){


		 local_u16_Read = ADC_Read (0) ;
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	0e 94 aa 05 	call	0xb54	; 0xb54 <ADC_Read>
    2042:	9c 8b       	std	Y+20, r25	; 0x14
    2044:	8b 8b       	std	Y+19, r24	; 0x13


		volt =(  ( (u32)local_u16_Read *  5000UL)/10UL ) / 1024UL  ;
    2046:	8b 89       	ldd	r24, Y+19	; 0x13
    2048:	9c 89       	ldd	r25, Y+20	; 0x14
    204a:	cc 01       	movw	r24, r24
    204c:	a0 e0       	ldi	r26, 0x00	; 0
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	28 e8       	ldi	r18, 0x88	; 136
    2052:	33 e1       	ldi	r19, 0x13	; 19
    2054:	40 e0       	ldi	r20, 0x00	; 0
    2056:	50 e0       	ldi	r21, 0x00	; 0
    2058:	bc 01       	movw	r22, r24
    205a:	cd 01       	movw	r24, r26
    205c:	0e 94 73 10 	call	0x20e6	; 0x20e6 <__mulsi3>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	38 e2       	ldi	r19, 0x28	; 40
    2068:	40 e0       	ldi	r20, 0x00	; 0
    206a:	50 e0       	ldi	r21, 0x00	; 0
    206c:	bc 01       	movw	r22, r24
    206e:	cd 01       	movw	r24, r26
    2070:	0e 94 a6 10 	call	0x214c	; 0x214c <__udivmodsi4>
    2074:	da 01       	movw	r26, r20
    2076:	c9 01       	movw	r24, r18
    2078:	8f 87       	std	Y+15, r24	; 0x0f
    207a:	98 8b       	std	Y+16, r25	; 0x10
    207c:	a9 8b       	std	Y+17, r26	; 0x11
    207e:	ba 8b       	std	Y+18, r27	; 0x12


		 Gotoxy (1,1) ;
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	61 e0       	ldi	r22, 0x01	; 1
    2084:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <Gotoxy>
		LCD_vidWriteString (s, 9) ;
    2088:	ce 01       	movw	r24, r28
    208a:	45 96       	adiw	r24, 0x15	; 21
    208c:	69 e0       	ldi	r22, 0x09	; 9
    208e:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <LCD_vidWriteString>

		Gotoxy (10,1) ;
    2092:	8a e0       	ldi	r24, 0x0A	; 10
    2094:	61 e0       	ldi	r22, 0x01	; 1
    2096:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <Gotoxy>
		LCDWriteInteger( local_u16_Read,4) ;
    209a:	8b 89       	ldd	r24, Y+19	; 0x13
    209c:	9c 89       	ldd	r25, Y+20	; 0x14
    209e:	64 e0       	ldi	r22, 0x04	; 4
    20a0:	70 e0       	ldi	r23, 0x00	; 0
    20a2:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <LCDWriteInteger>

		 Gotoxy (1,2) ;
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	62 e0       	ldi	r22, 0x02	; 2
    20aa:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <Gotoxy>
		LCD_vidWriteString (x, 8) ;
    20ae:	ce 01       	movw	r24, r28
    20b0:	4e 96       	adiw	r24, 0x1e	; 30
    20b2:	68 e0       	ldi	r22, 0x08	; 8
    20b4:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <LCD_vidWriteString>

		Gotoxy (9,2) ;
    20b8:	89 e0       	ldi	r24, 0x09	; 9
    20ba:	62 e0       	ldi	r22, 0x02	; 2
    20bc:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <Gotoxy>

		LCDWriteInteger( volt,4) ;
    20c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    20c2:	98 89       	ldd	r25, Y+16	; 0x10
    20c4:	64 e0       	ldi	r22, 0x04	; 4
    20c6:	70 e0       	ldi	r23, 0x00	; 0
    20c8:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <LCDWriteInteger>


		Gotoxy (15,2) ;
    20cc:	8f e0       	ldi	r24, 0x0F	; 15
    20ce:	62 e0       	ldi	r22, 0x02	; 2
    20d0:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <Gotoxy>
		LCD_vidWriteString (m, 2) ;
    20d4:	ce 01       	movw	r24, r28
    20d6:	86 96       	adiw	r24, 0x26	; 38
    20d8:	62 e0       	ldi	r22, 0x02	; 2
    20da:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <LCD_vidWriteString>

		LCD_vidWriteCommand (0x02) ;
    20de:	82 e0       	ldi	r24, 0x02	; 2
    20e0:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <LCD_vidWriteCommand>
    20e4:	ab cf       	rjmp	.-170    	; 0x203c <main+0x1cc>

000020e6 <__mulsi3>:
    20e6:	62 9f       	mul	r22, r18
    20e8:	d0 01       	movw	r26, r0
    20ea:	73 9f       	mul	r23, r19
    20ec:	f0 01       	movw	r30, r0
    20ee:	82 9f       	mul	r24, r18
    20f0:	e0 0d       	add	r30, r0
    20f2:	f1 1d       	adc	r31, r1
    20f4:	64 9f       	mul	r22, r20
    20f6:	e0 0d       	add	r30, r0
    20f8:	f1 1d       	adc	r31, r1
    20fa:	92 9f       	mul	r25, r18
    20fc:	f0 0d       	add	r31, r0
    20fe:	83 9f       	mul	r24, r19
    2100:	f0 0d       	add	r31, r0
    2102:	74 9f       	mul	r23, r20
    2104:	f0 0d       	add	r31, r0
    2106:	65 9f       	mul	r22, r21
    2108:	f0 0d       	add	r31, r0
    210a:	99 27       	eor	r25, r25
    210c:	72 9f       	mul	r23, r18
    210e:	b0 0d       	add	r27, r0
    2110:	e1 1d       	adc	r30, r1
    2112:	f9 1f       	adc	r31, r25
    2114:	63 9f       	mul	r22, r19
    2116:	b0 0d       	add	r27, r0
    2118:	e1 1d       	adc	r30, r1
    211a:	f9 1f       	adc	r31, r25
    211c:	bd 01       	movw	r22, r26
    211e:	cf 01       	movw	r24, r30
    2120:	11 24       	eor	r1, r1
    2122:	08 95       	ret

00002124 <__udivmodhi4>:
    2124:	aa 1b       	sub	r26, r26
    2126:	bb 1b       	sub	r27, r27
    2128:	51 e1       	ldi	r21, 0x11	; 17
    212a:	07 c0       	rjmp	.+14     	; 0x213a <__udivmodhi4_ep>

0000212c <__udivmodhi4_loop>:
    212c:	aa 1f       	adc	r26, r26
    212e:	bb 1f       	adc	r27, r27
    2130:	a6 17       	cp	r26, r22
    2132:	b7 07       	cpc	r27, r23
    2134:	10 f0       	brcs	.+4      	; 0x213a <__udivmodhi4_ep>
    2136:	a6 1b       	sub	r26, r22
    2138:	b7 0b       	sbc	r27, r23

0000213a <__udivmodhi4_ep>:
    213a:	88 1f       	adc	r24, r24
    213c:	99 1f       	adc	r25, r25
    213e:	5a 95       	dec	r21
    2140:	a9 f7       	brne	.-22     	; 0x212c <__udivmodhi4_loop>
    2142:	80 95       	com	r24
    2144:	90 95       	com	r25
    2146:	bc 01       	movw	r22, r24
    2148:	cd 01       	movw	r24, r26
    214a:	08 95       	ret

0000214c <__udivmodsi4>:
    214c:	a1 e2       	ldi	r26, 0x21	; 33
    214e:	1a 2e       	mov	r1, r26
    2150:	aa 1b       	sub	r26, r26
    2152:	bb 1b       	sub	r27, r27
    2154:	fd 01       	movw	r30, r26
    2156:	0d c0       	rjmp	.+26     	; 0x2172 <__udivmodsi4_ep>

00002158 <__udivmodsi4_loop>:
    2158:	aa 1f       	adc	r26, r26
    215a:	bb 1f       	adc	r27, r27
    215c:	ee 1f       	adc	r30, r30
    215e:	ff 1f       	adc	r31, r31
    2160:	a2 17       	cp	r26, r18
    2162:	b3 07       	cpc	r27, r19
    2164:	e4 07       	cpc	r30, r20
    2166:	f5 07       	cpc	r31, r21
    2168:	20 f0       	brcs	.+8      	; 0x2172 <__udivmodsi4_ep>
    216a:	a2 1b       	sub	r26, r18
    216c:	b3 0b       	sbc	r27, r19
    216e:	e4 0b       	sbc	r30, r20
    2170:	f5 0b       	sbc	r31, r21

00002172 <__udivmodsi4_ep>:
    2172:	66 1f       	adc	r22, r22
    2174:	77 1f       	adc	r23, r23
    2176:	88 1f       	adc	r24, r24
    2178:	99 1f       	adc	r25, r25
    217a:	1a 94       	dec	r1
    217c:	69 f7       	brne	.-38     	; 0x2158 <__udivmodsi4_loop>
    217e:	60 95       	com	r22
    2180:	70 95       	com	r23
    2182:	80 95       	com	r24
    2184:	90 95       	com	r25
    2186:	9b 01       	movw	r18, r22
    2188:	ac 01       	movw	r20, r24
    218a:	bd 01       	movw	r22, r26
    218c:	cf 01       	movw	r24, r30
    218e:	08 95       	ret

00002190 <__prologue_saves__>:
    2190:	2f 92       	push	r2
    2192:	3f 92       	push	r3
    2194:	4f 92       	push	r4
    2196:	5f 92       	push	r5
    2198:	6f 92       	push	r6
    219a:	7f 92       	push	r7
    219c:	8f 92       	push	r8
    219e:	9f 92       	push	r9
    21a0:	af 92       	push	r10
    21a2:	bf 92       	push	r11
    21a4:	cf 92       	push	r12
    21a6:	df 92       	push	r13
    21a8:	ef 92       	push	r14
    21aa:	ff 92       	push	r15
    21ac:	0f 93       	push	r16
    21ae:	1f 93       	push	r17
    21b0:	cf 93       	push	r28
    21b2:	df 93       	push	r29
    21b4:	cd b7       	in	r28, 0x3d	; 61
    21b6:	de b7       	in	r29, 0x3e	; 62
    21b8:	ca 1b       	sub	r28, r26
    21ba:	db 0b       	sbc	r29, r27
    21bc:	0f b6       	in	r0, 0x3f	; 63
    21be:	f8 94       	cli
    21c0:	de bf       	out	0x3e, r29	; 62
    21c2:	0f be       	out	0x3f, r0	; 63
    21c4:	cd bf       	out	0x3d, r28	; 61
    21c6:	09 94       	ijmp

000021c8 <__epilogue_restores__>:
    21c8:	2a 88       	ldd	r2, Y+18	; 0x12
    21ca:	39 88       	ldd	r3, Y+17	; 0x11
    21cc:	48 88       	ldd	r4, Y+16	; 0x10
    21ce:	5f 84       	ldd	r5, Y+15	; 0x0f
    21d0:	6e 84       	ldd	r6, Y+14	; 0x0e
    21d2:	7d 84       	ldd	r7, Y+13	; 0x0d
    21d4:	8c 84       	ldd	r8, Y+12	; 0x0c
    21d6:	9b 84       	ldd	r9, Y+11	; 0x0b
    21d8:	aa 84       	ldd	r10, Y+10	; 0x0a
    21da:	b9 84       	ldd	r11, Y+9	; 0x09
    21dc:	c8 84       	ldd	r12, Y+8	; 0x08
    21de:	df 80       	ldd	r13, Y+7	; 0x07
    21e0:	ee 80       	ldd	r14, Y+6	; 0x06
    21e2:	fd 80       	ldd	r15, Y+5	; 0x05
    21e4:	0c 81       	ldd	r16, Y+4	; 0x04
    21e6:	1b 81       	ldd	r17, Y+3	; 0x03
    21e8:	aa 81       	ldd	r26, Y+2	; 0x02
    21ea:	b9 81       	ldd	r27, Y+1	; 0x01
    21ec:	ce 0f       	add	r28, r30
    21ee:	d1 1d       	adc	r29, r1
    21f0:	0f b6       	in	r0, 0x3f	; 63
    21f2:	f8 94       	cli
    21f4:	de bf       	out	0x3e, r29	; 62
    21f6:	0f be       	out	0x3f, r0	; 63
    21f8:	cd bf       	out	0x3d, r28	; 61
    21fa:	ed 01       	movw	r28, r26
    21fc:	08 95       	ret

000021fe <_exit>:
    21fe:	f8 94       	cli

00002200 <__stop_program>:
    2200:	ff cf       	rjmp	.-2      	; 0x2200 <__stop_program>
